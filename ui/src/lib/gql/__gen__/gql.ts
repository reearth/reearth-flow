/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "mutation CreateDeployment($input: CreateDeploymentInput!) {\n  createDeployment(input: $input) {\n    deployment {\n      ...Deployment\n    }\n  }\n}\n\nmutation UpdateDeployment($input: UpdateDeploymentInput!) {\n  updateDeployment(input: $input) {\n    deployment {\n      ...Deployment\n    }\n  }\n}\n\nmutation DeleteDeployment($input: DeleteDeploymentInput!) {\n  deleteDeployment(input: $input) {\n    deploymentId\n  }\n}\n\nmutation ExecuteDeployment($input: ExecuteDeploymentInput!) {\n  executeDeployment(input: $input) {\n    job {\n      ...Job\n    }\n  }\n}\n\nquery GetDeployments($workspaceId: ID!, $pagination: PageBasedPagination!) {\n  deployments(workspaceId: $workspaceId, pagination: $pagination) {\n    totalCount\n    nodes {\n      ...Deployment\n    }\n    pageInfo {\n      totalCount\n      currentPage\n      totalPages\n    }\n  }\n}\n\nquery GetDeploymentHead($input: GetHeadInput!) {\n  deploymentHead(input: $input) {\n    ...Deployment\n  }\n}": typeof types.CreateDeploymentDocument,
    "query GetLatestProjectSnapshot($projectId: ID!) {\n  latestProjectSnapshot(projectId: $projectId) {\n    id\n    timestamp\n    updates\n    version\n  }\n}\n\nquery GetProjectHistory($projectId: ID!) {\n  projectHistory(projectId: $projectId) {\n    timestamp\n    updates\n    version\n  }\n}\n\nmutation RollbackProject($projectId: ID!, $version: Int!) {\n  rollbackProject(projectId: $projectId, version: $version) {\n    id\n    timestamp\n    updates\n    version\n  }\n}": typeof types.GetLatestProjectSnapshotDocument,
    "fragment Project on Project {\n  id\n  name\n  description\n  createdAt\n  updatedAt\n  workspaceId\n  sharedToken\n  deployment {\n    ...Deployment\n  }\n}\n\nfragment Deployment on Deployment {\n  id\n  projectId\n  workspaceId\n  workflowUrl\n  description\n  version\n  createdAt\n  updatedAt\n  project {\n    name\n  }\n}\n\nfragment Trigger on Trigger {\n  id\n  createdAt\n  updatedAt\n  lastTriggered\n  workspaceId\n  deploymentId\n  deployment {\n    ...Deployment\n  }\n  eventSource\n  authToken\n  timeInterval\n  description\n}\n\nfragment EdgeExecution on EdgeExecution {\n  id\n  edgeId\n  jobId\n  status\n  createdAt\n  startedAt\n  completedAt\n  featureId\n  intermediateDataUrl\n}\n\nfragment Job on Job {\n  id\n  workspaceId\n  status\n  startedAt\n  completedAt\n  logsURL\n  outputURLs\n  debug\n  deployment {\n    id\n    description\n  }\n}\n\nfragment ProjectDocument on ProjectDocument {\n  id\n  timestamp\n  updates\n  version\n}\n\nfragment ProjectSnapshot on ProjectSnapshot {\n  timestamp\n  updates\n  version\n}\n\nfragment Log on Log {\n  jobId\n  nodeId\n  timestamp\n  logLevel\n  message\n}\n\nfragment ProjectDocument on ProjectDocument {\n  id\n  timestamp\n  updates\n  version\n}\n\nfragment ProjectSnapshot on ProjectSnapshot {\n  timestamp\n  updates\n  version\n}": typeof types.ProjectFragmentDoc,
    "query GetJobs($workspaceId: ID!, $pagination: PageBasedPagination!) {\n  jobs(workspaceId: $workspaceId, pagination: $pagination) {\n    totalCount\n    nodes {\n      ...Job\n    }\n    pageInfo {\n      totalCount\n      currentPage\n      totalPages\n    }\n  }\n}\n\nquery GetJob($id: ID!) {\n  job(id: $id) {\n    ...Job\n  }\n}\n\nquery GetEdgeExecution($jobId: ID!, $edgeId: String!) {\n  edgeExecution(jobId: $jobId, edgeId: $edgeId) {\n    ...EdgeExecution\n  }\n}\n\nmutation CancelJob($input: CancelJobInput!) {\n  cancelJob(input: $input) {\n    job {\n      ...Job\n    }\n  }\n}": typeof types.GetJobsDocument,
    "mutation CreateProject($input: CreateProjectInput!) {\n  createProject(input: $input) {\n    project {\n      ...Project\n    }\n  }\n}\n\nquery GetProjects($workspaceId: ID!, $pagination: PageBasedPagination!) {\n  projects(workspaceId: $workspaceId, pagination: $pagination) {\n    totalCount\n    nodes {\n      ...Project\n    }\n    pageInfo {\n      totalCount\n      currentPage\n      totalPages\n    }\n  }\n}\n\nquery GetProjectById($projectId: ID!) {\n  node(id: $projectId, type: PROJECT) {\n    __typename\n    ...Project\n  }\n}\n\nmutation UpdateProject($input: UpdateProjectInput!) {\n  updateProject(input: $input) {\n    project {\n      ...Project\n    }\n  }\n}\n\nmutation DeleteProject($input: DeleteProjectInput!) {\n  deleteProject(input: $input) {\n    projectId\n  }\n}\n\nmutation RunProject($input: RunProjectInput!) {\n  runProject(input: $input) {\n    job {\n      ...Job\n    }\n  }\n}": typeof types.CreateProjectDocument,
    "query GetSharedProject($token: String!) {\n  sharedProject(token: $token) {\n    project {\n      ...Project\n    }\n  }\n}\n\nquery GetSharedProjectInfo($projectId: ID!) {\n  projectSharingInfo(projectId: $projectId) {\n    projectId\n    sharingToken\n  }\n}\n\nmutation ShareProject($input: ShareProjectInput!) {\n  shareProject(input: $input) {\n    projectId\n    sharingUrl\n  }\n}\n\nmutation UnshareProject($input: UnshareProjectInput!) {\n  unshareProject(input: $input) {\n    projectId\n  }\n}": typeof types.GetSharedProjectDocument,
    "subscription OnJobStatusChange($jobId: ID!) {\n  jobStatus(jobId: $jobId)\n}\n\nsubscription RealTimeLogs($jobId: ID!) {\n  logs(jobId: $jobId) {\n    jobId\n    nodeId\n    timestamp\n    logLevel\n    message\n  }\n}\n\nsubscription OnEdgeStatusChange($jobId: ID!, $edgeId: String!) {\n  edgeStatus(jobId: $jobId, edgeId: $edgeId)\n}": typeof types.OnJobStatusChangeDocument,
    "mutation CreateTrigger($input: CreateTriggerInput!) {\n  createTrigger(input: $input) {\n    ...Trigger\n  }\n}\n\nmutation UpdateTrigger($input: UpdateTriggerInput!) {\n  updateTrigger(input: $input) {\n    ...Trigger\n  }\n}\n\nmutation DeleteTrigger($triggerId: ID!) {\n  deleteTrigger(triggerId: $triggerId)\n}\n\nquery GetTriggers($workspaceId: ID!, $pagination: PageBasedPagination!) {\n  triggers(workspaceId: $workspaceId, pagination: $pagination) {\n    totalCount\n    nodes {\n      ...Trigger\n    }\n    pageInfo {\n      totalCount\n      currentPage\n      totalPages\n    }\n  }\n}": typeof types.CreateTriggerDocument,
    "query GetMe {\n  me {\n    id\n    name\n    email\n    myWorkspaceId\n    lang\n  }\n}\n\nquery SearchUser($email: String!) {\n  searchUser(nameOrEmail: $email) {\n    id\n    name\n    email\n  }\n}\n\nmutation UpdateMe($input: UpdateMeInput!) {\n  updateMe(input: $input) {\n    me {\n      id\n      name\n      email\n      lang\n    }\n  }\n}": typeof types.GetMeDocument,
    "fragment Workspace on Workspace {\n  id\n  name\n  personal\n  members {\n    userId\n    role\n    user {\n      id\n      email\n      name\n    }\n  }\n}\n\nmutation CreateWorkspace($input: CreateWorkspaceInput!) {\n  createWorkspace(input: $input) {\n    workspace {\n      ...Workspace\n    }\n  }\n}\n\nquery GetWorkspaces {\n  me {\n    id\n    workspaces {\n      ...Workspace\n    }\n  }\n}\n\nquery GetWorkspaceById($workspaceId: ID!) {\n  node(id: $workspaceId, type: WORKSPACE) {\n    __typename\n    ...Workspace\n  }\n}\n\nmutation UpdateWorkspace($input: UpdateWorkspaceInput!) {\n  updateWorkspace(input: $input) {\n    workspace {\n      ...Workspace\n    }\n  }\n}\n\nmutation DeleteWorkspace($input: DeleteWorkspaceInput!) {\n  deleteWorkspace(input: $input) {\n    workspaceId\n  }\n}\n\nmutation AddMemberToWorkspace($input: AddMemberToWorkspaceInput!) {\n  addMemberToWorkspace(input: $input) {\n    workspace {\n      ...Workspace\n    }\n  }\n}\n\nmutation RemoveMemberFromWorkspace($input: RemoveMemberFromWorkspaceInput!) {\n  removeMemberFromWorkspace(input: $input) {\n    workspace {\n      ...Workspace\n    }\n  }\n}\n\nmutation UpdateMemberOfWorkspace($input: UpdateMemberOfWorkspaceInput!) {\n  updateMemberOfWorkspace(input: $input) {\n    workspace {\n      ...Workspace\n    }\n  }\n}": typeof types.WorkspaceFragmentDoc,
};
const documents: Documents = {
    "mutation CreateDeployment($input: CreateDeploymentInput!) {\n  createDeployment(input: $input) {\n    deployment {\n      ...Deployment\n    }\n  }\n}\n\nmutation UpdateDeployment($input: UpdateDeploymentInput!) {\n  updateDeployment(input: $input) {\n    deployment {\n      ...Deployment\n    }\n  }\n}\n\nmutation DeleteDeployment($input: DeleteDeploymentInput!) {\n  deleteDeployment(input: $input) {\n    deploymentId\n  }\n}\n\nmutation ExecuteDeployment($input: ExecuteDeploymentInput!) {\n  executeDeployment(input: $input) {\n    job {\n      ...Job\n    }\n  }\n}\n\nquery GetDeployments($workspaceId: ID!, $pagination: PageBasedPagination!) {\n  deployments(workspaceId: $workspaceId, pagination: $pagination) {\n    totalCount\n    nodes {\n      ...Deployment\n    }\n    pageInfo {\n      totalCount\n      currentPage\n      totalPages\n    }\n  }\n}\n\nquery GetDeploymentHead($input: GetHeadInput!) {\n  deploymentHead(input: $input) {\n    ...Deployment\n  }\n}": types.CreateDeploymentDocument,
    "query GetLatestProjectSnapshot($projectId: ID!) {\n  latestProjectSnapshot(projectId: $projectId) {\n    id\n    timestamp\n    updates\n    version\n  }\n}\n\nquery GetProjectHistory($projectId: ID!) {\n  projectHistory(projectId: $projectId) {\n    timestamp\n    updates\n    version\n  }\n}\n\nmutation RollbackProject($projectId: ID!, $version: Int!) {\n  rollbackProject(projectId: $projectId, version: $version) {\n    id\n    timestamp\n    updates\n    version\n  }\n}": types.GetLatestProjectSnapshotDocument,
    "fragment Project on Project {\n  id\n  name\n  description\n  createdAt\n  updatedAt\n  workspaceId\n  sharedToken\n  deployment {\n    ...Deployment\n  }\n}\n\nfragment Deployment on Deployment {\n  id\n  projectId\n  workspaceId\n  workflowUrl\n  description\n  version\n  createdAt\n  updatedAt\n  project {\n    name\n  }\n}\n\nfragment Trigger on Trigger {\n  id\n  createdAt\n  updatedAt\n  lastTriggered\n  workspaceId\n  deploymentId\n  deployment {\n    ...Deployment\n  }\n  eventSource\n  authToken\n  timeInterval\n  description\n}\n\nfragment EdgeExecution on EdgeExecution {\n  id\n  edgeId\n  jobId\n  status\n  createdAt\n  startedAt\n  completedAt\n  featureId\n  intermediateDataUrl\n}\n\nfragment Job on Job {\n  id\n  workspaceId\n  status\n  startedAt\n  completedAt\n  logsURL\n  outputURLs\n  debug\n  deployment {\n    id\n    description\n  }\n}\n\nfragment ProjectDocument on ProjectDocument {\n  id\n  timestamp\n  updates\n  version\n}\n\nfragment ProjectSnapshot on ProjectSnapshot {\n  timestamp\n  updates\n  version\n}\n\nfragment Log on Log {\n  jobId\n  nodeId\n  timestamp\n  logLevel\n  message\n}\n\nfragment ProjectDocument on ProjectDocument {\n  id\n  timestamp\n  updates\n  version\n}\n\nfragment ProjectSnapshot on ProjectSnapshot {\n  timestamp\n  updates\n  version\n}": types.ProjectFragmentDoc,
    "query GetJobs($workspaceId: ID!, $pagination: PageBasedPagination!) {\n  jobs(workspaceId: $workspaceId, pagination: $pagination) {\n    totalCount\n    nodes {\n      ...Job\n    }\n    pageInfo {\n      totalCount\n      currentPage\n      totalPages\n    }\n  }\n}\n\nquery GetJob($id: ID!) {\n  job(id: $id) {\n    ...Job\n  }\n}\n\nquery GetEdgeExecution($jobId: ID!, $edgeId: String!) {\n  edgeExecution(jobId: $jobId, edgeId: $edgeId) {\n    ...EdgeExecution\n  }\n}\n\nmutation CancelJob($input: CancelJobInput!) {\n  cancelJob(input: $input) {\n    job {\n      ...Job\n    }\n  }\n}": types.GetJobsDocument,
    "mutation CreateProject($input: CreateProjectInput!) {\n  createProject(input: $input) {\n    project {\n      ...Project\n    }\n  }\n}\n\nquery GetProjects($workspaceId: ID!, $pagination: PageBasedPagination!) {\n  projects(workspaceId: $workspaceId, pagination: $pagination) {\n    totalCount\n    nodes {\n      ...Project\n    }\n    pageInfo {\n      totalCount\n      currentPage\n      totalPages\n    }\n  }\n}\n\nquery GetProjectById($projectId: ID!) {\n  node(id: $projectId, type: PROJECT) {\n    __typename\n    ...Project\n  }\n}\n\nmutation UpdateProject($input: UpdateProjectInput!) {\n  updateProject(input: $input) {\n    project {\n      ...Project\n    }\n  }\n}\n\nmutation DeleteProject($input: DeleteProjectInput!) {\n  deleteProject(input: $input) {\n    projectId\n  }\n}\n\nmutation RunProject($input: RunProjectInput!) {\n  runProject(input: $input) {\n    job {\n      ...Job\n    }\n  }\n}": types.CreateProjectDocument,
    "query GetSharedProject($token: String!) {\n  sharedProject(token: $token) {\n    project {\n      ...Project\n    }\n  }\n}\n\nquery GetSharedProjectInfo($projectId: ID!) {\n  projectSharingInfo(projectId: $projectId) {\n    projectId\n    sharingToken\n  }\n}\n\nmutation ShareProject($input: ShareProjectInput!) {\n  shareProject(input: $input) {\n    projectId\n    sharingUrl\n  }\n}\n\nmutation UnshareProject($input: UnshareProjectInput!) {\n  unshareProject(input: $input) {\n    projectId\n  }\n}": types.GetSharedProjectDocument,
    "subscription OnJobStatusChange($jobId: ID!) {\n  jobStatus(jobId: $jobId)\n}\n\nsubscription RealTimeLogs($jobId: ID!) {\n  logs(jobId: $jobId) {\n    jobId\n    nodeId\n    timestamp\n    logLevel\n    message\n  }\n}\n\nsubscription OnEdgeStatusChange($jobId: ID!, $edgeId: String!) {\n  edgeStatus(jobId: $jobId, edgeId: $edgeId)\n}": types.OnJobStatusChangeDocument,
    "mutation CreateTrigger($input: CreateTriggerInput!) {\n  createTrigger(input: $input) {\n    ...Trigger\n  }\n}\n\nmutation UpdateTrigger($input: UpdateTriggerInput!) {\n  updateTrigger(input: $input) {\n    ...Trigger\n  }\n}\n\nmutation DeleteTrigger($triggerId: ID!) {\n  deleteTrigger(triggerId: $triggerId)\n}\n\nquery GetTriggers($workspaceId: ID!, $pagination: PageBasedPagination!) {\n  triggers(workspaceId: $workspaceId, pagination: $pagination) {\n    totalCount\n    nodes {\n      ...Trigger\n    }\n    pageInfo {\n      totalCount\n      currentPage\n      totalPages\n    }\n  }\n}": types.CreateTriggerDocument,
    "query GetMe {\n  me {\n    id\n    name\n    email\n    myWorkspaceId\n    lang\n  }\n}\n\nquery SearchUser($email: String!) {\n  searchUser(nameOrEmail: $email) {\n    id\n    name\n    email\n  }\n}\n\nmutation UpdateMe($input: UpdateMeInput!) {\n  updateMe(input: $input) {\n    me {\n      id\n      name\n      email\n      lang\n    }\n  }\n}": types.GetMeDocument,
    "fragment Workspace on Workspace {\n  id\n  name\n  personal\n  members {\n    userId\n    role\n    user {\n      id\n      email\n      name\n    }\n  }\n}\n\nmutation CreateWorkspace($input: CreateWorkspaceInput!) {\n  createWorkspace(input: $input) {\n    workspace {\n      ...Workspace\n    }\n  }\n}\n\nquery GetWorkspaces {\n  me {\n    id\n    workspaces {\n      ...Workspace\n    }\n  }\n}\n\nquery GetWorkspaceById($workspaceId: ID!) {\n  node(id: $workspaceId, type: WORKSPACE) {\n    __typename\n    ...Workspace\n  }\n}\n\nmutation UpdateWorkspace($input: UpdateWorkspaceInput!) {\n  updateWorkspace(input: $input) {\n    workspace {\n      ...Workspace\n    }\n  }\n}\n\nmutation DeleteWorkspace($input: DeleteWorkspaceInput!) {\n  deleteWorkspace(input: $input) {\n    workspaceId\n  }\n}\n\nmutation AddMemberToWorkspace($input: AddMemberToWorkspaceInput!) {\n  addMemberToWorkspace(input: $input) {\n    workspace {\n      ...Workspace\n    }\n  }\n}\n\nmutation RemoveMemberFromWorkspace($input: RemoveMemberFromWorkspaceInput!) {\n  removeMemberFromWorkspace(input: $input) {\n    workspace {\n      ...Workspace\n    }\n  }\n}\n\nmutation UpdateMemberOfWorkspace($input: UpdateMemberOfWorkspaceInput!) {\n  updateMemberOfWorkspace(input: $input) {\n    workspace {\n      ...Workspace\n    }\n  }\n}": types.WorkspaceFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateDeployment($input: CreateDeploymentInput!) {\n  createDeployment(input: $input) {\n    deployment {\n      ...Deployment\n    }\n  }\n}\n\nmutation UpdateDeployment($input: UpdateDeploymentInput!) {\n  updateDeployment(input: $input) {\n    deployment {\n      ...Deployment\n    }\n  }\n}\n\nmutation DeleteDeployment($input: DeleteDeploymentInput!) {\n  deleteDeployment(input: $input) {\n    deploymentId\n  }\n}\n\nmutation ExecuteDeployment($input: ExecuteDeploymentInput!) {\n  executeDeployment(input: $input) {\n    job {\n      ...Job\n    }\n  }\n}\n\nquery GetDeployments($workspaceId: ID!, $pagination: PageBasedPagination!) {\n  deployments(workspaceId: $workspaceId, pagination: $pagination) {\n    totalCount\n    nodes {\n      ...Deployment\n    }\n    pageInfo {\n      totalCount\n      currentPage\n      totalPages\n    }\n  }\n}\n\nquery GetDeploymentHead($input: GetHeadInput!) {\n  deploymentHead(input: $input) {\n    ...Deployment\n  }\n}"): (typeof documents)["mutation CreateDeployment($input: CreateDeploymentInput!) {\n  createDeployment(input: $input) {\n    deployment {\n      ...Deployment\n    }\n  }\n}\n\nmutation UpdateDeployment($input: UpdateDeploymentInput!) {\n  updateDeployment(input: $input) {\n    deployment {\n      ...Deployment\n    }\n  }\n}\n\nmutation DeleteDeployment($input: DeleteDeploymentInput!) {\n  deleteDeployment(input: $input) {\n    deploymentId\n  }\n}\n\nmutation ExecuteDeployment($input: ExecuteDeploymentInput!) {\n  executeDeployment(input: $input) {\n    job {\n      ...Job\n    }\n  }\n}\n\nquery GetDeployments($workspaceId: ID!, $pagination: PageBasedPagination!) {\n  deployments(workspaceId: $workspaceId, pagination: $pagination) {\n    totalCount\n    nodes {\n      ...Deployment\n    }\n    pageInfo {\n      totalCount\n      currentPage\n      totalPages\n    }\n  }\n}\n\nquery GetDeploymentHead($input: GetHeadInput!) {\n  deploymentHead(input: $input) {\n    ...Deployment\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetLatestProjectSnapshot($projectId: ID!) {\n  latestProjectSnapshot(projectId: $projectId) {\n    id\n    timestamp\n    updates\n    version\n  }\n}\n\nquery GetProjectHistory($projectId: ID!) {\n  projectHistory(projectId: $projectId) {\n    timestamp\n    updates\n    version\n  }\n}\n\nmutation RollbackProject($projectId: ID!, $version: Int!) {\n  rollbackProject(projectId: $projectId, version: $version) {\n    id\n    timestamp\n    updates\n    version\n  }\n}"): (typeof documents)["query GetLatestProjectSnapshot($projectId: ID!) {\n  latestProjectSnapshot(projectId: $projectId) {\n    id\n    timestamp\n    updates\n    version\n  }\n}\n\nquery GetProjectHistory($projectId: ID!) {\n  projectHistory(projectId: $projectId) {\n    timestamp\n    updates\n    version\n  }\n}\n\nmutation RollbackProject($projectId: ID!, $version: Int!) {\n  rollbackProject(projectId: $projectId, version: $version) {\n    id\n    timestamp\n    updates\n    version\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Project on Project {\n  id\n  name\n  description\n  createdAt\n  updatedAt\n  workspaceId\n  sharedToken\n  deployment {\n    ...Deployment\n  }\n}\n\nfragment Deployment on Deployment {\n  id\n  projectId\n  workspaceId\n  workflowUrl\n  description\n  version\n  createdAt\n  updatedAt\n  project {\n    name\n  }\n}\n\nfragment Trigger on Trigger {\n  id\n  createdAt\n  updatedAt\n  lastTriggered\n  workspaceId\n  deploymentId\n  deployment {\n    ...Deployment\n  }\n  eventSource\n  authToken\n  timeInterval\n  description\n}\n\nfragment EdgeExecution on EdgeExecution {\n  id\n  edgeId\n  jobId\n  status\n  createdAt\n  startedAt\n  completedAt\n  featureId\n  intermediateDataUrl\n}\n\nfragment Job on Job {\n  id\n  workspaceId\n  status\n  startedAt\n  completedAt\n  logsURL\n  outputURLs\n  debug\n  deployment {\n    id\n    description\n  }\n}\n\nfragment ProjectDocument on ProjectDocument {\n  id\n  timestamp\n  updates\n  version\n}\n\nfragment ProjectSnapshot on ProjectSnapshot {\n  timestamp\n  updates\n  version\n}\n\nfragment Log on Log {\n  jobId\n  nodeId\n  timestamp\n  logLevel\n  message\n}\n\nfragment ProjectDocument on ProjectDocument {\n  id\n  timestamp\n  updates\n  version\n}\n\nfragment ProjectSnapshot on ProjectSnapshot {\n  timestamp\n  updates\n  version\n}"): (typeof documents)["fragment Project on Project {\n  id\n  name\n  description\n  createdAt\n  updatedAt\n  workspaceId\n  sharedToken\n  deployment {\n    ...Deployment\n  }\n}\n\nfragment Deployment on Deployment {\n  id\n  projectId\n  workspaceId\n  workflowUrl\n  description\n  version\n  createdAt\n  updatedAt\n  project {\n    name\n  }\n}\n\nfragment Trigger on Trigger {\n  id\n  createdAt\n  updatedAt\n  lastTriggered\n  workspaceId\n  deploymentId\n  deployment {\n    ...Deployment\n  }\n  eventSource\n  authToken\n  timeInterval\n  description\n}\n\nfragment EdgeExecution on EdgeExecution {\n  id\n  edgeId\n  jobId\n  status\n  createdAt\n  startedAt\n  completedAt\n  featureId\n  intermediateDataUrl\n}\n\nfragment Job on Job {\n  id\n  workspaceId\n  status\n  startedAt\n  completedAt\n  logsURL\n  outputURLs\n  debug\n  deployment {\n    id\n    description\n  }\n}\n\nfragment ProjectDocument on ProjectDocument {\n  id\n  timestamp\n  updates\n  version\n}\n\nfragment ProjectSnapshot on ProjectSnapshot {\n  timestamp\n  updates\n  version\n}\n\nfragment Log on Log {\n  jobId\n  nodeId\n  timestamp\n  logLevel\n  message\n}\n\nfragment ProjectDocument on ProjectDocument {\n  id\n  timestamp\n  updates\n  version\n}\n\nfragment ProjectSnapshot on ProjectSnapshot {\n  timestamp\n  updates\n  version\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetJobs($workspaceId: ID!, $pagination: PageBasedPagination!) {\n  jobs(workspaceId: $workspaceId, pagination: $pagination) {\n    totalCount\n    nodes {\n      ...Job\n    }\n    pageInfo {\n      totalCount\n      currentPage\n      totalPages\n    }\n  }\n}\n\nquery GetJob($id: ID!) {\n  job(id: $id) {\n    ...Job\n  }\n}\n\nquery GetEdgeExecution($jobId: ID!, $edgeId: String!) {\n  edgeExecution(jobId: $jobId, edgeId: $edgeId) {\n    ...EdgeExecution\n  }\n}\n\nmutation CancelJob($input: CancelJobInput!) {\n  cancelJob(input: $input) {\n    job {\n      ...Job\n    }\n  }\n}"): (typeof documents)["query GetJobs($workspaceId: ID!, $pagination: PageBasedPagination!) {\n  jobs(workspaceId: $workspaceId, pagination: $pagination) {\n    totalCount\n    nodes {\n      ...Job\n    }\n    pageInfo {\n      totalCount\n      currentPage\n      totalPages\n    }\n  }\n}\n\nquery GetJob($id: ID!) {\n  job(id: $id) {\n    ...Job\n  }\n}\n\nquery GetEdgeExecution($jobId: ID!, $edgeId: String!) {\n  edgeExecution(jobId: $jobId, edgeId: $edgeId) {\n    ...EdgeExecution\n  }\n}\n\nmutation CancelJob($input: CancelJobInput!) {\n  cancelJob(input: $input) {\n    job {\n      ...Job\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateProject($input: CreateProjectInput!) {\n  createProject(input: $input) {\n    project {\n      ...Project\n    }\n  }\n}\n\nquery GetProjects($workspaceId: ID!, $pagination: PageBasedPagination!) {\n  projects(workspaceId: $workspaceId, pagination: $pagination) {\n    totalCount\n    nodes {\n      ...Project\n    }\n    pageInfo {\n      totalCount\n      currentPage\n      totalPages\n    }\n  }\n}\n\nquery GetProjectById($projectId: ID!) {\n  node(id: $projectId, type: PROJECT) {\n    __typename\n    ...Project\n  }\n}\n\nmutation UpdateProject($input: UpdateProjectInput!) {\n  updateProject(input: $input) {\n    project {\n      ...Project\n    }\n  }\n}\n\nmutation DeleteProject($input: DeleteProjectInput!) {\n  deleteProject(input: $input) {\n    projectId\n  }\n}\n\nmutation RunProject($input: RunProjectInput!) {\n  runProject(input: $input) {\n    job {\n      ...Job\n    }\n  }\n}"): (typeof documents)["mutation CreateProject($input: CreateProjectInput!) {\n  createProject(input: $input) {\n    project {\n      ...Project\n    }\n  }\n}\n\nquery GetProjects($workspaceId: ID!, $pagination: PageBasedPagination!) {\n  projects(workspaceId: $workspaceId, pagination: $pagination) {\n    totalCount\n    nodes {\n      ...Project\n    }\n    pageInfo {\n      totalCount\n      currentPage\n      totalPages\n    }\n  }\n}\n\nquery GetProjectById($projectId: ID!) {\n  node(id: $projectId, type: PROJECT) {\n    __typename\n    ...Project\n  }\n}\n\nmutation UpdateProject($input: UpdateProjectInput!) {\n  updateProject(input: $input) {\n    project {\n      ...Project\n    }\n  }\n}\n\nmutation DeleteProject($input: DeleteProjectInput!) {\n  deleteProject(input: $input) {\n    projectId\n  }\n}\n\nmutation RunProject($input: RunProjectInput!) {\n  runProject(input: $input) {\n    job {\n      ...Job\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetSharedProject($token: String!) {\n  sharedProject(token: $token) {\n    project {\n      ...Project\n    }\n  }\n}\n\nquery GetSharedProjectInfo($projectId: ID!) {\n  projectSharingInfo(projectId: $projectId) {\n    projectId\n    sharingToken\n  }\n}\n\nmutation ShareProject($input: ShareProjectInput!) {\n  shareProject(input: $input) {\n    projectId\n    sharingUrl\n  }\n}\n\nmutation UnshareProject($input: UnshareProjectInput!) {\n  unshareProject(input: $input) {\n    projectId\n  }\n}"): (typeof documents)["query GetSharedProject($token: String!) {\n  sharedProject(token: $token) {\n    project {\n      ...Project\n    }\n  }\n}\n\nquery GetSharedProjectInfo($projectId: ID!) {\n  projectSharingInfo(projectId: $projectId) {\n    projectId\n    sharingToken\n  }\n}\n\nmutation ShareProject($input: ShareProjectInput!) {\n  shareProject(input: $input) {\n    projectId\n    sharingUrl\n  }\n}\n\nmutation UnshareProject($input: UnshareProjectInput!) {\n  unshareProject(input: $input) {\n    projectId\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "subscription OnJobStatusChange($jobId: ID!) {\n  jobStatus(jobId: $jobId)\n}\n\nsubscription RealTimeLogs($jobId: ID!) {\n  logs(jobId: $jobId) {\n    jobId\n    nodeId\n    timestamp\n    logLevel\n    message\n  }\n}\n\nsubscription OnEdgeStatusChange($jobId: ID!, $edgeId: String!) {\n  edgeStatus(jobId: $jobId, edgeId: $edgeId)\n}"): (typeof documents)["subscription OnJobStatusChange($jobId: ID!) {\n  jobStatus(jobId: $jobId)\n}\n\nsubscription RealTimeLogs($jobId: ID!) {\n  logs(jobId: $jobId) {\n    jobId\n    nodeId\n    timestamp\n    logLevel\n    message\n  }\n}\n\nsubscription OnEdgeStatusChange($jobId: ID!, $edgeId: String!) {\n  edgeStatus(jobId: $jobId, edgeId: $edgeId)\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateTrigger($input: CreateTriggerInput!) {\n  createTrigger(input: $input) {\n    ...Trigger\n  }\n}\n\nmutation UpdateTrigger($input: UpdateTriggerInput!) {\n  updateTrigger(input: $input) {\n    ...Trigger\n  }\n}\n\nmutation DeleteTrigger($triggerId: ID!) {\n  deleteTrigger(triggerId: $triggerId)\n}\n\nquery GetTriggers($workspaceId: ID!, $pagination: PageBasedPagination!) {\n  triggers(workspaceId: $workspaceId, pagination: $pagination) {\n    totalCount\n    nodes {\n      ...Trigger\n    }\n    pageInfo {\n      totalCount\n      currentPage\n      totalPages\n    }\n  }\n}"): (typeof documents)["mutation CreateTrigger($input: CreateTriggerInput!) {\n  createTrigger(input: $input) {\n    ...Trigger\n  }\n}\n\nmutation UpdateTrigger($input: UpdateTriggerInput!) {\n  updateTrigger(input: $input) {\n    ...Trigger\n  }\n}\n\nmutation DeleteTrigger($triggerId: ID!) {\n  deleteTrigger(triggerId: $triggerId)\n}\n\nquery GetTriggers($workspaceId: ID!, $pagination: PageBasedPagination!) {\n  triggers(workspaceId: $workspaceId, pagination: $pagination) {\n    totalCount\n    nodes {\n      ...Trigger\n    }\n    pageInfo {\n      totalCount\n      currentPage\n      totalPages\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetMe {\n  me {\n    id\n    name\n    email\n    myWorkspaceId\n    lang\n  }\n}\n\nquery SearchUser($email: String!) {\n  searchUser(nameOrEmail: $email) {\n    id\n    name\n    email\n  }\n}\n\nmutation UpdateMe($input: UpdateMeInput!) {\n  updateMe(input: $input) {\n    me {\n      id\n      name\n      email\n      lang\n    }\n  }\n}"): (typeof documents)["query GetMe {\n  me {\n    id\n    name\n    email\n    myWorkspaceId\n    lang\n  }\n}\n\nquery SearchUser($email: String!) {\n  searchUser(nameOrEmail: $email) {\n    id\n    name\n    email\n  }\n}\n\nmutation UpdateMe($input: UpdateMeInput!) {\n  updateMe(input: $input) {\n    me {\n      id\n      name\n      email\n      lang\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Workspace on Workspace {\n  id\n  name\n  personal\n  members {\n    userId\n    role\n    user {\n      id\n      email\n      name\n    }\n  }\n}\n\nmutation CreateWorkspace($input: CreateWorkspaceInput!) {\n  createWorkspace(input: $input) {\n    workspace {\n      ...Workspace\n    }\n  }\n}\n\nquery GetWorkspaces {\n  me {\n    id\n    workspaces {\n      ...Workspace\n    }\n  }\n}\n\nquery GetWorkspaceById($workspaceId: ID!) {\n  node(id: $workspaceId, type: WORKSPACE) {\n    __typename\n    ...Workspace\n  }\n}\n\nmutation UpdateWorkspace($input: UpdateWorkspaceInput!) {\n  updateWorkspace(input: $input) {\n    workspace {\n      ...Workspace\n    }\n  }\n}\n\nmutation DeleteWorkspace($input: DeleteWorkspaceInput!) {\n  deleteWorkspace(input: $input) {\n    workspaceId\n  }\n}\n\nmutation AddMemberToWorkspace($input: AddMemberToWorkspaceInput!) {\n  addMemberToWorkspace(input: $input) {\n    workspace {\n      ...Workspace\n    }\n  }\n}\n\nmutation RemoveMemberFromWorkspace($input: RemoveMemberFromWorkspaceInput!) {\n  removeMemberFromWorkspace(input: $input) {\n    workspace {\n      ...Workspace\n    }\n  }\n}\n\nmutation UpdateMemberOfWorkspace($input: UpdateMemberOfWorkspaceInput!) {\n  updateMemberOfWorkspace(input: $input) {\n    workspace {\n      ...Workspace\n    }\n  }\n}"): (typeof documents)["fragment Workspace on Workspace {\n  id\n  name\n  personal\n  members {\n    userId\n    role\n    user {\n      id\n      email\n      name\n    }\n  }\n}\n\nmutation CreateWorkspace($input: CreateWorkspaceInput!) {\n  createWorkspace(input: $input) {\n    workspace {\n      ...Workspace\n    }\n  }\n}\n\nquery GetWorkspaces {\n  me {\n    id\n    workspaces {\n      ...Workspace\n    }\n  }\n}\n\nquery GetWorkspaceById($workspaceId: ID!) {\n  node(id: $workspaceId, type: WORKSPACE) {\n    __typename\n    ...Workspace\n  }\n}\n\nmutation UpdateWorkspace($input: UpdateWorkspaceInput!) {\n  updateWorkspace(input: $input) {\n    workspace {\n      ...Workspace\n    }\n  }\n}\n\nmutation DeleteWorkspace($input: DeleteWorkspaceInput!) {\n  deleteWorkspace(input: $input) {\n    workspaceId\n  }\n}\n\nmutation AddMemberToWorkspace($input: AddMemberToWorkspaceInput!) {\n  addMemberToWorkspace(input: $input) {\n    workspace {\n      ...Workspace\n    }\n  }\n}\n\nmutation RemoveMemberFromWorkspace($input: RemoveMemberFromWorkspaceInput!) {\n  removeMemberFromWorkspace(input: $input) {\n    workspace {\n      ...Workspace\n    }\n  }\n}\n\nmutation UpdateMemberOfWorkspace($input: UpdateMemberOfWorkspaceInput!) {\n  updateMemberOfWorkspace(input: $input) {\n    workspace {\n      ...Workspace\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;