/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const WorkspaceLazyImport = createFileRoute('/workspace')()
const IndexLazyImport = createFileRoute('/')()
const WorkspaceWorkspaceIdLazyImport = createFileRoute(
  '/workspace/$workspaceId',
)()
const WorkspaceWorkspaceIdSettingsTabLazyImport = createFileRoute(
  '/workspace/$workspaceId/settings/$tab',
)()
const WorkspaceWorkspaceIdRunsTabLazyImport = createFileRoute(
  '/workspace/$workspaceId/runs/$tab',
)()
const WorkspaceWorkspaceIdProjectProjectIdLazyImport = createFileRoute(
  '/workspace/$workspaceId/project/$projectId',
)()

// Create/Update Routes

const WorkspaceLazyRoute = WorkspaceLazyImport.update({
  path: '/workspace',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/workspace.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const WorkspaceWorkspaceIdLazyRoute = WorkspaceWorkspaceIdLazyImport.update({
  path: '/workspace/$workspaceId',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/workspace_.$workspaceId.lazy').then((d) => d.Route),
)

const WorkspaceWorkspaceIdSettingsTabLazyRoute =
  WorkspaceWorkspaceIdSettingsTabLazyImport.update({
    path: '/workspace/$workspaceId/settings/$tab',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/workspace_.$workspaceId_.settings.$tab.lazy').then(
      (d) => d.Route,
    ),
  )

const WorkspaceWorkspaceIdRunsTabLazyRoute =
  WorkspaceWorkspaceIdRunsTabLazyImport.update({
    path: '/workspace/$workspaceId/runs/$tab',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/workspace_.$workspaceId_.runs.$tab.lazy').then(
      (d) => d.Route,
    ),
  )

const WorkspaceWorkspaceIdProjectProjectIdLazyRoute =
  WorkspaceWorkspaceIdProjectProjectIdLazyImport.update({
    path: '/workspace/$workspaceId/project/$projectId',
    getParentRoute: () => rootRoute,
  } as any).lazy(() =>
    import('./routes/workspace_.$workspaceId_.project.$projectId.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/workspace': {
      id: '/workspace'
      path: '/workspace'
      fullPath: '/workspace'
      preLoaderRoute: typeof WorkspaceLazyImport
      parentRoute: typeof rootRoute
    }
    '/workspace/$workspaceId': {
      id: '/workspace/$workspaceId'
      path: '/workspace/$workspaceId'
      fullPath: '/workspace/$workspaceId'
      preLoaderRoute: typeof WorkspaceWorkspaceIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/workspace/$workspaceId/project/$projectId': {
      id: '/workspace/$workspaceId/project/$projectId'
      path: '/workspace/$workspaceId/project/$projectId'
      fullPath: '/workspace/$workspaceId/project/$projectId'
      preLoaderRoute: typeof WorkspaceWorkspaceIdProjectProjectIdLazyImport
      parentRoute: typeof rootRoute
    }
    '/workspace/$workspaceId/runs/$tab': {
      id: '/workspace/$workspaceId/runs/$tab'
      path: '/workspace/$workspaceId/runs/$tab'
      fullPath: '/workspace/$workspaceId/runs/$tab'
      preLoaderRoute: typeof WorkspaceWorkspaceIdRunsTabLazyImport
      parentRoute: typeof rootRoute
    }
    '/workspace/$workspaceId/settings/$tab': {
      id: '/workspace/$workspaceId/settings/$tab'
      path: '/workspace/$workspaceId/settings/$tab'
      fullPath: '/workspace/$workspaceId/settings/$tab'
      preLoaderRoute: typeof WorkspaceWorkspaceIdSettingsTabLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  WorkspaceLazyRoute,
  WorkspaceWorkspaceIdLazyRoute,
  WorkspaceWorkspaceIdProjectProjectIdLazyRoute,
  WorkspaceWorkspaceIdRunsTabLazyRoute,
  WorkspaceWorkspaceIdSettingsTabLazyRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/workspace",
        "/workspace/$workspaceId",
        "/workspace/$workspaceId/project/$projectId",
        "/workspace/$workspaceId/runs/$tab",
        "/workspace/$workspaceId/settings/$tab"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/workspace": {
      "filePath": "workspace.lazy.tsx"
    },
    "/workspace/$workspaceId": {
      "filePath": "workspace_.$workspaceId.lazy.tsx"
    },
    "/workspace/$workspaceId/project/$projectId": {
      "filePath": "workspace_.$workspaceId_.project.$projectId.lazy.tsx"
    },
    "/workspace/$workspaceId/runs/$tab": {
      "filePath": "workspace_.$workspaceId_.runs.$tab.lazy.tsx"
    },
    "/workspace/$workspaceId/settings/$tab": {
      "filePath": "workspace_.$workspaceId_.settings.$tab.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
