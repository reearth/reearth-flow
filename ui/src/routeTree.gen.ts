/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WorkspacesImport } from './routes/workspaces'
import { Route as IndexImport } from './routes/index'
import { Route as WorkspacesWorkspaceIdImport } from './routes/workspaces.$workspaceId'
import { Route as WorkspacesWorkspaceIdTriggersImport } from './routes/workspaces.$workspaceId.triggers'
import { Route as WorkspacesWorkspaceIdProjectsImport } from './routes/workspaces.$workspaceId.projects'
import { Route as WorkspacesWorkspaceIdJobsImport } from './routes/workspaces.$workspaceId.jobs'
import { Route as WorkspacesWorkspaceIdDeploymentsImport } from './routes/workspaces.$workspaceId.deployments'
import { Route as WorkspacesWorkspaceIdTriggersTriggerIdImport } from './routes/workspaces.$workspaceId.triggers_.$triggerId'
import { Route as WorkspacesWorkspaceIdSettingsTabImport } from './routes/workspaces.$workspaceId.settings.$tab'
import { Route as WorkspacesWorkspaceIdJobsJobIdImport } from './routes/workspaces.$workspaceId.jobs_.$jobId'
import { Route as WorkspacesWorkspaceIdDeploymentsDeploymentIdImport } from './routes/workspaces.$workspaceId.deployments_.$deploymentId'

// Create Virtual Routes

const SharedSharedTokenLazyImport = createFileRoute('/shared/$sharedToken')()
const WorkspacesWorkspaceIdProjectsProjectIdLazyImport = createFileRoute(
  '/workspaces/$workspaceId_/projects_/$projectId',
)()

// Create/Update Routes

const WorkspacesRoute = WorkspacesImport.update({
  id: '/workspaces',
  path: '/workspaces',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SharedSharedTokenLazyRoute = SharedSharedTokenLazyImport.update({
  id: '/shared/$sharedToken',
  path: '/shared/$sharedToken',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/shared.$sharedToken.lazy').then((d) => d.Route),
)

const WorkspacesWorkspaceIdRoute = WorkspacesWorkspaceIdImport.update({
  id: '/$workspaceId',
  path: '/$workspaceId',
  getParentRoute: () => WorkspacesRoute,
} as any)

const WorkspacesWorkspaceIdTriggersRoute =
  WorkspacesWorkspaceIdTriggersImport.update({
    id: '/triggers',
    path: '/triggers',
    getParentRoute: () => WorkspacesWorkspaceIdRoute,
  } as any)

const WorkspacesWorkspaceIdProjectsRoute =
  WorkspacesWorkspaceIdProjectsImport.update({
    id: '/projects',
    path: '/projects',
    getParentRoute: () => WorkspacesWorkspaceIdRoute,
  } as any)

const WorkspacesWorkspaceIdJobsRoute = WorkspacesWorkspaceIdJobsImport.update({
  id: '/jobs',
  path: '/jobs',
  getParentRoute: () => WorkspacesWorkspaceIdRoute,
} as any)

const WorkspacesWorkspaceIdDeploymentsRoute =
  WorkspacesWorkspaceIdDeploymentsImport.update({
    id: '/deployments',
    path: '/deployments',
    getParentRoute: () => WorkspacesWorkspaceIdRoute,
  } as any)

const WorkspacesWorkspaceIdProjectsProjectIdLazyRoute =
  WorkspacesWorkspaceIdProjectsProjectIdLazyImport.update({
    id: '/$workspaceId_/projects_/$projectId',
    path: '/$workspaceId/projects/$projectId',
    getParentRoute: () => WorkspacesRoute,
  } as any).lazy(() =>
    import('./routes/workspaces.$workspaceId_.projects_.$projectId.lazy').then(
      (d) => d.Route,
    ),
  )

const WorkspacesWorkspaceIdTriggersTriggerIdRoute =
  WorkspacesWorkspaceIdTriggersTriggerIdImport.update({
    id: '/triggers_/$triggerId',
    path: '/triggers/$triggerId',
    getParentRoute: () => WorkspacesWorkspaceIdRoute,
  } as any)

const WorkspacesWorkspaceIdSettingsTabRoute =
  WorkspacesWorkspaceIdSettingsTabImport.update({
    id: '/settings/$tab',
    path: '/settings/$tab',
    getParentRoute: () => WorkspacesWorkspaceIdRoute,
  } as any)

const WorkspacesWorkspaceIdJobsJobIdRoute =
  WorkspacesWorkspaceIdJobsJobIdImport.update({
    id: '/jobs_/$jobId',
    path: '/jobs/$jobId',
    getParentRoute: () => WorkspacesWorkspaceIdRoute,
  } as any)

const WorkspacesWorkspaceIdDeploymentsDeploymentIdRoute =
  WorkspacesWorkspaceIdDeploymentsDeploymentIdImport.update({
    id: '/deployments_/$deploymentId',
    path: '/deployments/$deploymentId',
    getParentRoute: () => WorkspacesWorkspaceIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/workspaces': {
      id: '/workspaces'
      path: '/workspaces'
      fullPath: '/workspaces'
      preLoaderRoute: typeof WorkspacesImport
      parentRoute: typeof rootRoute
    }
    '/workspaces/$workspaceId': {
      id: '/workspaces/$workspaceId'
      path: '/$workspaceId'
      fullPath: '/workspaces/$workspaceId'
      preLoaderRoute: typeof WorkspacesWorkspaceIdImport
      parentRoute: typeof WorkspacesImport
    }
    '/shared/$sharedToken': {
      id: '/shared/$sharedToken'
      path: '/shared/$sharedToken'
      fullPath: '/shared/$sharedToken'
      preLoaderRoute: typeof SharedSharedTokenLazyImport
      parentRoute: typeof rootRoute
    }
    '/workspaces/$workspaceId/deployments': {
      id: '/workspaces/$workspaceId/deployments'
      path: '/deployments'
      fullPath: '/workspaces/$workspaceId/deployments'
      preLoaderRoute: typeof WorkspacesWorkspaceIdDeploymentsImport
      parentRoute: typeof WorkspacesWorkspaceIdImport
    }
    '/workspaces/$workspaceId/jobs': {
      id: '/workspaces/$workspaceId/jobs'
      path: '/jobs'
      fullPath: '/workspaces/$workspaceId/jobs'
      preLoaderRoute: typeof WorkspacesWorkspaceIdJobsImport
      parentRoute: typeof WorkspacesWorkspaceIdImport
    }
    '/workspaces/$workspaceId/projects': {
      id: '/workspaces/$workspaceId/projects'
      path: '/projects'
      fullPath: '/workspaces/$workspaceId/projects'
      preLoaderRoute: typeof WorkspacesWorkspaceIdProjectsImport
      parentRoute: typeof WorkspacesWorkspaceIdImport
    }
    '/workspaces/$workspaceId/triggers': {
      id: '/workspaces/$workspaceId/triggers'
      path: '/triggers'
      fullPath: '/workspaces/$workspaceId/triggers'
      preLoaderRoute: typeof WorkspacesWorkspaceIdTriggersImport
      parentRoute: typeof WorkspacesWorkspaceIdImport
    }
    '/workspaces/$workspaceId/deployments_/$deploymentId': {
      id: '/workspaces/$workspaceId/deployments_/$deploymentId'
      path: '/deployments/$deploymentId'
      fullPath: '/workspaces/$workspaceId/deployments/$deploymentId'
      preLoaderRoute: typeof WorkspacesWorkspaceIdDeploymentsDeploymentIdImport
      parentRoute: typeof WorkspacesWorkspaceIdImport
    }
    '/workspaces/$workspaceId/jobs_/$jobId': {
      id: '/workspaces/$workspaceId/jobs_/$jobId'
      path: '/jobs/$jobId'
      fullPath: '/workspaces/$workspaceId/jobs/$jobId'
      preLoaderRoute: typeof WorkspacesWorkspaceIdJobsJobIdImport
      parentRoute: typeof WorkspacesWorkspaceIdImport
    }
    '/workspaces/$workspaceId/settings/$tab': {
      id: '/workspaces/$workspaceId/settings/$tab'
      path: '/settings/$tab'
      fullPath: '/workspaces/$workspaceId/settings/$tab'
      preLoaderRoute: typeof WorkspacesWorkspaceIdSettingsTabImport
      parentRoute: typeof WorkspacesWorkspaceIdImport
    }
    '/workspaces/$workspaceId/triggers_/$triggerId': {
      id: '/workspaces/$workspaceId/triggers_/$triggerId'
      path: '/triggers/$triggerId'
      fullPath: '/workspaces/$workspaceId/triggers/$triggerId'
      preLoaderRoute: typeof WorkspacesWorkspaceIdTriggersTriggerIdImport
      parentRoute: typeof WorkspacesWorkspaceIdImport
    }
    '/workspaces/$workspaceId_/projects_/$projectId': {
      id: '/workspaces/$workspaceId_/projects_/$projectId'
      path: '/$workspaceId/projects/$projectId'
      fullPath: '/workspaces/$workspaceId/projects/$projectId'
      preLoaderRoute: typeof WorkspacesWorkspaceIdProjectsProjectIdLazyImport
      parentRoute: typeof WorkspacesImport
    }
  }
}

// Create and export the route tree

interface WorkspacesWorkspaceIdRouteChildren {
  WorkspacesWorkspaceIdDeploymentsRoute: typeof WorkspacesWorkspaceIdDeploymentsRoute
  WorkspacesWorkspaceIdJobsRoute: typeof WorkspacesWorkspaceIdJobsRoute
  WorkspacesWorkspaceIdProjectsRoute: typeof WorkspacesWorkspaceIdProjectsRoute
  WorkspacesWorkspaceIdTriggersRoute: typeof WorkspacesWorkspaceIdTriggersRoute
  WorkspacesWorkspaceIdDeploymentsDeploymentIdRoute: typeof WorkspacesWorkspaceIdDeploymentsDeploymentIdRoute
  WorkspacesWorkspaceIdJobsJobIdRoute: typeof WorkspacesWorkspaceIdJobsJobIdRoute
  WorkspacesWorkspaceIdSettingsTabRoute: typeof WorkspacesWorkspaceIdSettingsTabRoute
  WorkspacesWorkspaceIdTriggersTriggerIdRoute: typeof WorkspacesWorkspaceIdTriggersTriggerIdRoute
}

const WorkspacesWorkspaceIdRouteChildren: WorkspacesWorkspaceIdRouteChildren = {
  WorkspacesWorkspaceIdDeploymentsRoute: WorkspacesWorkspaceIdDeploymentsRoute,
  WorkspacesWorkspaceIdJobsRoute: WorkspacesWorkspaceIdJobsRoute,
  WorkspacesWorkspaceIdProjectsRoute: WorkspacesWorkspaceIdProjectsRoute,
  WorkspacesWorkspaceIdTriggersRoute: WorkspacesWorkspaceIdTriggersRoute,
  WorkspacesWorkspaceIdDeploymentsDeploymentIdRoute:
    WorkspacesWorkspaceIdDeploymentsDeploymentIdRoute,
  WorkspacesWorkspaceIdJobsJobIdRoute: WorkspacesWorkspaceIdJobsJobIdRoute,
  WorkspacesWorkspaceIdSettingsTabRoute: WorkspacesWorkspaceIdSettingsTabRoute,
  WorkspacesWorkspaceIdTriggersTriggerIdRoute:
    WorkspacesWorkspaceIdTriggersTriggerIdRoute,
}

const WorkspacesWorkspaceIdRouteWithChildren =
  WorkspacesWorkspaceIdRoute._addFileChildren(
    WorkspacesWorkspaceIdRouteChildren,
  )

interface WorkspacesRouteChildren {
  WorkspacesWorkspaceIdRoute: typeof WorkspacesWorkspaceIdRouteWithChildren
  WorkspacesWorkspaceIdProjectsProjectIdLazyRoute: typeof WorkspacesWorkspaceIdProjectsProjectIdLazyRoute
}

const WorkspacesRouteChildren: WorkspacesRouteChildren = {
  WorkspacesWorkspaceIdRoute: WorkspacesWorkspaceIdRouteWithChildren,
  WorkspacesWorkspaceIdProjectsProjectIdLazyRoute:
    WorkspacesWorkspaceIdProjectsProjectIdLazyRoute,
}

const WorkspacesRouteWithChildren = WorkspacesRoute._addFileChildren(
  WorkspacesRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/workspaces': typeof WorkspacesRouteWithChildren
  '/workspaces/$workspaceId': typeof WorkspacesWorkspaceIdRouteWithChildren
  '/shared/$sharedToken': typeof SharedSharedTokenLazyRoute
  '/workspaces/$workspaceId/deployments': typeof WorkspacesWorkspaceIdDeploymentsRoute
  '/workspaces/$workspaceId/jobs': typeof WorkspacesWorkspaceIdJobsRoute
  '/workspaces/$workspaceId/projects': typeof WorkspacesWorkspaceIdProjectsRoute
  '/workspaces/$workspaceId/triggers': typeof WorkspacesWorkspaceIdTriggersRoute
  '/workspaces/$workspaceId/deployments/$deploymentId': typeof WorkspacesWorkspaceIdDeploymentsDeploymentIdRoute
  '/workspaces/$workspaceId/jobs/$jobId': typeof WorkspacesWorkspaceIdJobsJobIdRoute
  '/workspaces/$workspaceId/settings/$tab': typeof WorkspacesWorkspaceIdSettingsTabRoute
  '/workspaces/$workspaceId/triggers/$triggerId': typeof WorkspacesWorkspaceIdTriggersTriggerIdRoute
  '/workspaces/$workspaceId/projects/$projectId': typeof WorkspacesWorkspaceIdProjectsProjectIdLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/workspaces': typeof WorkspacesRouteWithChildren
  '/workspaces/$workspaceId': typeof WorkspacesWorkspaceIdRouteWithChildren
  '/shared/$sharedToken': typeof SharedSharedTokenLazyRoute
  '/workspaces/$workspaceId/deployments': typeof WorkspacesWorkspaceIdDeploymentsRoute
  '/workspaces/$workspaceId/jobs': typeof WorkspacesWorkspaceIdJobsRoute
  '/workspaces/$workspaceId/projects': typeof WorkspacesWorkspaceIdProjectsRoute
  '/workspaces/$workspaceId/triggers': typeof WorkspacesWorkspaceIdTriggersRoute
  '/workspaces/$workspaceId/deployments/$deploymentId': typeof WorkspacesWorkspaceIdDeploymentsDeploymentIdRoute
  '/workspaces/$workspaceId/jobs/$jobId': typeof WorkspacesWorkspaceIdJobsJobIdRoute
  '/workspaces/$workspaceId/settings/$tab': typeof WorkspacesWorkspaceIdSettingsTabRoute
  '/workspaces/$workspaceId/triggers/$triggerId': typeof WorkspacesWorkspaceIdTriggersTriggerIdRoute
  '/workspaces/$workspaceId/projects/$projectId': typeof WorkspacesWorkspaceIdProjectsProjectIdLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/workspaces': typeof WorkspacesRouteWithChildren
  '/workspaces/$workspaceId': typeof WorkspacesWorkspaceIdRouteWithChildren
  '/shared/$sharedToken': typeof SharedSharedTokenLazyRoute
  '/workspaces/$workspaceId/deployments': typeof WorkspacesWorkspaceIdDeploymentsRoute
  '/workspaces/$workspaceId/jobs': typeof WorkspacesWorkspaceIdJobsRoute
  '/workspaces/$workspaceId/projects': typeof WorkspacesWorkspaceIdProjectsRoute
  '/workspaces/$workspaceId/triggers': typeof WorkspacesWorkspaceIdTriggersRoute
  '/workspaces/$workspaceId/deployments_/$deploymentId': typeof WorkspacesWorkspaceIdDeploymentsDeploymentIdRoute
  '/workspaces/$workspaceId/jobs_/$jobId': typeof WorkspacesWorkspaceIdJobsJobIdRoute
  '/workspaces/$workspaceId/settings/$tab': typeof WorkspacesWorkspaceIdSettingsTabRoute
  '/workspaces/$workspaceId/triggers_/$triggerId': typeof WorkspacesWorkspaceIdTriggersTriggerIdRoute
  '/workspaces/$workspaceId_/projects_/$projectId': typeof WorkspacesWorkspaceIdProjectsProjectIdLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/workspaces'
    | '/workspaces/$workspaceId'
    | '/shared/$sharedToken'
    | '/workspaces/$workspaceId/deployments'
    | '/workspaces/$workspaceId/jobs'
    | '/workspaces/$workspaceId/projects'
    | '/workspaces/$workspaceId/triggers'
    | '/workspaces/$workspaceId/deployments/$deploymentId'
    | '/workspaces/$workspaceId/jobs/$jobId'
    | '/workspaces/$workspaceId/settings/$tab'
    | '/workspaces/$workspaceId/triggers/$triggerId'
    | '/workspaces/$workspaceId/projects/$projectId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/workspaces'
    | '/workspaces/$workspaceId'
    | '/shared/$sharedToken'
    | '/workspaces/$workspaceId/deployments'
    | '/workspaces/$workspaceId/jobs'
    | '/workspaces/$workspaceId/projects'
    | '/workspaces/$workspaceId/triggers'
    | '/workspaces/$workspaceId/deployments/$deploymentId'
    | '/workspaces/$workspaceId/jobs/$jobId'
    | '/workspaces/$workspaceId/settings/$tab'
    | '/workspaces/$workspaceId/triggers/$triggerId'
    | '/workspaces/$workspaceId/projects/$projectId'
  id:
    | '__root__'
    | '/'
    | '/workspaces'
    | '/workspaces/$workspaceId'
    | '/shared/$sharedToken'
    | '/workspaces/$workspaceId/deployments'
    | '/workspaces/$workspaceId/jobs'
    | '/workspaces/$workspaceId/projects'
    | '/workspaces/$workspaceId/triggers'
    | '/workspaces/$workspaceId/deployments_/$deploymentId'
    | '/workspaces/$workspaceId/jobs_/$jobId'
    | '/workspaces/$workspaceId/settings/$tab'
    | '/workspaces/$workspaceId/triggers_/$triggerId'
    | '/workspaces/$workspaceId_/projects_/$projectId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  WorkspacesRoute: typeof WorkspacesRouteWithChildren
  SharedSharedTokenLazyRoute: typeof SharedSharedTokenLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  WorkspacesRoute: WorkspacesRouteWithChildren,
  SharedSharedTokenLazyRoute: SharedSharedTokenLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/workspaces",
        "/shared/$sharedToken"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/workspaces": {
      "filePath": "workspaces.tsx",
      "children": [
        "/workspaces/$workspaceId",
        "/workspaces/$workspaceId_/projects_/$projectId"
      ]
    },
    "/workspaces/$workspaceId": {
      "filePath": "workspaces.$workspaceId.tsx",
      "parent": "/workspaces",
      "children": [
        "/workspaces/$workspaceId/deployments",
        "/workspaces/$workspaceId/jobs",
        "/workspaces/$workspaceId/projects",
        "/workspaces/$workspaceId/triggers",
        "/workspaces/$workspaceId/deployments_/$deploymentId",
        "/workspaces/$workspaceId/jobs_/$jobId",
        "/workspaces/$workspaceId/settings/$tab",
        "/workspaces/$workspaceId/triggers_/$triggerId"
      ]
    },
    "/shared/$sharedToken": {
      "filePath": "shared.$sharedToken.lazy.tsx"
    },
    "/workspaces/$workspaceId/deployments": {
      "filePath": "workspaces.$workspaceId.deployments.tsx",
      "parent": "/workspaces/$workspaceId"
    },
    "/workspaces/$workspaceId/jobs": {
      "filePath": "workspaces.$workspaceId.jobs.tsx",
      "parent": "/workspaces/$workspaceId"
    },
    "/workspaces/$workspaceId/projects": {
      "filePath": "workspaces.$workspaceId.projects.tsx",
      "parent": "/workspaces/$workspaceId"
    },
    "/workspaces/$workspaceId/triggers": {
      "filePath": "workspaces.$workspaceId.triggers.tsx",
      "parent": "/workspaces/$workspaceId"
    },
    "/workspaces/$workspaceId/deployments_/$deploymentId": {
      "filePath": "workspaces.$workspaceId.deployments_.$deploymentId.tsx",
      "parent": "/workspaces/$workspaceId"
    },
    "/workspaces/$workspaceId/jobs_/$jobId": {
      "filePath": "workspaces.$workspaceId.jobs_.$jobId.tsx",
      "parent": "/workspaces/$workspaceId"
    },
    "/workspaces/$workspaceId/settings/$tab": {
      "filePath": "workspaces.$workspaceId.settings.$tab.tsx",
      "parent": "/workspaces/$workspaceId"
    },
    "/workspaces/$workspaceId/triggers_/$triggerId": {
      "filePath": "workspaces.$workspaceId.triggers_.$triggerId.tsx",
      "parent": "/workspaces/$workspaceId"
    },
    "/workspaces/$workspaceId_/projects_/$projectId": {
      "filePath": "workspaces.$workspaceId_.projects_.$projectId.lazy.tsx",
      "parent": "/workspaces"
    }
  }
}
ROUTE_MANIFEST_END */
