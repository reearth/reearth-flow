/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as WorkspacesRouteImport } from './routes/workspaces'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WorkspacesWorkspaceIdRouteImport } from './routes/workspaces.$workspaceId'
import { Route as WorkspacesWorkspaceIdTriggersRouteImport } from './routes/workspaces.$workspaceId.triggers'
import { Route as WorkspacesWorkspaceIdProjectsRouteImport } from './routes/workspaces.$workspaceId.projects'
import { Route as WorkspacesWorkspaceIdJobsRouteImport } from './routes/workspaces.$workspaceId.jobs'
import { Route as WorkspacesWorkspaceIdDeploymentsRouteImport } from './routes/workspaces.$workspaceId.deployments'
import { Route as WorkspacesWorkspaceIdTriggersTriggerIdRouteImport } from './routes/workspaces.$workspaceId.triggers_.$triggerId'
import { Route as WorkspacesWorkspaceIdSettingsTabRouteImport } from './routes/workspaces.$workspaceId.settings.$tab'
import { Route as WorkspacesWorkspaceIdJobsJobIdRouteImport } from './routes/workspaces.$workspaceId.jobs_.$jobId'
import { Route as WorkspacesWorkspaceIdDeploymentsDeploymentIdRouteImport } from './routes/workspaces.$workspaceId.deployments_.$deploymentId'

const SharedSharedTokenLazyRouteImport = createFileRoute(
  '/shared/$sharedToken',
)()
const WorkspacesWorkspaceIdProjectsProjectIdLazyRouteImport = createFileRoute(
  '/workspaces/$workspaceId_/projects_/$projectId',
)()

const WorkspacesRoute = WorkspacesRouteImport.update({
  id: '/workspaces',
  path: '/workspaces',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SharedSharedTokenLazyRoute = SharedSharedTokenLazyRouteImport.update({
  id: '/shared/$sharedToken',
  path: '/shared/$sharedToken',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() =>
  import('./routes/shared.$sharedToken.lazy').then((d) => d.Route),
)
const WorkspacesWorkspaceIdRoute = WorkspacesWorkspaceIdRouteImport.update({
  id: '/$workspaceId',
  path: '/$workspaceId',
  getParentRoute: () => WorkspacesRoute,
} as any)
const WorkspacesWorkspaceIdTriggersRoute =
  WorkspacesWorkspaceIdTriggersRouteImport.update({
    id: '/triggers',
    path: '/triggers',
    getParentRoute: () => WorkspacesWorkspaceIdRoute,
  } as any)
const WorkspacesWorkspaceIdProjectsRoute =
  WorkspacesWorkspaceIdProjectsRouteImport.update({
    id: '/projects',
    path: '/projects',
    getParentRoute: () => WorkspacesWorkspaceIdRoute,
  } as any)
const WorkspacesWorkspaceIdJobsRoute =
  WorkspacesWorkspaceIdJobsRouteImport.update({
    id: '/jobs',
    path: '/jobs',
    getParentRoute: () => WorkspacesWorkspaceIdRoute,
  } as any)
const WorkspacesWorkspaceIdDeploymentsRoute =
  WorkspacesWorkspaceIdDeploymentsRouteImport.update({
    id: '/deployments',
    path: '/deployments',
    getParentRoute: () => WorkspacesWorkspaceIdRoute,
  } as any)
const WorkspacesWorkspaceIdProjectsProjectIdLazyRoute =
  WorkspacesWorkspaceIdProjectsProjectIdLazyRouteImport.update({
    id: '/$workspaceId_/projects_/$projectId',
    path: '/$workspaceId/projects/$projectId',
    getParentRoute: () => WorkspacesRoute,
  } as any).lazy(() =>
    import('./routes/workspaces.$workspaceId_.projects_.$projectId.lazy').then(
      (d) => d.Route,
    ),
  )
const WorkspacesWorkspaceIdTriggersTriggerIdRoute =
  WorkspacesWorkspaceIdTriggersTriggerIdRouteImport.update({
    id: '/triggers_/$triggerId',
    path: '/triggers/$triggerId',
    getParentRoute: () => WorkspacesWorkspaceIdRoute,
  } as any)
const WorkspacesWorkspaceIdSettingsTabRoute =
  WorkspacesWorkspaceIdSettingsTabRouteImport.update({
    id: '/settings/$tab',
    path: '/settings/$tab',
    getParentRoute: () => WorkspacesWorkspaceIdRoute,
  } as any)
const WorkspacesWorkspaceIdJobsJobIdRoute =
  WorkspacesWorkspaceIdJobsJobIdRouteImport.update({
    id: '/jobs_/$jobId',
    path: '/jobs/$jobId',
    getParentRoute: () => WorkspacesWorkspaceIdRoute,
  } as any)
const WorkspacesWorkspaceIdDeploymentsDeploymentIdRoute =
  WorkspacesWorkspaceIdDeploymentsDeploymentIdRouteImport.update({
    id: '/deployments_/$deploymentId',
    path: '/deployments/$deploymentId',
    getParentRoute: () => WorkspacesWorkspaceIdRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/workspaces': typeof WorkspacesRouteWithChildren
  '/workspaces/$workspaceId': typeof WorkspacesWorkspaceIdRouteWithChildren
  '/shared/$sharedToken': typeof SharedSharedTokenLazyRoute
  '/workspaces/$workspaceId/deployments': typeof WorkspacesWorkspaceIdDeploymentsRoute
  '/workspaces/$workspaceId/jobs': typeof WorkspacesWorkspaceIdJobsRoute
  '/workspaces/$workspaceId/projects': typeof WorkspacesWorkspaceIdProjectsRoute
  '/workspaces/$workspaceId/triggers': typeof WorkspacesWorkspaceIdTriggersRoute
  '/workspaces/$workspaceId/deployments/$deploymentId': typeof WorkspacesWorkspaceIdDeploymentsDeploymentIdRoute
  '/workspaces/$workspaceId/jobs/$jobId': typeof WorkspacesWorkspaceIdJobsJobIdRoute
  '/workspaces/$workspaceId/settings/$tab': typeof WorkspacesWorkspaceIdSettingsTabRoute
  '/workspaces/$workspaceId/triggers/$triggerId': typeof WorkspacesWorkspaceIdTriggersTriggerIdRoute
  '/workspaces/$workspaceId/projects/$projectId': typeof WorkspacesWorkspaceIdProjectsProjectIdLazyRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/workspaces': typeof WorkspacesRouteWithChildren
  '/workspaces/$workspaceId': typeof WorkspacesWorkspaceIdRouteWithChildren
  '/shared/$sharedToken': typeof SharedSharedTokenLazyRoute
  '/workspaces/$workspaceId/deployments': typeof WorkspacesWorkspaceIdDeploymentsRoute
  '/workspaces/$workspaceId/jobs': typeof WorkspacesWorkspaceIdJobsRoute
  '/workspaces/$workspaceId/projects': typeof WorkspacesWorkspaceIdProjectsRoute
  '/workspaces/$workspaceId/triggers': typeof WorkspacesWorkspaceIdTriggersRoute
  '/workspaces/$workspaceId/deployments/$deploymentId': typeof WorkspacesWorkspaceIdDeploymentsDeploymentIdRoute
  '/workspaces/$workspaceId/jobs/$jobId': typeof WorkspacesWorkspaceIdJobsJobIdRoute
  '/workspaces/$workspaceId/settings/$tab': typeof WorkspacesWorkspaceIdSettingsTabRoute
  '/workspaces/$workspaceId/triggers/$triggerId': typeof WorkspacesWorkspaceIdTriggersTriggerIdRoute
  '/workspaces/$workspaceId/projects/$projectId': typeof WorkspacesWorkspaceIdProjectsProjectIdLazyRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/workspaces': typeof WorkspacesRouteWithChildren
  '/workspaces/$workspaceId': typeof WorkspacesWorkspaceIdRouteWithChildren
  '/shared/$sharedToken': typeof SharedSharedTokenLazyRoute
  '/workspaces/$workspaceId/deployments': typeof WorkspacesWorkspaceIdDeploymentsRoute
  '/workspaces/$workspaceId/jobs': typeof WorkspacesWorkspaceIdJobsRoute
  '/workspaces/$workspaceId/projects': typeof WorkspacesWorkspaceIdProjectsRoute
  '/workspaces/$workspaceId/triggers': typeof WorkspacesWorkspaceIdTriggersRoute
  '/workspaces/$workspaceId/deployments_/$deploymentId': typeof WorkspacesWorkspaceIdDeploymentsDeploymentIdRoute
  '/workspaces/$workspaceId/jobs_/$jobId': typeof WorkspacesWorkspaceIdJobsJobIdRoute
  '/workspaces/$workspaceId/settings/$tab': typeof WorkspacesWorkspaceIdSettingsTabRoute
  '/workspaces/$workspaceId/triggers_/$triggerId': typeof WorkspacesWorkspaceIdTriggersTriggerIdRoute
  '/workspaces/$workspaceId_/projects_/$projectId': typeof WorkspacesWorkspaceIdProjectsProjectIdLazyRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/workspaces'
    | '/workspaces/$workspaceId'
    | '/shared/$sharedToken'
    | '/workspaces/$workspaceId/deployments'
    | '/workspaces/$workspaceId/jobs'
    | '/workspaces/$workspaceId/projects'
    | '/workspaces/$workspaceId/triggers'
    | '/workspaces/$workspaceId/deployments/$deploymentId'
    | '/workspaces/$workspaceId/jobs/$jobId'
    | '/workspaces/$workspaceId/settings/$tab'
    | '/workspaces/$workspaceId/triggers/$triggerId'
    | '/workspaces/$workspaceId/projects/$projectId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/workspaces'
    | '/workspaces/$workspaceId'
    | '/shared/$sharedToken'
    | '/workspaces/$workspaceId/deployments'
    | '/workspaces/$workspaceId/jobs'
    | '/workspaces/$workspaceId/projects'
    | '/workspaces/$workspaceId/triggers'
    | '/workspaces/$workspaceId/deployments/$deploymentId'
    | '/workspaces/$workspaceId/jobs/$jobId'
    | '/workspaces/$workspaceId/settings/$tab'
    | '/workspaces/$workspaceId/triggers/$triggerId'
    | '/workspaces/$workspaceId/projects/$projectId'
  id:
    | '__root__'
    | '/'
    | '/workspaces'
    | '/workspaces/$workspaceId'
    | '/shared/$sharedToken'
    | '/workspaces/$workspaceId/deployments'
    | '/workspaces/$workspaceId/jobs'
    | '/workspaces/$workspaceId/projects'
    | '/workspaces/$workspaceId/triggers'
    | '/workspaces/$workspaceId/deployments_/$deploymentId'
    | '/workspaces/$workspaceId/jobs_/$jobId'
    | '/workspaces/$workspaceId/settings/$tab'
    | '/workspaces/$workspaceId/triggers_/$triggerId'
    | '/workspaces/$workspaceId_/projects_/$projectId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  WorkspacesRoute: typeof WorkspacesRouteWithChildren
  SharedSharedTokenLazyRoute: typeof SharedSharedTokenLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/workspaces': {
      id: '/workspaces'
      path: '/workspaces'
      fullPath: '/workspaces'
      preLoaderRoute: typeof WorkspacesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/shared/$sharedToken': {
      id: '/shared/$sharedToken'
      path: '/shared/$sharedToken'
      fullPath: '/shared/$sharedToken'
      preLoaderRoute: typeof SharedSharedTokenLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workspaces/$workspaceId': {
      id: '/workspaces/$workspaceId'
      path: '/$workspaceId'
      fullPath: '/workspaces/$workspaceId'
      preLoaderRoute: typeof WorkspacesWorkspaceIdRouteImport
      parentRoute: typeof WorkspacesRoute
    }
    '/workspaces/$workspaceId/triggers': {
      id: '/workspaces/$workspaceId/triggers'
      path: '/triggers'
      fullPath: '/workspaces/$workspaceId/triggers'
      preLoaderRoute: typeof WorkspacesWorkspaceIdTriggersRouteImport
      parentRoute: typeof WorkspacesWorkspaceIdRoute
    }
    '/workspaces/$workspaceId/projects': {
      id: '/workspaces/$workspaceId/projects'
      path: '/projects'
      fullPath: '/workspaces/$workspaceId/projects'
      preLoaderRoute: typeof WorkspacesWorkspaceIdProjectsRouteImport
      parentRoute: typeof WorkspacesWorkspaceIdRoute
    }
    '/workspaces/$workspaceId/jobs': {
      id: '/workspaces/$workspaceId/jobs'
      path: '/jobs'
      fullPath: '/workspaces/$workspaceId/jobs'
      preLoaderRoute: typeof WorkspacesWorkspaceIdJobsRouteImport
      parentRoute: typeof WorkspacesWorkspaceIdRoute
    }
    '/workspaces/$workspaceId/deployments': {
      id: '/workspaces/$workspaceId/deployments'
      path: '/deployments'
      fullPath: '/workspaces/$workspaceId/deployments'
      preLoaderRoute: typeof WorkspacesWorkspaceIdDeploymentsRouteImport
      parentRoute: typeof WorkspacesWorkspaceIdRoute
    }
    '/workspaces/$workspaceId_/projects_/$projectId': {
      id: '/workspaces/$workspaceId_/projects_/$projectId'
      path: '/$workspaceId/projects/$projectId'
      fullPath: '/workspaces/$workspaceId/projects/$projectId'
      preLoaderRoute: typeof WorkspacesWorkspaceIdProjectsProjectIdLazyRouteImport
      parentRoute: typeof WorkspacesRoute
    }
    '/workspaces/$workspaceId/triggers_/$triggerId': {
      id: '/workspaces/$workspaceId/triggers_/$triggerId'
      path: '/triggers/$triggerId'
      fullPath: '/workspaces/$workspaceId/triggers/$triggerId'
      preLoaderRoute: typeof WorkspacesWorkspaceIdTriggersTriggerIdRouteImport
      parentRoute: typeof WorkspacesWorkspaceIdRoute
    }
    '/workspaces/$workspaceId/settings/$tab': {
      id: '/workspaces/$workspaceId/settings/$tab'
      path: '/settings/$tab'
      fullPath: '/workspaces/$workspaceId/settings/$tab'
      preLoaderRoute: typeof WorkspacesWorkspaceIdSettingsTabRouteImport
      parentRoute: typeof WorkspacesWorkspaceIdRoute
    }
    '/workspaces/$workspaceId/jobs_/$jobId': {
      id: '/workspaces/$workspaceId/jobs_/$jobId'
      path: '/jobs/$jobId'
      fullPath: '/workspaces/$workspaceId/jobs/$jobId'
      preLoaderRoute: typeof WorkspacesWorkspaceIdJobsJobIdRouteImport
      parentRoute: typeof WorkspacesWorkspaceIdRoute
    }
    '/workspaces/$workspaceId/deployments_/$deploymentId': {
      id: '/workspaces/$workspaceId/deployments_/$deploymentId'
      path: '/deployments/$deploymentId'
      fullPath: '/workspaces/$workspaceId/deployments/$deploymentId'
      preLoaderRoute: typeof WorkspacesWorkspaceIdDeploymentsDeploymentIdRouteImport
      parentRoute: typeof WorkspacesWorkspaceIdRoute
    }
  }
}

interface WorkspacesWorkspaceIdRouteChildren {
  WorkspacesWorkspaceIdDeploymentsRoute: typeof WorkspacesWorkspaceIdDeploymentsRoute
  WorkspacesWorkspaceIdJobsRoute: typeof WorkspacesWorkspaceIdJobsRoute
  WorkspacesWorkspaceIdProjectsRoute: typeof WorkspacesWorkspaceIdProjectsRoute
  WorkspacesWorkspaceIdTriggersRoute: typeof WorkspacesWorkspaceIdTriggersRoute
  WorkspacesWorkspaceIdDeploymentsDeploymentIdRoute: typeof WorkspacesWorkspaceIdDeploymentsDeploymentIdRoute
  WorkspacesWorkspaceIdJobsJobIdRoute: typeof WorkspacesWorkspaceIdJobsJobIdRoute
  WorkspacesWorkspaceIdSettingsTabRoute: typeof WorkspacesWorkspaceIdSettingsTabRoute
  WorkspacesWorkspaceIdTriggersTriggerIdRoute: typeof WorkspacesWorkspaceIdTriggersTriggerIdRoute
}

const WorkspacesWorkspaceIdRouteChildren: WorkspacesWorkspaceIdRouteChildren = {
  WorkspacesWorkspaceIdDeploymentsRoute: WorkspacesWorkspaceIdDeploymentsRoute,
  WorkspacesWorkspaceIdJobsRoute: WorkspacesWorkspaceIdJobsRoute,
  WorkspacesWorkspaceIdProjectsRoute: WorkspacesWorkspaceIdProjectsRoute,
  WorkspacesWorkspaceIdTriggersRoute: WorkspacesWorkspaceIdTriggersRoute,
  WorkspacesWorkspaceIdDeploymentsDeploymentIdRoute:
    WorkspacesWorkspaceIdDeploymentsDeploymentIdRoute,
  WorkspacesWorkspaceIdJobsJobIdRoute: WorkspacesWorkspaceIdJobsJobIdRoute,
  WorkspacesWorkspaceIdSettingsTabRoute: WorkspacesWorkspaceIdSettingsTabRoute,
  WorkspacesWorkspaceIdTriggersTriggerIdRoute:
    WorkspacesWorkspaceIdTriggersTriggerIdRoute,
}

const WorkspacesWorkspaceIdRouteWithChildren =
  WorkspacesWorkspaceIdRoute._addFileChildren(
    WorkspacesWorkspaceIdRouteChildren,
  )

interface WorkspacesRouteChildren {
  WorkspacesWorkspaceIdRoute: typeof WorkspacesWorkspaceIdRouteWithChildren
  WorkspacesWorkspaceIdProjectsProjectIdLazyRoute: typeof WorkspacesWorkspaceIdProjectsProjectIdLazyRoute
}

const WorkspacesRouteChildren: WorkspacesRouteChildren = {
  WorkspacesWorkspaceIdRoute: WorkspacesWorkspaceIdRouteWithChildren,
  WorkspacesWorkspaceIdProjectsProjectIdLazyRoute:
    WorkspacesWorkspaceIdProjectsProjectIdLazyRoute,
}

const WorkspacesRouteWithChildren = WorkspacesRoute._addFileChildren(
  WorkspacesRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  WorkspacesRoute: WorkspacesRouteWithChildren,
  SharedSharedTokenLazyRoute: SharedSharedTokenLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
