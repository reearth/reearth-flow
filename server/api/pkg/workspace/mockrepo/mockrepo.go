// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go
//
// Generated by this command:
//
//	mockgen -source=repo.go -destination=mockrepo/mockrepo.go -package=mockrepo -mock_names=Repo=MockWorkspaceRepo
//

// Package mockrepo is a generated GoMock package.
package mockrepo

import (
	context "context"
	reflect "reflect"

	id "github.com/reearth/reearth-flow/api/pkg/id"
	workspace "github.com/reearth/reearth-flow/api/pkg/workspace"
	gomock "go.uber.org/mock/gomock"
)

// MockWorkspaceRepo is a mock of Repo interface.
type MockWorkspaceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockWorkspaceRepoMockRecorder
	isgomock struct{}
}

// MockWorkspaceRepoMockRecorder is the mock recorder for MockWorkspaceRepo.
type MockWorkspaceRepoMockRecorder struct {
	mock *MockWorkspaceRepo
}

// NewMockWorkspaceRepo creates a new mock instance.
func NewMockWorkspaceRepo(ctrl *gomock.Controller) *MockWorkspaceRepo {
	mock := &MockWorkspaceRepo{ctrl: ctrl}
	mock.recorder = &MockWorkspaceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkspaceRepo) EXPECT() *MockWorkspaceRepoMockRecorder {
	return m.recorder
}

// FindByIDs mocks base method.
func (m *MockWorkspaceRepo) FindByIDs(ctx context.Context, ids id.WorkspaceIDList) (workspace.WorkspaceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDs", ctx, ids)
	ret0, _ := ret[0].(workspace.WorkspaceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDs indicates an expected call of FindByIDs.
func (mr *MockWorkspaceRepoMockRecorder) FindByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDs", reflect.TypeOf((*MockWorkspaceRepo)(nil).FindByIDs), ctx, ids)
}
