// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go
//
// Generated by this command:
//
//	mockgen -source=repo.go -destination=mockrepo/mockrepo.go -package=mockrepo -mock_names=Repo=MockUserRepo
//

// Package mockrepo is a generated GoMock package.
package mockrepo

import (
	context "context"
	reflect "reflect"

	id "github.com/reearth/reearth-flow/api/pkg/id"
	user "github.com/reearth/reearth-flow/api/pkg/user"
	gomock "go.uber.org/mock/gomock"
)

// MockUserRepo is a mock of Repo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
	isgomock struct{}
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// DeleteMe mocks base method.
func (m *MockUserRepo) DeleteMe(ctx context.Context, uid id.UserID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMe", ctx, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMe indicates an expected call of DeleteMe.
func (mr *MockUserRepoMockRecorder) DeleteMe(ctx, uid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMe", reflect.TypeOf((*MockUserRepo)(nil).DeleteMe), ctx, uid)
}

// FindByIDs mocks base method.
func (m *MockUserRepo) FindByIDs(ctx context.Context, ids id.UserIDList) (user.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDs", ctx, ids)
	ret0, _ := ret[0].(user.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDs indicates an expected call of FindByIDs.
func (mr *MockUserRepoMockRecorder) FindByIDs(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDs", reflect.TypeOf((*MockUserRepo)(nil).FindByIDs), ctx, ids)
}

// FindMe mocks base method.
func (m *MockUserRepo) FindMe(ctx context.Context) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMe", ctx)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindMe indicates an expected call of FindMe.
func (mr *MockUserRepoMockRecorder) FindMe(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMe", reflect.TypeOf((*MockUserRepo)(nil).FindMe), ctx)
}

// RemoveMyAuth mocks base method.
func (m *MockUserRepo) RemoveMyAuth(ctx context.Context, authProvider string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMyAuth", ctx, authProvider)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveMyAuth indicates an expected call of RemoveMyAuth.
func (mr *MockUserRepoMockRecorder) RemoveMyAuth(ctx, authProvider any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMyAuth", reflect.TypeOf((*MockUserRepo)(nil).RemoveMyAuth), ctx, authProvider)
}

// SignupOIDC mocks base method.
func (m *MockUserRepo) SignupOIDC(ctx context.Context, attrs user.SignupOIDCAttrs) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignupOIDC", ctx, attrs)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignupOIDC indicates an expected call of SignupOIDC.
func (mr *MockUserRepoMockRecorder) SignupOIDC(ctx, attrs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignupOIDC", reflect.TypeOf((*MockUserRepo)(nil).SignupOIDC), ctx, attrs)
}

// UpdateMe mocks base method.
func (m *MockUserRepo) UpdateMe(ctx context.Context, attrs user.UpdateAttrs) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMe", ctx, attrs)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMe indicates an expected call of UpdateMe.
func (mr *MockUserRepoMockRecorder) UpdateMe(ctx, attrs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMe", reflect.TypeOf((*MockUserRepo)(nil).UpdateMe), ctx, attrs)
}

// UserByNameOrEmail mocks base method.
func (m *MockUserRepo) UserByNameOrEmail(ctx context.Context, nameOrEmail string) (*user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByNameOrEmail", ctx, nameOrEmail)
	ret0, _ := ret[0].(*user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByNameOrEmail indicates an expected call of UserByNameOrEmail.
func (mr *MockUserRepoMockRecorder) UserByNameOrEmail(ctx, nameOrEmail any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByNameOrEmail", reflect.TypeOf((*MockUserRepo)(nil).UserByNameOrEmail), ctx, nameOrEmail)
}
