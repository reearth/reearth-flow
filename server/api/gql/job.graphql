type Job implements Node {
  completedAt: DateTime
  deployment: Deployment
  deploymentId: ID!
  debug: Boolean
  id: ID!
  logsURL: String
  outputURLs: [String!]
  startedAt: DateTime!
  status: JobStatus!
  workspace: Workspace
  workspaceId: ID!
  logs(since: DateTime!): [Log]
  edgeExecutions: [EdgeExecution!]
}

type EdgeExecution {
  id: String!
  status: EdgeStatus!
  startedAt: DateTime
  completedAt: DateTime
  featureId: ID
  intermediateDataUrl: String
}

enum JobStatus {
  CANCELLED
  COMPLETED
  FAILED
  PENDING
  RUNNING
}

enum EdgeStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
}

# InputType
input CancelJobInput {
  jobId: ID!
}

# Payloads
type CancelJobPayload {
  job: Job
}

# Connection

type JobConnection {
  nodes: [Job]!
  pageInfo: PageInfo!
  totalCount: Int!
}

# Subscripton Types

extend type Subscription {
  edgeStatus(jobId: ID!, edgeId: String!): EdgeStatus!
  jobStatus(jobId: ID!): JobStatus!
}

# Query and Mutation

extend type Query {
  edgeExecution(id: ID!, edgeId: String!): EdgeExecution!
  jobs(workspaceId: ID!, pagination: PageBasedPagination!): JobConnection!
  job(id: ID!): Job
}

extend type Mutation {
  cancelJob(input: CancelJobInput!): CancelJobPayload!
}
