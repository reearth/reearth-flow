type Parameter {
  createdAt: DateTime!
  id: ID!
  index: Int!
  name: String!
  projectId: ID!
  required: Boolean!
  public: Boolean!
  type: ParameterType!
  updatedAt: DateTime!
  defaultValue: Any!
  config: Any
}

enum ParameterType {
  CHOICE
  COLOR
  DATETIME
  FILE_FOLDER
  MESSAGE
  NUMBER
  PASSWORD
  TEXT
  YES_NO
  ATTRIBUTE_NAME
  COORDINATE_SYSTEM
  DATABASE_CONNECTION
  GEOMETRY
  REPROJECTION_FILE
  WEB_CONNECTION
}

# InputType

input DeclareParameterInput {
  name: String!
  type: ParameterType!
  required: Boolean!
  public: Boolean!
  defaultValue: Any
  config: Any
  index: Int
}

input UpdateParameterInput {
  defaultValue: Any!
  name: String!
  required: Boolean!
  public: Boolean!
  type: ParameterType!
  config: Any
}

input UpdateParameterOrderInput {
  paramId: ID!
  newIndex: Int!
}

input RemoveParameterInput {
  paramId: ID!
}

input RemoveParametersInput {
  paramIds: [ID!]!
}

input ParameterBatchInput {
  projectId: ID!
  creates: [DeclareParameterInput!]
  updates: [ParameterUpdateItem!]
  deletes: [ID!]
  reorders: [UpdateParameterOrderInput!]
}

input ParameterUpdateItem {
  paramId: ID!
  name: String
  type: ParameterType
  required: Boolean
  public: Boolean
  defaultValue: Any
  config: Any
}

# Query and Mutation

extend type Query {
  parameters(projectId: ID!): [Parameter!]!
}

extend type Mutation {
  declareParameter(projectId: ID!, input: DeclareParameterInput!): Parameter!

  updateParameter(paramId: ID!, input: UpdateParameterInput!): Parameter!

  updateParameterOrder(
    projectId: ID!
    input: UpdateParameterOrderInput!
  ): [Parameter!]!

  removeParameter(input: RemoveParameterInput!): Boolean!

  removeParameters(input: RemoveParametersInput!): Boolean!

  updateParameters(input: ParameterBatchInput!): [Parameter!]!
}
