type User implements Node {
  email: String!
  host: String
  id: ID!
  name: String!
}

type Me {
  auths: [String!]!
  email: String!
  id: ID!
  lang: Lang!
  myWorkspace: Workspace
  myWorkspaceId: ID!
  name: String!
  workspaces: [Workspace!]!
}

# InputType

input SignupInput {
  userId: ID
  lang: Lang
  workspaceId: ID
  secret: String
}

input UpdateMeInput {
  name: String
  email: String
  password: String
  passwordConfirmation: String
  lang: Lang
}

input RemoveMyAuthInput {
  auth: String!
}

input DeleteMeInput {
  userId: ID!
}

# Payload

type UpdateMePayload {
  me: Me!
}

type SignupPayload {
  user: User!
  workspace: Workspace!
}

type DeleteMePayload {
  userId: ID!
}

# Query and Mutation

extend type Query {
  me: Me
  searchUser(nameOrEmail: String!): User
}

extend type Mutation {
  signup(input: SignupInput!): SignupPayload
  updateMe(input: UpdateMeInput!): UpdateMePayload
  removeMyAuth(input: RemoveMyAuthInput!): UpdateMePayload
  deleteMe(input: DeleteMeInput!): DeleteMePayload
}
