type Asset implements Node {
  id: ID!
  workspaceId: ID!
  createdAt: DateTime!
  fileName: String!
  size: FileSize!
  contentType: String!
  name: String!
  url: String!
  uuid: String!
  flatFiles: Boolean!
  public: Boolean!
  archiveExtractionStatus: ArchiveExtractionStatus
  Workspace: Workspace
}

enum AssetSortType {
  DATE
  SIZE
  NAME
}

enum ArchiveExtractionStatus {
  SKIPPED
  PENDING
  IN_PROGRESS
  DONE
  FAILED
}

# InputType

input CreateAssetInput {
  workspaceId: ID!
  file: Upload!
  name: String
}

input DeleteAssetInput {
  assetId: ID!
}

input UpdateAssetInput {
  assetId: ID!
  name: String
}

# Payload

type CreateAssetPayload {
  asset: Asset!
}

type DeleteAssetPayload {
  assetId: ID!
}

type UpdateAssetPayload {
  asset: Asset!
}

# Connection

type AssetConnection {
  nodes: [Asset]!
  pageInfo: PageInfo!
  totalCount: Int!
}

# Query and Mutation

extend type Query {
  assets(
    workspaceId: ID!
    keyword: String
    sort: AssetSortType
    pagination: PageBasedPagination!
  ): AssetConnection!
}

extend type Mutation {
  createAsset(input: CreateAssetInput!): CreateAssetPayload
  updateAsset(input: UpdateAssetInput!): UpdateAssetPayload
  deleteAsset(input: DeleteAssetInput!): DeleteAssetPayload
}
