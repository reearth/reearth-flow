type Project implements Node {
  basicAuthPassword: String!
  basicAuthUsername: String!
  createdAt: DateTime!
  description: String!
  deployment: Deployment
  id: ID!
  isArchived: Boolean!
  isBasicAuthActive: Boolean!
  name: String!
  parameters: [Parameter!]!
  updatedAt: DateTime!
  sharedToken: String
  version: Int!
  workspace: Workspace
  workspaceId: ID!
}

# InputType

input CreateProjectInput {
  workspaceId: ID!
  name: String
  description: String
  archived: Boolean
}

input UpdateProjectInput {
  projectId: ID!
  name: String
  description: String
  archived: Boolean
  isBasicAuthActive: Boolean
  basicAuthUsername: String
  basicAuthPassword: String
}

input DeleteProjectInput {
  projectId: ID!
}

input RunProjectInput {
  projectId: ID!
  workspaceId: ID!
  file: Upload!
}

# Payload

type ProjectPayload {
  project: Project!
}

type DeleteProjectPayload {
  projectId: ID!
}

type RunProjectPayload {
  job: Job!
}

# Connection

type ProjectConnection {
  nodes: [Project]!
  pageInfo: PageInfo!
  totalCount: Int!
}

# Query and Mutation

extend type Query {
  projects(
    workspaceId: ID!
    includeArchived: Boolean
    pagination: PageBasedPagination!
  ): ProjectConnection!
}

extend type Mutation {
  createProject(input: CreateProjectInput!): ProjectPayload
  updateProject(input: UpdateProjectInput!): ProjectPayload
  deleteProject(input: DeleteProjectInput!): DeleteProjectPayload
  runProject(input: RunProjectInput!): RunProjectPayload
}
