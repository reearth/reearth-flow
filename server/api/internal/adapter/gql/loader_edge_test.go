package gql

import (
	"context"
	"errors"
	"testing"
	"time"

	"github.com/reearth/reearth-flow/api/internal/adapter/gql/gqlmodel"
	"github.com/reearth/reearth-flow/api/pkg/edge"
	"github.com/reearth/reearth-flow/api/pkg/id"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

type MockEdgeExecutionUsecase struct {
	mock.Mock
}

// GetEdgeExecution implements interfaces.EdgeExecution. Automatically generated by mockery.
func (m *MockEdgeExecutionUsecase) GetEdgeExecution(ctx context.Context, jobID id.JobID, edgeID string) (*edge.EdgeExecution, error) {
	panic("unimplemented")
}

// GetEdgeExecutions implements interfaces.EdgeExecution. Automatically generated by mockery.
func (m *MockEdgeExecutionUsecase) GetEdgeExecutions(ctx context.Context, jobID id.JobID) ([]*edge.EdgeExecution, error) {
	panic("unimplemented")
}

// SubscribeToEdge implements interfaces.EdgeExecution. Automatically generated by mockery.
func (m *MockEdgeExecutionUsecase) SubscribeToEdge(ctx context.Context, jobID id.JobID, edgeID string) (chan *edge.EdgeExecution, error) {
	panic("unimplemented")
}

// UnsubscribeFromEdge implements interfaces.EdgeExecution. Automatically generated by mockery.
func (m *MockEdgeExecutionUsecase) UnsubscribeFromEdge(jobID id.JobID, edgeID string, ch chan *edge.EdgeExecution) {
	panic("unimplemented")
}

func (m *MockEdgeExecutionUsecase) FindByJobEdgeID(ctx context.Context, jobID id.JobID, edgeID string) (*edge.EdgeExecution, error) {
	args := m.Called(ctx, jobID, edgeID)
	if args.Get(0) == nil {
		return nil, args.Error(1)
	}
	return args.Get(0).(*edge.EdgeExecution), args.Error(1)
}

func TestEdgeExLoader_FindByJobEdgeID_Success(t *testing.T) {
	// Setup
	mockUsecase := new(MockEdgeExecutionUsecase)
	loader := NewEdgeExLoader(mockUsecase)
	ctx := context.Background()

	jobID := id.NewJobID()
	gqlJobID := gqlmodel.ID(jobID.String())
	edgeID := "edge1"

	now := time.Now().UTC()
	featureID := "feature1"
	dataURL := "https://example.com/data"

	mockEdgeEx := edge.NewEdgeExecution(
		"edgeEx1",
		edgeID,
		jobID,
		"workflow1",
		edge.StatusCompleted,
		&now,
		&now,
		&featureID,
		&dataURL,
	)

	mockUsecase.On("FindByJobEdgeID", ctx, jobID, edgeID).Return(mockEdgeEx, nil)

	result, err := loader.FindByJobEdgeID(ctx, gqlJobID, edgeID)

	assert.NoError(t, err)
	assert.NotNil(t, result)
	assert.Equal(t, mockEdgeEx.ID(), string(result.ID))
	assert.Equal(t, mockEdgeEx.EdgeID(), result.EdgeID)
	assert.Equal(t, gqlJobID, result.JobID)
	assert.Equal(t, string(mockEdgeEx.Status()), string(result.Status))
	assert.Equal(t, mockEdgeEx.StartedAt(), result.StartedAt)
	assert.Equal(t, mockEdgeEx.CompletedAt(), result.CompletedAt)
	assert.Equal(t, mockEdgeEx.IntermediateDataURL(), result.IntermediateDataURL)

	mockUsecase.AssertExpectations(t)
}

func TestEdgeExLoader_FindByJobEdgeID_InvalidJobID(t *testing.T) {
	mockUsecase := new(MockEdgeExecutionUsecase)
	loader := NewEdgeExLoader(mockUsecase)
	ctx := context.Background()

	invalidJobID := gqlmodel.ID("invalid-job-id")
	edgeID := "edge1"

	result, err := loader.FindByJobEdgeID(ctx, invalidJobID, edgeID)

	assert.Error(t, err)
	assert.Nil(t, result)

	mockUsecase.AssertNotCalled(t, "FindByJobEdgeID")
}

func TestEdgeExLoader_FindByJobEdgeID_UsecaseError(t *testing.T) {
	mockUsecase := new(MockEdgeExecutionUsecase)
	loader := NewEdgeExLoader(mockUsecase)
	ctx := context.Background()

	jobID := id.NewJobID()
	gqlJobID := gqlmodel.ID(jobID.String())
	edgeID := "edge1"

	expectedError := errors.New("usecase error")
	mockUsecase.On("FindByJobEdgeID", ctx, jobID, edgeID).Return(nil, expectedError)

	result, err := loader.FindByJobEdgeID(ctx, gqlJobID, edgeID)

	assert.Error(t, err)
	assert.Equal(t, expectedError, err)
	assert.Nil(t, result)

	mockUsecase.AssertExpectations(t)
}
