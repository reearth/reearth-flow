// Code generated by Thrift Compiler (0.21.0). DO NOT EDIT.

package proto

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"log/slog"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = bytes.Equal
var _ = context.Background
var _ = errors.New
var _ = fmt.Printf
var _ = slog.Log
var _ = time.Now
var _ = thrift.ZERO
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

// Attributes:
//  - ID
//  - Updates
//  - Version
//  - Timestamp
// 
type Document struct {
	ID string `thrift:"id,1" db:"id" json:"id"`
	Updates []int32 `thrift:"updates,2" db:"updates" json:"updates"`
	Version int32 `thrift:"version,3" db:"version" json:"version"`
	Timestamp string `thrift:"timestamp,4" db:"timestamp" json:"timestamp"`
}

func NewDocument() *Document {
	return &Document{}
}



func (p *Document) GetID() string {
	return p.ID
}



func (p *Document) GetUpdates() []int32 {
	return p.Updates
}



func (p *Document) GetVersion() int32 {
	return p.Version
}



func (p *Document) GetTimestamp() string {
	return p.Timestamp
}

func (p *Document) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField4(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Document) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Document) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.Updates = tSlice
	for i := 0; i < size; i++ {
		var _elem0 int32
		if v, err := iprot.ReadI32(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.Updates = append(p.Updates, _elem0)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Document) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *Document) ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *Document) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Document"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
		if err := p.writeField4(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Document) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *Document) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "updates", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:updates: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.Updates)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Updates {
		if err := oprot.WriteI32(ctx, int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:updates: ", p), err)
	}
	return err
}

func (p *Document) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "version", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:version: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.version (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:version: ", p), err)
	}
	return err
}

func (p *Document) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "timestamp", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timestamp: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timestamp: ", p), err)
	}
	return err
}

func (p *Document) Equals(other *Document) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.ID != other.ID { return false }
	if len(p.Updates) != len(other.Updates) { return false }
	for i, _tgt := range p.Updates {
		_src1 := other.Updates[i]
		if _tgt != _src1 { return false }
	}
	if p.Version != other.Version { return false }
	if p.Timestamp != other.Timestamp { return false }
	return true
}

func (p *Document) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Document(%+v)", *p)
}

func (p *Document) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*proto.Document",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*Document)(nil)

func (p *Document) Validate() error {
	return nil
}

// Attributes:
//  - Updates
//  - Version
//  - Timestamp
// 
type History struct {
	Updates []int32 `thrift:"updates,1" db:"updates" json:"updates"`
	Version int32 `thrift:"version,2" db:"version" json:"version"`
	Timestamp string `thrift:"timestamp,3" db:"timestamp" json:"timestamp"`
}

func NewHistory() *History {
	return &History{}
}



func (p *History) GetUpdates() []int32 {
	return p.Updates
}



func (p *History) GetVersion() int32 {
	return p.Version
}



func (p *History) GetTimestamp() string {
	return p.Timestamp
}

func (p *History) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField3(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *History) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]int32, 0, size)
	p.Updates = tSlice
	for i := 0; i < size; i++ {
		var _elem2 int32
		if v, err := iprot.ReadI32(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem2 = v
		}
		p.Updates = append(p.Updates, _elem2)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *History) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *History) ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *History) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "History"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
		if err := p.writeField3(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *History) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "updates", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:updates: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.Updates)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Updates {
		if err := oprot.WriteI32(ctx, int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:updates: ", p), err)
	}
	return err
}

func (p *History) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "version", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:version: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.version (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:version: ", p), err)
	}
	return err
}

func (p *History) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "timestamp", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err)
	}
	return err
}

func (p *History) Equals(other *History) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.Updates) != len(other.Updates) { return false }
	for i, _tgt := range p.Updates {
		_src3 := other.Updates[i]
		if _tgt != _src3 { return false }
	}
	if p.Version != other.Version { return false }
	if p.Timestamp != other.Timestamp { return false }
	return true
}

func (p *History) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("History(%+v)", *p)
}

func (p *History) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*proto.History",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*History)(nil)

func (p *History) Validate() error {
	return nil
}

// Attributes:
//  - DocID
// 
type GetLatestRequest struct {
	DocID string `thrift:"doc_id,1" db:"doc_id" json:"doc_id"`
}

func NewGetLatestRequest() *GetLatestRequest {
	return &GetLatestRequest{}
}



func (p *GetLatestRequest) GetDocID() string {
	return p.DocID
}

func (p *GetLatestRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetLatestRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DocID = v
	}
	return nil
}

func (p *GetLatestRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetLatestRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetLatestRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "doc_id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:doc_id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.DocID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.doc_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:doc_id: ", p), err)
	}
	return err
}

func (p *GetLatestRequest) Equals(other *GetLatestRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.DocID != other.DocID { return false }
	return true
}

func (p *GetLatestRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLatestRequest(%+v)", *p)
}

func (p *GetLatestRequest) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*proto.GetLatestRequest",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*GetLatestRequest)(nil)

func (p *GetLatestRequest) Validate() error {
	return nil
}

// Attributes:
//  - Document
// 
type GetLatestResponse struct {
	Document *Document `thrift:"document,1" db:"document" json:"document"`
}

func NewGetLatestResponse() *GetLatestResponse {
	return &GetLatestResponse{}
}

var GetLatestResponse_Document_DEFAULT *Document

func (p *GetLatestResponse) GetDocument() *Document {
	if !p.IsSetDocument() {
		return GetLatestResponse_Document_DEFAULT
	}
	return p.Document
}

func (p *GetLatestResponse) IsSetDocument() bool {
	return p.Document != nil
}

func (p *GetLatestResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetLatestResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Document = &Document{}
	if err := p.Document.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Document), err)
	}
	return nil
}

func (p *GetLatestResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetLatestResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetLatestResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "document", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:document: ", p), err)
	}
	if err := p.Document.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Document), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:document: ", p), err)
	}
	return err
}

func (p *GetLatestResponse) Equals(other *GetLatestResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.Document.Equals(other.Document) { return false }
	return true
}

func (p *GetLatestResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetLatestResponse(%+v)", *p)
}

func (p *GetLatestResponse) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*proto.GetLatestResponse",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*GetLatestResponse)(nil)

func (p *GetLatestResponse) Validate() error {
	return nil
}

// Attributes:
//  - DocID
// 
type GetHistoryRequest struct {
	DocID string `thrift:"doc_id,1" db:"doc_id" json:"doc_id"`
}

func NewGetHistoryRequest() *GetHistoryRequest {
	return &GetHistoryRequest{}
}



func (p *GetHistoryRequest) GetDocID() string {
	return p.DocID
}

func (p *GetHistoryRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetHistoryRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DocID = v
	}
	return nil
}

func (p *GetHistoryRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetHistoryRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetHistoryRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "doc_id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:doc_id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.DocID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.doc_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:doc_id: ", p), err)
	}
	return err
}

func (p *GetHistoryRequest) Equals(other *GetHistoryRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.DocID != other.DocID { return false }
	return true
}

func (p *GetHistoryRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetHistoryRequest(%+v)", *p)
}

func (p *GetHistoryRequest) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*proto.GetHistoryRequest",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*GetHistoryRequest)(nil)

func (p *GetHistoryRequest) Validate() error {
	return nil
}

// Attributes:
//  - History
// 
type GetHistoryResponse struct {
	History []*History `thrift:"history,1" db:"history" json:"history"`
}

func NewGetHistoryResponse() *GetHistoryResponse {
	return &GetHistoryResponse{}
}



func (p *GetHistoryResponse) GetHistory() []*History {
	return p.History
}

func (p *GetHistoryResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *GetHistoryResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*History, 0, size)
	p.History = tSlice
	for i := 0; i < size; i++ {
		_elem4 := &History{}
		if err := _elem4.Read(ctx, iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
		}
		p.History = append(p.History, _elem4)
	}
	if err := iprot.ReadListEnd(ctx); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *GetHistoryResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetHistoryResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *GetHistoryResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "history", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:history: ", p), err)
	}
	if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.History)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.History {
		if err := v.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(ctx); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:history: ", p), err)
	}
	return err
}

func (p *GetHistoryResponse) Equals(other *GetHistoryResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if len(p.History) != len(other.History) { return false }
	for i, _tgt := range p.History {
		_src5 := other.History[i]
		if !_tgt.Equals(_src5) { return false }
	}
	return true
}

func (p *GetHistoryResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetHistoryResponse(%+v)", *p)
}

func (p *GetHistoryResponse) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*proto.GetHistoryResponse",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*GetHistoryResponse)(nil)

func (p *GetHistoryResponse) Validate() error {
	return nil
}

// Attributes:
//  - DocID
//  - Version
// 
type RollbackRequest struct {
	DocID string `thrift:"doc_id,1" db:"doc_id" json:"doc_id"`
	Version int32 `thrift:"version,2" db:"version" json:"version"`
}

func NewRollbackRequest() *RollbackRequest {
	return &RollbackRequest{}
}



func (p *RollbackRequest) GetDocID() string {
	return p.DocID
}



func (p *RollbackRequest) GetVersion() int32 {
	return p.Version
}

func (p *RollbackRequest) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RollbackRequest) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.DocID = v
	}
	return nil
}

func (p *RollbackRequest) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Version = v
	}
	return nil
}

func (p *RollbackRequest) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "RollbackRequest"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
		if err := p.writeField2(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RollbackRequest) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "doc_id", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:doc_id: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.DocID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.doc_id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:doc_id: ", p), err)
	}
	return err
}

func (p *RollbackRequest) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "version", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:version: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.Version)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.version (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:version: ", p), err)
	}
	return err
}

func (p *RollbackRequest) Equals(other *RollbackRequest) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if p.DocID != other.DocID { return false }
	if p.Version != other.Version { return false }
	return true
}

func (p *RollbackRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RollbackRequest(%+v)", *p)
}

func (p *RollbackRequest) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*proto.RollbackRequest",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*RollbackRequest)(nil)

func (p *RollbackRequest) Validate() error {
	return nil
}

// Attributes:
//  - Document
// 
type RollbackResponse struct {
	Document *Document `thrift:"document,1" db:"document" json:"document"`
}

func NewRollbackResponse() *RollbackResponse {
	return &RollbackResponse{}
}

var RollbackResponse_Document_DEFAULT *Document

func (p *RollbackResponse) GetDocument() *Document {
	if !p.IsSetDocument() {
		return RollbackResponse_Document_DEFAULT
	}
	return p.Document
}

func (p *RollbackResponse) IsSetDocument() bool {
	return p.Document != nil
}

func (p *RollbackResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *RollbackResponse) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Document = &Document{}
	if err := p.Document.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Document), err)
	}
	return nil
}

func (p *RollbackResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "RollbackResponse"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *RollbackResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "document", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:document: ", p), err)
	}
	if err := p.Document.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Document), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:document: ", p), err)
	}
	return err
}

func (p *RollbackResponse) Equals(other *RollbackResponse) bool {
	if p == other {
		return true
	} else if p == nil || other == nil {
		return false
	}
	if !p.Document.Equals(other.Document) { return false }
	return true
}

func (p *RollbackResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RollbackResponse(%+v)", *p)
}

func (p *RollbackResponse) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*proto.RollbackResponse",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*RollbackResponse)(nil)

func (p *RollbackResponse) Validate() error {
	return nil
}

type DocumentService interface {
	// Parameters:
	//  - Request
	// 
	GetLatest(ctx context.Context, request *GetLatestRequest) (_r *GetLatestResponse, _err error)
	// Parameters:
	//  - Request
	// 
	GetHistory(ctx context.Context, request *GetHistoryRequest) (_r *GetHistoryResponse, _err error)
	// Parameters:
	//  - Request
	// 
	Rollback(ctx context.Context, request *RollbackRequest) (_r *RollbackResponse, _err error)
}

type DocumentServiceClient struct {
	c thrift.TClient
	meta thrift.ResponseMeta
}

func NewDocumentServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DocumentServiceClient {
	return &DocumentServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewDocumentServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DocumentServiceClient {
	return &DocumentServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewDocumentServiceClient(c thrift.TClient) *DocumentServiceClient {
	return &DocumentServiceClient{
		c: c,
	}
}

func (p *DocumentServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *DocumentServiceClient) LastResponseMeta_() thrift.ResponseMeta {
	return p.meta
}

func (p *DocumentServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
	p.meta = meta
}

// Parameters:
//  - Request
// 
func (p *DocumentServiceClient) GetLatest(ctx context.Context, request *GetLatestRequest) (_r *GetLatestResponse, _err error) {
	var _args6 DocumentServiceGetLatestArgs
	_args6.Request = request
	var _result8 DocumentServiceGetLatestResult
	var _meta7 thrift.ResponseMeta
	_meta7, _err = p.Client_().Call(ctx, "GetLatest", &_args6, &_result8)
	p.SetLastResponseMeta_(_meta7)
	if _err != nil {
		return
	}
	if _ret9 := _result8.GetSuccess(); _ret9 != nil {
		return _ret9, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "GetLatest failed: unknown result")
}

// Parameters:
//  - Request
// 
func (p *DocumentServiceClient) GetHistory(ctx context.Context, request *GetHistoryRequest) (_r *GetHistoryResponse, _err error) {
	var _args10 DocumentServiceGetHistoryArgs
	_args10.Request = request
	var _result12 DocumentServiceGetHistoryResult
	var _meta11 thrift.ResponseMeta
	_meta11, _err = p.Client_().Call(ctx, "GetHistory", &_args10, &_result12)
	p.SetLastResponseMeta_(_meta11)
	if _err != nil {
		return
	}
	if _ret13 := _result12.GetSuccess(); _ret13 != nil {
		return _ret13, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "GetHistory failed: unknown result")
}

// Parameters:
//  - Request
// 
func (p *DocumentServiceClient) Rollback(ctx context.Context, request *RollbackRequest) (_r *RollbackResponse, _err error) {
	var _args14 DocumentServiceRollbackArgs
	_args14.Request = request
	var _result16 DocumentServiceRollbackResult
	var _meta15 thrift.ResponseMeta
	_meta15, _err = p.Client_().Call(ctx, "Rollback", &_args14, &_result16)
	p.SetLastResponseMeta_(_meta15)
	if _err != nil {
		return
	}
	if _ret17 := _result16.GetSuccess(); _ret17 != nil {
		return _ret17, nil
	}
	return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "Rollback failed: unknown result")
}

type DocumentServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler DocumentService
}

func (p *DocumentServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *DocumentServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *DocumentServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewDocumentServiceProcessor(handler DocumentService) *DocumentServiceProcessor {

	self18 := &DocumentServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
	self18.processorMap["GetLatest"] = &documentServiceProcessorGetLatest{handler:handler}
	self18.processorMap["GetHistory"] = &documentServiceProcessorGetHistory{handler:handler}
	self18.processorMap["Rollback"] = &documentServiceProcessorRollback{handler:handler}
	return self18
}

func (p *DocumentServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
	if err2 != nil { return false, thrift.WrapTException(err2) }
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(ctx, thrift.STRUCT)
	iprot.ReadMessageEnd(ctx)
	x19 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
	oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
	x19.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return false, x19
}

type documentServiceProcessorGetLatest struct {
	handler DocumentService
}

func (p *documentServiceProcessorGetLatest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err20 error
	args := DocumentServiceGetLatestArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "GetLatest", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := DocumentServiceGetLatestResult{}
	if retval, err2 := p.handler.GetLatest(ctx, args.Request); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc21 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetLatest: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "GetLatest", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err20 = thrift.WrapTException(err2)
		}
		if err2 := _exc21.Write(ctx, oprot); _write_err20 == nil && err2 != nil {
			_write_err20 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err20 == nil && err2 != nil {
			_write_err20 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err20 == nil && err2 != nil {
			_write_err20 = thrift.WrapTException(err2)
		}
		if _write_err20 != nil {
			return false, thrift.WrapTException(_write_err20)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "GetLatest", thrift.REPLY, seqId); err2 != nil {
		_write_err20 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err20 == nil && err2 != nil {
		_write_err20 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err20 == nil && err2 != nil {
		_write_err20 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err20 == nil && err2 != nil {
		_write_err20 = thrift.WrapTException(err2)
	}
	if _write_err20 != nil {
		return false, thrift.WrapTException(_write_err20)
	}
	return true, err
}

type documentServiceProcessorGetHistory struct {
	handler DocumentService
}

func (p *documentServiceProcessorGetHistory) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err22 error
	args := DocumentServiceGetHistoryArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "GetHistory", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := DocumentServiceGetHistoryResult{}
	if retval, err2 := p.handler.GetHistory(ctx, args.Request); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc23 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetHistory: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "GetHistory", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err22 = thrift.WrapTException(err2)
		}
		if err2 := _exc23.Write(ctx, oprot); _write_err22 == nil && err2 != nil {
			_write_err22 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err22 == nil && err2 != nil {
			_write_err22 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err22 == nil && err2 != nil {
			_write_err22 = thrift.WrapTException(err2)
		}
		if _write_err22 != nil {
			return false, thrift.WrapTException(_write_err22)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "GetHistory", thrift.REPLY, seqId); err2 != nil {
		_write_err22 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err22 == nil && err2 != nil {
		_write_err22 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err22 == nil && err2 != nil {
		_write_err22 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err22 == nil && err2 != nil {
		_write_err22 = thrift.WrapTException(err2)
	}
	if _write_err22 != nil {
		return false, thrift.WrapTException(_write_err22)
	}
	return true, err
}

type documentServiceProcessorRollback struct {
	handler DocumentService
}

func (p *documentServiceProcessorRollback) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err24 error
	args := DocumentServiceRollbackArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "Rollback", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelCauseFunc
		ctx, cancel = context.WithCancelCause(ctx)
		defer cancel(nil)
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelCauseFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel(thrift.ErrAbandonRequest)
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := DocumentServiceRollbackResult{}
	if retval, err2 := p.handler.Rollback(ctx, args.Request); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		if errors.Is(err2, context.Canceled) {
			if err := context.Cause(ctx); errors.Is(err, thrift.ErrAbandonRequest) {
				return false, thrift.WrapTException(err)
			}
		}
		_exc25 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Rollback: " + err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "Rollback", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err24 = thrift.WrapTException(err2)
		}
		if err2 := _exc25.Write(ctx, oprot); _write_err24 == nil && err2 != nil {
			_write_err24 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err24 == nil && err2 != nil {
			_write_err24 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err24 == nil && err2 != nil {
			_write_err24 = thrift.WrapTException(err2)
		}
		if _write_err24 != nil {
			return false, thrift.WrapTException(_write_err24)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "Rollback", thrift.REPLY, seqId); err2 != nil {
		_write_err24 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err24 == nil && err2 != nil {
		_write_err24 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err24 == nil && err2 != nil {
		_write_err24 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err24 == nil && err2 != nil {
		_write_err24 = thrift.WrapTException(err2)
	}
	if _write_err24 != nil {
		return false, thrift.WrapTException(_write_err24)
	}
	return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
// 
type DocumentServiceGetLatestArgs struct {
	Request *GetLatestRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewDocumentServiceGetLatestArgs() *DocumentServiceGetLatestArgs {
	return &DocumentServiceGetLatestArgs{}
}

var DocumentServiceGetLatestArgs_Request_DEFAULT *GetLatestRequest

func (p *DocumentServiceGetLatestArgs) GetRequest() *GetLatestRequest {
	if !p.IsSetRequest() {
		return DocumentServiceGetLatestArgs_Request_DEFAULT
	}
	return p.Request
}

func (p *DocumentServiceGetLatestArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DocumentServiceGetLatestArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DocumentServiceGetLatestArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &GetLatestRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *DocumentServiceGetLatestArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetLatest_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DocumentServiceGetLatestArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *DocumentServiceGetLatestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DocumentServiceGetLatestArgs(%+v)", *p)
}

func (p *DocumentServiceGetLatestArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*proto.DocumentServiceGetLatestArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*DocumentServiceGetLatestArgs)(nil)

// Attributes:
//  - Success
// 
type DocumentServiceGetLatestResult struct {
	Success *GetLatestResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDocumentServiceGetLatestResult() *DocumentServiceGetLatestResult {
	return &DocumentServiceGetLatestResult{}
}

var DocumentServiceGetLatestResult_Success_DEFAULT *GetLatestResponse

func (p *DocumentServiceGetLatestResult) GetSuccess() *GetLatestResponse {
	if !p.IsSetSuccess() {
		return DocumentServiceGetLatestResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DocumentServiceGetLatestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DocumentServiceGetLatestResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DocumentServiceGetLatestResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &GetLatestResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DocumentServiceGetLatestResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetLatest_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DocumentServiceGetLatestResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DocumentServiceGetLatestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DocumentServiceGetLatestResult(%+v)", *p)
}

func (p *DocumentServiceGetLatestResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*proto.DocumentServiceGetLatestResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*DocumentServiceGetLatestResult)(nil)

// Attributes:
//  - Request
// 
type DocumentServiceGetHistoryArgs struct {
	Request *GetHistoryRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewDocumentServiceGetHistoryArgs() *DocumentServiceGetHistoryArgs {
	return &DocumentServiceGetHistoryArgs{}
}

var DocumentServiceGetHistoryArgs_Request_DEFAULT *GetHistoryRequest

func (p *DocumentServiceGetHistoryArgs) GetRequest() *GetHistoryRequest {
	if !p.IsSetRequest() {
		return DocumentServiceGetHistoryArgs_Request_DEFAULT
	}
	return p.Request
}

func (p *DocumentServiceGetHistoryArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DocumentServiceGetHistoryArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DocumentServiceGetHistoryArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &GetHistoryRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *DocumentServiceGetHistoryArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetHistory_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DocumentServiceGetHistoryArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *DocumentServiceGetHistoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DocumentServiceGetHistoryArgs(%+v)", *p)
}

func (p *DocumentServiceGetHistoryArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*proto.DocumentServiceGetHistoryArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*DocumentServiceGetHistoryArgs)(nil)

// Attributes:
//  - Success
// 
type DocumentServiceGetHistoryResult struct {
	Success *GetHistoryResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDocumentServiceGetHistoryResult() *DocumentServiceGetHistoryResult {
	return &DocumentServiceGetHistoryResult{}
}

var DocumentServiceGetHistoryResult_Success_DEFAULT *GetHistoryResponse

func (p *DocumentServiceGetHistoryResult) GetSuccess() *GetHistoryResponse {
	if !p.IsSetSuccess() {
		return DocumentServiceGetHistoryResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DocumentServiceGetHistoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DocumentServiceGetHistoryResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DocumentServiceGetHistoryResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &GetHistoryResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DocumentServiceGetHistoryResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "GetHistory_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DocumentServiceGetHistoryResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DocumentServiceGetHistoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DocumentServiceGetHistoryResult(%+v)", *p)
}

func (p *DocumentServiceGetHistoryResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*proto.DocumentServiceGetHistoryResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*DocumentServiceGetHistoryResult)(nil)

// Attributes:
//  - Request
// 
type DocumentServiceRollbackArgs struct {
	Request *RollbackRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewDocumentServiceRollbackArgs() *DocumentServiceRollbackArgs {
	return &DocumentServiceRollbackArgs{}
}

var DocumentServiceRollbackArgs_Request_DEFAULT *RollbackRequest

func (p *DocumentServiceRollbackArgs) GetRequest() *RollbackRequest {
	if !p.IsSetRequest() {
		return DocumentServiceRollbackArgs_Request_DEFAULT
	}
	return p.Request
}

func (p *DocumentServiceRollbackArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *DocumentServiceRollbackArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DocumentServiceRollbackArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	p.Request = &RollbackRequest{}
	if err := p.Request.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
	}
	return nil
}

func (p *DocumentServiceRollbackArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Rollback_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DocumentServiceRollbackArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "request", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err)
	}
	if err := p.Request.Write(ctx, oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err)
	}
	return err
}

func (p *DocumentServiceRollbackArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DocumentServiceRollbackArgs(%+v)", *p)
}

func (p *DocumentServiceRollbackArgs) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*proto.DocumentServiceRollbackArgs",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*DocumentServiceRollbackArgs)(nil)

// Attributes:
//  - Success
// 
type DocumentServiceRollbackResult struct {
	Success *RollbackResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDocumentServiceRollbackResult() *DocumentServiceRollbackResult {
	return &DocumentServiceRollbackResult{}
}

var DocumentServiceRollbackResult_Success_DEFAULT *RollbackResponse

func (p *DocumentServiceRollbackResult) GetSuccess() *RollbackResponse {
	if !p.IsSetSuccess() {
		return DocumentServiceRollbackResult_Success_DEFAULT
	}
	return p.Success
}

func (p *DocumentServiceRollbackResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *DocumentServiceRollbackResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}


	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DocumentServiceRollbackResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	p.Success = &RollbackResponse{}
	if err := p.Success.Read(ctx, iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *DocumentServiceRollbackResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "Rollback_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil { return err }
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DocumentServiceRollbackResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(ctx, oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *DocumentServiceRollbackResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DocumentServiceRollbackResult(%+v)", *p)
}

func (p *DocumentServiceRollbackResult) LogValue() slog.Value {
	if p == nil {
		return slog.AnyValue(nil)
	}
	v := thrift.SlogTStructWrapper{
		Type: "*proto.DocumentServiceRollbackResult",
		Value: p,
	}
	return slog.AnyValue(v)
}

var _ slog.LogValuer = (*DocumentServiceRollbackResult)(nil)


