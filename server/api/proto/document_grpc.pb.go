// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/document.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DocumentService_SyncDocument_FullMethodName       = "/proto.DocumentService/SyncDocument"
	DocumentService_GetLatestDocument_FullMethodName  = "/proto.DocumentService/GetLatestDocument"
	DocumentService_GetDocumentHistory_FullMethodName = "/proto.DocumentService/GetDocumentHistory"
	DocumentService_RollbackDocument_FullMethodName   = "/proto.DocumentService/RollbackDocument"
)

// DocumentServiceClient is the client API for DocumentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DocumentServiceClient interface {
	// WebSocket-like streaming for document updates
	SyncDocument(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DocumentUpdate, DocumentUpdate], error)
	// Get latest document state
	GetLatestDocument(ctx context.Context, in *DocumentRequest, opts ...grpc.CallOption) (*DocumentResponse, error)
	// Get document history
	GetDocumentHistory(ctx context.Context, in *DocumentHistoryRequest, opts ...grpc.CallOption) (*DocumentHistoryResponse, error)
	// Rollback document to a specific version
	RollbackDocument(ctx context.Context, in *RollbackRequest, opts ...grpc.CallOption) (*RollbackResponse, error)
}

type documentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDocumentServiceClient(cc grpc.ClientConnInterface) DocumentServiceClient {
	return &documentServiceClient{cc}
}

func (c *documentServiceClient) SyncDocument(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[DocumentUpdate, DocumentUpdate], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DocumentService_ServiceDesc.Streams[0], DocumentService_SyncDocument_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DocumentUpdate, DocumentUpdate]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DocumentService_SyncDocumentClient = grpc.BidiStreamingClient[DocumentUpdate, DocumentUpdate]

func (c *documentServiceClient) GetLatestDocument(ctx context.Context, in *DocumentRequest, opts ...grpc.CallOption) (*DocumentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DocumentResponse)
	err := c.cc.Invoke(ctx, DocumentService_GetLatestDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) GetDocumentHistory(ctx context.Context, in *DocumentHistoryRequest, opts ...grpc.CallOption) (*DocumentHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DocumentHistoryResponse)
	err := c.cc.Invoke(ctx, DocumentService_GetDocumentHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *documentServiceClient) RollbackDocument(ctx context.Context, in *RollbackRequest, opts ...grpc.CallOption) (*RollbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RollbackResponse)
	err := c.cc.Invoke(ctx, DocumentService_RollbackDocument_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DocumentServiceServer is the server API for DocumentService service.
// All implementations must embed UnimplementedDocumentServiceServer
// for forward compatibility.
type DocumentServiceServer interface {
	// WebSocket-like streaming for document updates
	SyncDocument(grpc.BidiStreamingServer[DocumentUpdate, DocumentUpdate]) error
	// Get latest document state
	GetLatestDocument(context.Context, *DocumentRequest) (*DocumentResponse, error)
	// Get document history
	GetDocumentHistory(context.Context, *DocumentHistoryRequest) (*DocumentHistoryResponse, error)
	// Rollback document to a specific version
	RollbackDocument(context.Context, *RollbackRequest) (*RollbackResponse, error)
	mustEmbedUnimplementedDocumentServiceServer()
}

// UnimplementedDocumentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDocumentServiceServer struct{}

func (UnimplementedDocumentServiceServer) SyncDocument(grpc.BidiStreamingServer[DocumentUpdate, DocumentUpdate]) error {
	return status.Errorf(codes.Unimplemented, "method SyncDocument not implemented")
}
func (UnimplementedDocumentServiceServer) GetLatestDocument(context.Context, *DocumentRequest) (*DocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestDocument not implemented")
}
func (UnimplementedDocumentServiceServer) GetDocumentHistory(context.Context, *DocumentHistoryRequest) (*DocumentHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDocumentHistory not implemented")
}
func (UnimplementedDocumentServiceServer) RollbackDocument(context.Context, *RollbackRequest) (*RollbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollbackDocument not implemented")
}
func (UnimplementedDocumentServiceServer) mustEmbedUnimplementedDocumentServiceServer() {}
func (UnimplementedDocumentServiceServer) testEmbeddedByValue()                         {}

// UnsafeDocumentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DocumentServiceServer will
// result in compilation errors.
type UnsafeDocumentServiceServer interface {
	mustEmbedUnimplementedDocumentServiceServer()
}

func RegisterDocumentServiceServer(s grpc.ServiceRegistrar, srv DocumentServiceServer) {
	// If the following call pancis, it indicates UnimplementedDocumentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DocumentService_ServiceDesc, srv)
}

func _DocumentService_SyncDocument_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DocumentServiceServer).SyncDocument(&grpc.GenericServerStream[DocumentUpdate, DocumentUpdate]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DocumentService_SyncDocumentServer = grpc.BidiStreamingServer[DocumentUpdate, DocumentUpdate]

func _DocumentService_GetLatestDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).GetLatestDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_GetLatestDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).GetLatestDocument(ctx, req.(*DocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_GetDocumentHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocumentHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).GetDocumentHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_GetDocumentHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).GetDocumentHistory(ctx, req.(*DocumentHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DocumentService_RollbackDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RollbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DocumentServiceServer).RollbackDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DocumentService_RollbackDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DocumentServiceServer).RollbackDocument(ctx, req.(*RollbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DocumentService_ServiceDesc is the grpc.ServiceDesc for DocumentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DocumentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DocumentService",
	HandlerType: (*DocumentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLatestDocument",
			Handler:    _DocumentService_GetLatestDocument_Handler,
		},
		{
			MethodName: "GetDocumentHistory",
			Handler:    _DocumentService_GetDocumentHistory_Handler,
		},
		{
			MethodName: "RollbackDocument",
			Handler:    _DocumentService_RollbackDocument_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncDocument",
			Handler:       _DocumentService_SyncDocument_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/document.proto",
}
