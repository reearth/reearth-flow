// Code generated by Kitex v0.14.1. DO NOT EDIT.

package v1

import (
	"context"
	"strconv"

	"google.golang.org/protobuf/types/known/anypb"
	"google.golang.org/protobuf/types/known/timestamppb"

	"github.com/cloudwego/prutal"
)

type Visibility int32

const (
	Visibility_PUBLIC  Visibility = 0
	Visibility_PRIVATE Visibility = 1
)

// Enum value maps for Visibility.
var Visibility_name = map[int32]string{
	0: "PUBLIC",
	1: "PRIVATE",
}

var Visibility_value = map[string]int32{
	"PUBLIC":  0,
	"PRIVATE": 1,
}

func (x Visibility) String() string {
	s, ok := Visibility_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

type SchemaFieldType int32

const (
	SchemaFieldType_Text           SchemaFieldType = 0
	SchemaFieldType_TextArea       SchemaFieldType = 1
	SchemaFieldType_RichText       SchemaFieldType = 2
	SchemaFieldType_MarkdownText   SchemaFieldType = 3
	SchemaFieldType_Asset          SchemaFieldType = 4
	SchemaFieldType_Date           SchemaFieldType = 5
	SchemaFieldType_Bool           SchemaFieldType = 6
	SchemaFieldType_Select         SchemaFieldType = 7
	SchemaFieldType_Tag            SchemaFieldType = 8
	SchemaFieldType_Integer        SchemaFieldType = 9
	SchemaFieldType_Number         SchemaFieldType = 10
	SchemaFieldType_Reference      SchemaFieldType = 11
	SchemaFieldType_Checkbox       SchemaFieldType = 12
	SchemaFieldType_URL            SchemaFieldType = 13
	SchemaFieldType_Group          SchemaFieldType = 14
	SchemaFieldType_GeometryObject SchemaFieldType = 15
	SchemaFieldType_GeometryEditor SchemaFieldType = 16
)

// Enum value maps for SchemaFieldType.
var SchemaFieldType_name = map[int32]string{
	0:  "Text",
	1:  "TextArea",
	2:  "RichText",
	3:  "MarkdownText",
	4:  "Asset",
	5:  "Date",
	6:  "Bool",
	7:  "Select",
	8:  "Tag",
	9:  "Integer",
	10: "Number",
	11: "Reference",
	12: "Checkbox",
	13: "URL",
	14: "Group",
	15: "GeometryObject",
	16: "GeometryEditor",
}

var SchemaFieldType_value = map[string]int32{
	"Text":           0,
	"TextArea":       1,
	"RichText":       2,
	"MarkdownText":   3,
	"Asset":          4,
	"Date":           5,
	"Bool":           6,
	"Select":         7,
	"Tag":            8,
	"Integer":        9,
	"Number":         10,
	"Reference":      11,
	"Checkbox":       12,
	"URL":            13,
	"Group":          14,
	"GeometryObject": 15,
	"GeometryEditor": 16,
}

func (x SchemaFieldType) String() string {
	s, ok := SchemaFieldType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}

// Implementation note:
// Authentication should be implemented using gRPC interceptors
// M2M tokens should be passed in metadata with key "authorization"
// Format: "Bearer <token>"
// UserId should be passed in metadata with key "user-id Core messages
type Project struct {
	Id          string                 `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name        string                 `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Alias       string                 `protobuf:"bytes,3,opt,name=alias" json:"alias,omitempty"`
	Description *string                `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	License     *string                `protobuf:"bytes,5,opt,name=license" json:"license,omitempty"`
	Readme      *string                `protobuf:"bytes,6,opt,name=readme" json:"readme,omitempty"`
	WorkspaceId string                 `protobuf:"bytes,7,opt,name=workspace_id" json:"workspace_id,omitempty"`
	Visibility  Visibility             `protobuf:"varint,8,opt,name=visibility" json:"visibility,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at" json:"updated_at,omitempty"`
}

func (x *Project) Reset() { *x = Project{} }

func (x *Project) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *Project) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *Project) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Project) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Project) GetLicense() string {
	if x != nil && x.License != nil {
		return *x.License
	}
	return ""
}

func (x *Project) GetReadme() string {
	if x != nil && x.Readme != nil {
		return *x.Readme
	}
	return ""
}

func (x *Project) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *Project) GetVisibility() Visibility {
	if x != nil {
		return x.Visibility
	}
	return Visibility_PUBLIC
}

func (x *Project) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Project) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Model struct {
	Id          string                 `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	ProjectId   string                 `protobuf:"bytes,2,opt,name=project_id" json:"project_id,omitempty"`
	Name        string                 `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Description string                 `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Key         string                 `protobuf:"bytes,5,opt,name=key" json:"key,omitempty"`
	Schema      *Schema                `protobuf:"bytes,6,opt,name=schema" json:"schema,omitempty"`
	PublicApiEp string                 `protobuf:"bytes,7,opt,name=public_api_ep" json:"public_api_ep,omitempty"`
	EditorUrl   string                 `protobuf:"bytes,8,opt,name=editor_url" json:"editor_url,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=created_at" json:"created_at,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=updated_at" json:"updated_at,omitempty"`
}

func (x *Model) Reset() { *x = Model{} }

func (x *Model) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *Model) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *Model) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Model) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Model) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Model) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Model) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Model) GetSchema() *Schema {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *Model) GetPublicApiEp() string {
	if x != nil {
		return x.PublicApiEp
	}
	return ""
}

func (x *Model) GetEditorUrl() string {
	if x != nil {
		return x.EditorUrl
	}
	return ""
}

func (x *Model) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Model) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Item struct {
	Id        string                 `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Fields    map[string]*anypb.Any  `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updated_at" json:"updated_at,omitempty"`
}

func (x *Item) Reset() { *x = Item{} }

func (x *Item) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *Item) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *Item) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Item) GetFields() map[string]*anypb.Any {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Item) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Item) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type Schema struct {
	SchemaId string         `protobuf:"bytes,1,opt,name=schema_id" json:"schema_id,omitempty"`
	Fields   []*SchemaField `protobuf:"bytes,2,rep,name=fields" json:"fields,omitempty"`
}

func (x *Schema) Reset() { *x = Schema{} }

func (x *Schema) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *Schema) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *Schema) GetSchemaId() string {
	if x != nil {
		return x.SchemaId
	}
	return ""
}

func (x *Schema) GetFields() []*SchemaField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type SchemaField struct {
	FieldId     string          `protobuf:"bytes,1,opt,name=field_id" json:"field_id,omitempty"`
	Name        string          `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Type        SchemaFieldType `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	Key         string          `protobuf:"bytes,4,opt,name=key" json:"key,omitempty"`
	Description *string         `protobuf:"bytes,5,opt,name=description" json:"description,omitempty"`
}

func (x *SchemaField) Reset() { *x = SchemaField{} }

func (x *SchemaField) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *SchemaField) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *SchemaField) GetFieldId() string {
	if x != nil {
		return x.FieldId
	}
	return ""
}

func (x *SchemaField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SchemaField) GetType() SchemaFieldType {
	if x != nil {
		return x.Type
	}
	return SchemaFieldType_Text
}

func (x *SchemaField) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SchemaField) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

// Request messages
type ProjectRequest struct {
	ProjectIdOrAlias string `protobuf:"bytes,1,opt,name=project_id_or_alias" json:"project_id_or_alias,omitempty"`
}

func (x *ProjectRequest) Reset() { *x = ProjectRequest{} }

func (x *ProjectRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ProjectRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ProjectRequest) GetProjectIdOrAlias() string {
	if x != nil {
		return x.ProjectIdOrAlias
	}
	return ""
}

type AliasAvailabilityRequest struct {
	Alias string `protobuf:"bytes,1,opt,name=alias" json:"alias,omitempty"`
}

func (x *AliasAvailabilityRequest) Reset() { *x = AliasAvailabilityRequest{} }

func (x *AliasAvailabilityRequest) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *AliasAvailabilityRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *AliasAvailabilityRequest) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type CreateProjectRequest struct {
	WorkspaceId string     `protobuf:"bytes,1,opt,name=workspace_id" json:"workspace_id,omitempty"`
	Name        string     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description *string    `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	License     *string    `protobuf:"bytes,4,opt,name=license" json:"license,omitempty"`
	Readme      *string    `protobuf:"bytes,5,opt,name=readme" json:"readme,omitempty"`
	Alias       string     `protobuf:"bytes,6,opt,name=alias" json:"alias,omitempty"`
	Visibility  Visibility `protobuf:"varint,7,opt,name=visibility" json:"visibility,omitempty"`
}

func (x *CreateProjectRequest) Reset() { *x = CreateProjectRequest{} }

func (x *CreateProjectRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *CreateProjectRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *CreateProjectRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *CreateProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateProjectRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *CreateProjectRequest) GetLicense() string {
	if x != nil && x.License != nil {
		return *x.License
	}
	return ""
}

func (x *CreateProjectRequest) GetReadme() string {
	if x != nil && x.Readme != nil {
		return *x.Readme
	}
	return ""
}

func (x *CreateProjectRequest) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *CreateProjectRequest) GetVisibility() Visibility {
	if x != nil {
		return x.Visibility
	}
	return Visibility_PUBLIC
}

type UpdateProjectRequest struct {
	ProjectId   string      `protobuf:"bytes,1,opt,name=project_id" json:"project_id,omitempty"`
	Name        *string     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description *string     `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	License     *string     `protobuf:"bytes,4,opt,name=license" json:"license,omitempty"`
	Readme      *string     `protobuf:"bytes,5,opt,name=readme" json:"readme,omitempty"`
	Alias       *string     `protobuf:"bytes,6,opt,name=alias" json:"alias,omitempty"`
	Visibility  *Visibility `protobuf:"varint,7,opt,name=visibility" json:"visibility,omitempty"`
}

func (x *UpdateProjectRequest) Reset() { *x = UpdateProjectRequest{} }

func (x *UpdateProjectRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *UpdateProjectRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *UpdateProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdateProjectRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateProjectRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *UpdateProjectRequest) GetLicense() string {
	if x != nil && x.License != nil {
		return *x.License
	}
	return ""
}

func (x *UpdateProjectRequest) GetReadme() string {
	if x != nil && x.Readme != nil {
		return *x.Readme
	}
	return ""
}

func (x *UpdateProjectRequest) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *UpdateProjectRequest) GetVisibility() Visibility {
	if x != nil && x.Visibility != nil {
		return *x.Visibility
	}
	return Visibility_PUBLIC
}

type DeleteProjectRequest struct {
	ProjectId string `protobuf:"bytes,1,opt,name=project_id" json:"project_id,omitempty"`
}

func (x *DeleteProjectRequest) Reset() { *x = DeleteProjectRequest{} }

func (x *DeleteProjectRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *DeleteProjectRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *DeleteProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type ListProjectsRequest struct {
	WorkspaceId string `protobuf:"bytes,1,opt,name=workspace_id" json:"workspace_id,omitempty"`
	PublicOnly  bool   `protobuf:"varint,2,opt,name=public_only" json:"public_only,omitempty"`
}

func (x *ListProjectsRequest) Reset() { *x = ListProjectsRequest{} }

func (x *ListProjectsRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ListProjectsRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ListProjectsRequest) GetWorkspaceId() string {
	if x != nil {
		return x.WorkspaceId
	}
	return ""
}

func (x *ListProjectsRequest) GetPublicOnly() bool {
	if x != nil {
		return x.PublicOnly
	}
	return false
}

type ListModelsRequest struct {
	ProjectId string `protobuf:"bytes,1,opt,name=project_id" json:"project_id,omitempty"`
}

func (x *ListModelsRequest) Reset() { *x = ListModelsRequest{} }

func (x *ListModelsRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ListModelsRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ListModelsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type ListItemsRequest struct {
	ModelId   string `protobuf:"bytes,1,opt,name=model_id" json:"model_id,omitempty"`
	ProjectId string `protobuf:"bytes,2,opt,name=project_id" json:"project_id,omitempty"`
	Page      *int32 `protobuf:"varint,3,opt,name=page" json:"page,omitempty"`
	PageSize  *int32 `protobuf:"varint,4,opt,name=page_size" json:"page_size,omitempty"`
}

func (x *ListItemsRequest) Reset() { *x = ListItemsRequest{} }

func (x *ListItemsRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ListItemsRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ListItemsRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *ListItemsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListItemsRequest) GetPage() int32 {
	if x != nil && x.Page != nil {
		return *x.Page
	}
	return 0
}

func (x *ListItemsRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

type ExportRequest struct {
	ProjectId string `protobuf:"bytes,1,opt,name=project_id" json:"project_id,omitempty"`
	ModelId   string `protobuf:"bytes,2,opt,name=model_id" json:"model_id,omitempty"`
}

func (x *ExportRequest) Reset() { *x = ExportRequest{} }

func (x *ExportRequest) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ExportRequest) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ExportRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ExportRequest) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

// Response messages
type ProjectResponse struct {
	Project *Project `protobuf:"bytes,1,opt,name=project" json:"project,omitempty"`
}

func (x *ProjectResponse) Reset() { *x = ProjectResponse{} }

func (x *ProjectResponse) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ProjectResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ProjectResponse) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

type AliasAvailabilityResponse struct {
	Available bool `protobuf:"varint,1,opt,name=available" json:"available,omitempty"`
}

func (x *AliasAvailabilityResponse) Reset() { *x = AliasAvailabilityResponse{} }

func (x *AliasAvailabilityResponse) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *AliasAvailabilityResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *AliasAvailabilityResponse) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

type DeleteProjectResponse struct {
	ProjectId string `protobuf:"bytes,1,opt,name=project_id" json:"project_id,omitempty"`
}

func (x *DeleteProjectResponse) Reset() { *x = DeleteProjectResponse{} }

func (x *DeleteProjectResponse) Marshal(in []byte) ([]byte, error) {
	return prutal.MarshalAppend(in, x)
}

func (x *DeleteProjectResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *DeleteProjectResponse) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type ListProjectsResponse struct {
	Projects   []*Project `protobuf:"bytes,1,rep,name=projects" json:"projects,omitempty"`
	TotalCount int32      `protobuf:"varint,2,opt,name=total_count" json:"total_count,omitempty"`
}

func (x *ListProjectsResponse) Reset() { *x = ListProjectsResponse{} }

func (x *ListProjectsResponse) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ListProjectsResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ListProjectsResponse) GetProjects() []*Project {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *ListProjectsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type ListModelsResponse struct {
	Models     []*Model `protobuf:"bytes,1,rep,name=models" json:"models,omitempty"`
	TotalCount int32    `protobuf:"varint,2,opt,name=total_count" json:"total_count,omitempty"`
}

func (x *ListModelsResponse) Reset() { *x = ListModelsResponse{} }

func (x *ListModelsResponse) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ListModelsResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ListModelsResponse) GetModels() []*Model {
	if x != nil {
		return x.Models
	}
	return nil
}

func (x *ListModelsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type ListItemsResponse struct {
	Items      []*Item `protobuf:"bytes,1,rep,name=items" json:"items,omitempty"`
	TotalCount int32   `protobuf:"varint,2,opt,name=total_count" json:"total_count,omitempty"`
}

func (x *ListItemsResponse) Reset() { *x = ListItemsResponse{} }

func (x *ListItemsResponse) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ListItemsResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ListItemsResponse) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListItemsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type ExportURLResponse struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (x *ExportURLResponse) Reset() { *x = ExportURLResponse{} }

func (x *ExportURLResponse) Marshal(in []byte) ([]byte, error) { return prutal.MarshalAppend(in, x) }

func (x *ExportURLResponse) Unmarshal(in []byte) error { return prutal.Unmarshal(in, x) }

func (x *ExportURLResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ReEarthCMS interface {
	CreateProject(ctx context.Context, req *CreateProjectRequest) (res *ProjectResponse, err error)
	UpdateProject(ctx context.Context, req *UpdateProjectRequest) (res *ProjectResponse, err error)
	DeleteProject(ctx context.Context, req *DeleteProjectRequest) (res *DeleteProjectResponse, err error)
	CheckAliasAvailability(ctx context.Context, req *AliasAvailabilityRequest) (res *AliasAvailabilityResponse, err error)
	GetProject(ctx context.Context, req *ProjectRequest) (res *ProjectResponse, err error)
	ListProjects(ctx context.Context, req *ListProjectsRequest) (res *ListProjectsResponse, err error)
	ListModels(ctx context.Context, req *ListModelsRequest) (res *ListModelsResponse, err error)
	ListItems(ctx context.Context, req *ListItemsRequest) (res *ListItemsResponse, err error)
	GetModelGeoJSONExportURL(ctx context.Context, req *ExportRequest) (res *ExportURLResponse, err error)
}
