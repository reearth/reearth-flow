id: 1a2b3c4d-5e6f-7a8b-9c0d-1e2f3a4b5c6d
name: buildingPartValidation
nodes:
  - id: c223c809-eba3-4d73-8f1b-34d27515bb17
    name: InputRouter
    type: action
    action: InputRouter
    with:
      routingPort: default

  - id: a5aefda5-b66f-4d20-b8b8-5b1aa322ec8e
    name: PLATEAU3.LodSplitterWithDM
    type: subGraph
    subGraphId: 7e98d856-1438-4148-bdcb-91747ef2e405

  - id: 7b9c8d4e-6f5a-4c8b-9d3e-2a5f7b8c9d4e
    name: AttributeMapperBuildingPartLod0Or1
    type: action
    action: AttributeMapper
    with:
      mappers:
        - attribute: Index
          expr: env.get("__value").fileIndex
        - attribute: Filename
          expr: env.get("__value").gmlFilename
        - attribute: Building.gml_id
          expr: env.get("__value").gmlId
        - attribute: BuildingPart.gml_id
          expr: env.get("__value").featureId
        - attribute: lod
          expr: env.get("__value").lod

  - id: 9e8f7a6b-5c4d-3e2f-1a0b-9c8d7e6f5a4b
    name: CsvWriterBuildingPartLod0Or1
    type: action
    action: FeatureWriter
    with:
      format: csv
      output: |
        file::join_path(env.get("workerArtifactPath") ?? env.get("outputPath"), "02_建築物_LOD0-1のBuildingPart.csv")

  # ========== L-bldg-02 Error Check: LOD2~4 BuildingPart Connectivity ==========

  # Step 0-1: Sort features for stable processing
  - id: a0b1c2d3-4e5f-6a7b-8c9d-0e1f2a3b4c5d
    name: SorterBeforeExtraction
    type: action
    action: FeatureSorter
    with:
      attributes:
        - gmlId
        - featureId
      order: ascending

  # Step 0-2: Extract geometry parts (Solid/MultiSurface -> Faces)
  # DUMMY: GeometryPartExtractorが必要（または既存のGeometry処理で代替）
  - id: b0c1d2e3-4f5a-6b7c-8d9e-0f1a2b3c4d5e
    name: GeometryPartExtractor_Dummy
    type: action
    action: NoopProcessor
    with:
      comment: |
        TODO: GeometryPartExtractorまたは代替実装が必要
        機能: Solid/MultiSurfaceを個別の面(Face)に分解
        FME: GeometryPartExtractor + GQuery (IFMEFace抽出)

  # Step 1: Aggregate BuildingParts by Building ID (gml_parent_id)
  # リスト属性として gml_id と geometry を保存
  - id: b1a2c3d4-5e6f-7a8b-9c0d-1e2f3a4b5c6d
    name: AggregateBuildingParts
    type: action
    action: AttributeAggregator
    with:
      aggregateAttributes:
        - newAttribute: _group_key
          attribute: gmlId
        - newAttribute: _lod
          attribute: lod
        - newAttribute: _file_index
          attribute: fileIndex
      calculationAttribute: _num_parts
      calculationValue: 1
      method: count

  # Step 2: GeometryMatcher (DUMMY - 新規実装が必要)
  # 境界面共有を検出し _match_id を付与
  - id: c2b3d4e5-6f7a-8b9c-0d1e-2f3a4b5c6d7e
    name: GeometryMatcher_Dummy
    type: action
    action: NoopProcessor
    with:
      comment: |
        TODO: 新規実装が必要
        機能: 同一Building配下のBuildingPart間で3D境界面共有を検出
        出力: _match_id属性を付与

  # Step 3: BuildingPartConnectivityChecker (DUMMY - 新規実装が必要)
  # 接続グラフを構築し _status を判定
  - id: d3c4e5f6-7a8b-9c0d-1e2f-3a4b5c6d7e8f
    name: BuildingPartConnectivityChecker_Dummy
    type: action
    action: NoopProcessor
    with:
      comment: |
        TODO: 新規実装が必要
        機能: Union-Findで接続グラフ構築、status判定
        出力: _status (full/partial/alone), _connected_id

  # Step 4: Re-aggregate by connected group
  - id: e4d5f6a7-8b9c-0d1e-2f3a-4b5c6d7e8f9a
    name: AggregateByConnectedGroup
    type: action
    action: AttributeAggregator
    with:
      aggregateAttributes:
        - newAttribute: _group_key2
          attribute: gmlId
        - newAttribute: _conn_id
          attribute: _connected_id
        - newAttribute: _lod2
          attribute: lod
        - newAttribute: _file_index2
          attribute: fileIndex
      calculationAttribute: _group_count
      calculationValue: 1
      method: count

  # Step 5: Filter errors (_status != "full")
  - id: f5e6a7b8-9c0d-1e2f-3a4b-5c6d7e8f9a0b
    name: FilterNonFullStatus
    type: action
    action: FeatureFilter
    with:
      conditions:
        - expr: |
            env.get("__value")._status != "full"
          outputPort: filtered

  # Step 6: Deduplicate Building IDs
  - id: a6f7b8c9-0d1e-2f3a-4b5c-6d7e8f9a0b1c
    name: DeduplicateBuildingIds
    type: action
    action: FeatureDuplicateFilter

  # Step 7: Count errors by file
  - id: b7a8c9d0-1e2f-3a4b-5c6d-7e8f9a0b1c2d
    name: CountLbldg02Errors
    type: action
    action: StatisticsCalculator
    with:
      aggregateAttribute: fileIndex
      calculations:
        - newAttribute: L-bldg-02 Errors
          expr: "count()"

  # Step 8: Prepare output attributes
  - id: c8b9d0e1-2f3a-4b5c-6d7e-8f9a0b1c2d3e
    name: AttributeMapperLbldg02Output
    type: action
    action: AttributeMapper
    with:
      mappers:
        - attribute: Index
          expr: env.get("__value").fileIndex
        - attribute: Filename
          expr: env.get("__value").gmlFilename
        - attribute: Building.gml_id
          expr: env.get("__value").gmlId
        - attribute: BuildingPart.gml_id
          expr: env.get("__value").featureId
        - attribute: lod
          expr: env.get("__value").lod
        - attribute: status
          expr: env.get("__value")._status
        - attribute: connected_id
          expr: env.get("__value")._connected_id

  # Step 9: Write L-bldg-02 errors to CSV
  - id: d9c0e1f2-3a4b-5c6d-7e8f-9a0b1c2d3e4f
    name: CsvWriterLbldg02Errors
    type: action
    action: FeatureWriter
    with:
      format: csv
      output: |
        file::join_path(env.get("workerArtifactPath") ?? env.get("outputPath"), "02_建築物_L-bldg-02エラー.csv")

  # ========== Existing LOD0/1 Output ==========

  - id: 3f4e5d6c-7b8a-9c0d-1e2f-3a4b5c6d7e8f
    name: OutputRouter
    type: action
    action: OutputRouter
    with:
      routingPort: default

edges:
  - id: ed4f5a6b-7c8d-4e9f-8a1b-2c3d4e5f6a7b
    from: c223c809-eba3-4d73-8f1b-34d27515bb17
    to: a5aefda5-b66f-4d20-b8b8-5b1aa322ec8e
    fromPort: default
    toPort: default

  # LOD0/1 output (existing)
  - id: f8a9b0c1-2d3e-4f5a-9b6c-7d8e9f0a1b2c
    from: a5aefda5-b66f-4d20-b8b8-5b1aa322ec8e
    to: 7b9c8d4e-6f5a-4c8b-9d3e-2a5f7b8c9d4e
    fromPort: lod0
    toPort: default

  - id: a1b2c3d4-5e6f-4a7b-8c9d-0e1f2a3b4c5d
    from: a5aefda5-b66f-4d20-b8b8-5b1aa322ec8e
    to: 7b9c8d4e-6f5a-4c8b-9d3e-2a5f7b8c9d4e
    fromPort: lod1
    toPort: default

  - id: 5c6d7e8f-9a0b-1c2d-3e4f-5a6b7c8d9e0f
    from: 7b9c8d4e-6f5a-4c8b-9d3e-2a5f7b8c9d4e
    to: 9e8f7a6b-5c4d-3e2f-1a0b-9c8d7e6f5a4b
    fromPort: default
    toPort: default

  - id: 7e8f9a0b-1c2d-3e4f-5a6b-7c8d9e0f1a2b
    from: 9e8f7a6b-5c4d-3e2f-1a0b-9c8d7e6f5a4b
    to: 3f4e5d6c-7b8a-9c0d-1e2f-3a4b5c6d7e8f
    fromPort: default
    toPort: default

  # ========== L-bldg-02 Flow: LOD2~4 ==========

  # LOD2 -> Sorter
  - id: e1f2a3b4-5c6d-7e8f-9a0b-1c2d3e4f5a6b
    from: a5aefda5-b66f-4d20-b8b8-5b1aa322ec8e
    to: a0b1c2d3-4e5f-6a7b-8c9d-0e1f2a3b4c5d
    fromPort: lod2
    toPort: default

  # LOD3 -> Sorter
  - id: f2a3b4c5-6d7e-8f9a-0b1c-2d3e4f5a6b7c
    from: a5aefda5-b66f-4d20-b8b8-5b1aa322ec8e
    to: a0b1c2d3-4e5f-6a7b-8c9d-0e1f2a3b4c5d
    fromPort: lod3
    toPort: default

  # LOD4 -> Sorter
  - id: a3b4c5d6-7e8f-9a0b-1c2d-3e4f5a6b7c8d
    from: a5aefda5-b66f-4d20-b8b8-5b1aa322ec8e
    to: a0b1c2d3-4e5f-6a7b-8c9d-0e1f2a3b4c5d
    fromPort: lod4
    toPort: default

  # Sorter -> GeometryPartExtractor
  - id: a1b2c3d4-5e6f-7a8b-9c0d-1e2f3a4b5c6d
    from: a0b1c2d3-4e5f-6a7b-8c9d-0e1f2a3b4c5d
    to: b0c1d2e3-4f5a-6b7c-8d9e-0f1a2b3c4d5e
    fromPort: default
    toPort: default

  # GeometryPartExtractor -> Aggregator
  - id: b2c3d4e5-6f7a-8b9c-0d1e-2f3a4b5c6d7e
    from: b0c1d2e3-4f5a-6b7c-8d9e-0f1a2b3c4d5e
    to: b1a2c3d4-5e6f-7a8b-9c0d-1e2f3a4b5c6d
    fromPort: default
    toPort: default

  # Aggregator -> GeometryMatcher
  - id: b4c5d6e7-8f9a-0b1c-2d3e-4f5a6b7c8d9e
    from: b1a2c3d4-5e6f-7a8b-9c0d-1e2f3a4b5c6d
    to: c2b3d4e5-6f7a-8b9c-0d1e-2f3a4b5c6d7e
    fromPort: default
    toPort: default

  # GeometryMatcher -> ConnectivityChecker
  - id: c5d6e7f8-9a0b-1c2d-3e4f-5a6b7c8d9e0f
    from: c2b3d4e5-6f7a-8b9c-0d1e-2f3a4b5c6d7e
    to: d3c4e5f6-7a8b-9c0d-1e2f-3a4b5c6d7e8f
    fromPort: default
    toPort: default

  # ConnectivityChecker -> Filter (Re-aggregateをスキップ)
  - id: d6e7f8a9-0b1c-2d3e-4f5a-6b7c8d9e0f1a
    from: d3c4e5f6-7a8b-9c0d-1e2f-3a4b5c6d7e8f
    to: f5e6a7b8-9c0d-1e2f-3a4b-5c6d7e8f9a0b
    fromPort: default
    toPort: default

  # Re-aggregate -> Filter (unused)
  # - id: e7f8a9b0-1c2d-3e4f-5a6b-7c8d9e0f1a2b
  #   from: e4d5f6a7-8b9c-0d1e-2f3a-4b5c6d7e8f9a
  #   to: f5e6a7b8-9c0d-1e2f-3a4b-5c6d7e8f9a0b
  #   fromPort: default
  #   toPort: default

  # Filter -> Deduplicate
  - id: f8a9b0c1-2d3e-4f5a-6b7c-8d9e0f1a2b3c
    from: f5e6a7b8-9c0d-1e2f-3a4b-5c6d7e8f9a0b
    to: a6f7b8c9-0d1e-2f3a-4b5c-6d7e8f9a0b1c
    fromPort: filtered
    toPort: default

  # Deduplicate -> Statistics
  - id: a9b0c1d2-3e4f-5a6b-7c8d-9e0f1a2b3c4d
    from: a6f7b8c9-0d1e-2f3a-4b5c-6d7e8f9a0b1c
    to: b7a8c9d0-1e2f-3a4b-5c6d-7e8f9a0b1c2d
    fromPort: default
    toPort: default

  # Statistics -> AttributeMapper
  - id: b0c1d2e3-4f5a-6b7c-8d9e-0f1a2b3c4d5e
    from: b7a8c9d0-1e2f-3a4b-5c6d-7e8f9a0b1c2d
    to: c8b9d0e1-2f3a-4b5c-6d7e-8f9a0b1c2d3e
    fromPort: complete
    toPort: default

  # AttributeMapper -> CSV Writer
  - id: c1d2e3f4-5a6b-7c8d-9e0f-1a2b3c4d5e6f
    from: c8b9d0e1-2f3a-4b5c-6d7e-8f9a0b1c2d3e
    to: d9c0e1f2-3a4b-5c6d-7e8f-9a0b1c2d3e4f
    fromPort: default
    toPort: default

  # CSV Writer -> OutputRouter
  - id: d2e3f4a5-6b7c-8d9e-0f1a-2b3c4d5e6f7a
    from: d9c0e1f2-3a4b-5c6d-7e8f-9a0b1c2d3e4f
    to: 3f4e5d6c-7b8a-9c0d-1e2f-3a4b5c6d7e8f
    fromPort: default
    toPort: default
