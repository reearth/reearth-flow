{
  "actions": [
    {
      "name": "AreaOnAreaOverlayer",
      "type": "processor",
      "description": "Superpose une zone sur une autre zone",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "AreaOnAreaOverlayer Parameters",
        "description": "Configure how area overlay analysis is performed",
        "type": "object",
        "properties": {
          "groupBy": {
            "title": "Group By Attributes",
            "description": "Optional attributes to group features by during overlay analysis",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/Attribute"
            }
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "area",
        "remnants",
        "rejected"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "AttributeAggregator",
      "type": "processor",
      "description": "Regroupe les entités selon leurs attributs",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "AttributeAggregator Parameters",
        "description": "Configure how features are grouped and aggregated based on attribute values",
        "type": "object",
        "required": [
          "aggregateAttributes",
          "calculationAttribute",
          "method"
        ],
        "properties": {
          "aggregateAttributes": {
            "title": "List of attributes to aggregate",
            "type": "array",
            "items": {
              "$ref": "#/definitions/AggregateAttribute"
            }
          },
          "calculation": {
            "title": "Calculation to perform",
            "anyOf": [
              {
                "$ref": "#/definitions/Expr"
              },
              {
                "type": "null"
              }
            ]
          },
          "calculationAttribute": {
            "title": "Attribute to store calculation result",
            "allOf": [
              {
                "$ref": "#/definitions/Attribute"
              }
            ]
          },
          "calculationValue": {
            "title": "Value to use for calculation",
            "type": [
              "integer",
              "null"
            ],
            "format": "int64"
          },
          "method": {
            "title": "Method to use for aggregation",
            "allOf": [
              {
                "$ref": "#/definitions/Method"
              }
            ]
          }
        },
        "definitions": {
          "AggregateAttribute": {
            "type": "object",
            "required": [
              "newAttribute"
            ],
            "properties": {
              "attribute": {
                "title": "Existing attribute to use",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Attribute"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "attributeValue": {
                "title": "Value to use for attribute",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "newAttribute": {
                "title": "New attribute to create",
                "allOf": [
                  {
                    "$ref": "#/definitions/Attribute"
                  }
                ]
              }
            }
          },
          "Attribute": {
            "type": "string"
          },
          "Expr": {
            "type": "string"
          },
          "Method": {
            "oneOf": [
              {
                "title": "Maximum Value",
                "description": "Find the maximum value in the group",
                "type": "string",
                "enum": [
                  "max"
                ]
              },
              {
                "title": "Minimum Value",
                "description": "Find the minimum value in the group",
                "type": "string",
                "enum": [
                  "min"
                ]
              },
              {
                "title": "Count Items",
                "description": "Count the number of features in the group",
                "type": "string",
                "enum": [
                  "count"
                ]
              }
            ]
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Attribute"
      ]
    },
    {
      "name": "AttributeBulkArrayJoiner",
      "type": "processor",
      "description": "Join Array Attributes Into Single Values",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "AttributeBulkArrayJoiner Parameters",
        "description": "Configure which array attributes to join into single values",
        "type": "object",
        "properties": {
          "ignoreAttributes": {
            "title": "Attributes to Ignore",
            "description": "List of attribute names to skip during array joining process",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/Attribute"
            }
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Attribute"
      ]
    },
    {
      "name": "AttributeConversionTable",
      "type": "processor",
      "description": "Transform Feature Attributes Using Lookup Tables",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "AttributeConversionTable Parameters",
        "type": "object",
        "required": [
          "format",
          "rules"
        ],
        "properties": {
          "dataset": {
            "title": "Dataset URI",
            "description": "Path or URI to external conversion table file",
            "anyOf": [
              {
                "$ref": "#/definitions/Expr"
              },
              {
                "type": "null"
              }
            ]
          },
          "format": {
            "title": "Table Format",
            "description": "Format of the conversion table (CSV, TSV, or JSON)",
            "allOf": [
              {
                "$ref": "#/definitions/ConversionTableFormat"
              }
            ]
          },
          "inline": {
            "title": "Inline Table Data",
            "description": "Conversion table data provided directly as string content",
            "type": [
              "string",
              "null"
            ]
          },
          "rules": {
            "title": "Conversion Rules",
            "description": "List of rules defining how to map attributes using the conversion table",
            "type": "array",
            "items": {
              "$ref": "#/definitions/AttributeConversionTableRule"
            }
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          },
          "AttributeConversionTableRule": {
            "type": "object",
            "required": [
              "conversionTableKeys",
              "conversionTableTo",
              "featureFroms",
              "featureTo"
            ],
            "properties": {
              "conversionTableKeys": {
                "title": "Keys to match in conversion table",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "conversionTableTo": {
                "title": "Attribute to convert to",
                "type": "string"
              },
              "featureFroms": {
                "title": "Attributes to convert from",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Attribute"
                }
              },
              "featureTo": {
                "title": "Attribute to convert to",
                "allOf": [
                  {
                    "$ref": "#/definitions/Attribute"
                  }
                ]
              }
            }
          },
          "ConversionTableFormat": {
            "type": "string",
            "enum": [
              "csv",
              "tsv",
              "json"
            ]
          },
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Attribute"
      ]
    },
    {
      "name": "AttributeDuplicateFilter",
      "type": "processor",
      "description": "Filtre les entités possédant des attributs dupliqués",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "AttributeDuplicateFilter Parameters",
        "type": "object",
        "required": [
          "filterBy"
        ],
        "properties": {
          "filterBy": {
            "title": "Filter Attributes",
            "description": "Attributes used to identify duplicate features - features with identical values for these attributes will be deduplicated",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Attribute"
            }
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Attribute"
      ]
    },
    {
      "name": "AttributeFilePathInfoExtractor",
      "type": "processor",
      "description": "Extrait des informations de chemins de fichier à partir des attributs",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "AttributeFilePathInfoExtractor Parameters",
        "type": "object",
        "required": [
          "attribute"
        ],
        "properties": {
          "attribute": {
            "title": "Source Path Attribute",
            "description": "Attribute containing the file path to analyze for extracting file system information",
            "allOf": [
              {
                "$ref": "#/definitions/Attribute"
              }
            ]
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default",
        "rejected"
      ],
      "categories": [
        "Attribute"
      ]
    },
    {
      "name": "AttributeFlattener",
      "type": "processor",
      "description": "Flatten Nested Object Attributes into Top-Level Attributes",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "AttributeFlattener Parameters",
        "type": "object",
        "required": [
          "attributes"
        ],
        "properties": {
          "attributes": {
            "title": "Attributes to Flatten",
            "description": "Map/object attributes that should be flattened - their nested properties will become top-level attributes",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Attribute"
            }
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Attribute"
      ]
    },
    {
      "name": "AttributeManager",
      "type": "processor",
      "description": "Gère les attributs",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "AttributeManager Parameters",
        "type": "object",
        "required": [
          "operations"
        ],
        "properties": {
          "operations": {
            "title": "Attribute Operations",
            "description": "List of operations to perform on feature attributes (create, convert, rename, remove)",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Operation"
            }
          }
        },
        "definitions": {
          "Expr": {
            "type": "string"
          },
          "Method": {
            "type": "string",
            "enum": [
              "convert",
              "create",
              "rename",
              "remove"
            ]
          },
          "Operation": {
            "type": "object",
            "required": [
              "attribute",
              "method"
            ],
            "properties": {
              "attribute": {
                "title": "Attribute name",
                "type": "string"
              },
              "method": {
                "title": "Operation to perform",
                "allOf": [
                  {
                    "$ref": "#/definitions/Method"
                  }
                ]
              },
              "value": {
                "title": "Value",
                "description": "Value to use for the operation",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            }
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Attribute"
      ]
    },
    {
      "name": "AttributeMapper",
      "type": "processor",
      "description": "Assigne des attributs",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "AttributeMapper Parameters",
        "type": "object",
        "required": [
          "mappers"
        ],
        "properties": {
          "mappers": {
            "title": "Attribute Mappers",
            "description": "List of mapping rules to transform attributes using expressions or value copying",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Mapper"
            }
          }
        },
        "definitions": {
          "Expr": {
            "type": "string"
          },
          "Mapper": {
            "type": "object",
            "properties": {
              "attribute": {
                "title": "Attribute name",
                "type": [
                  "string",
                  "null"
                ]
              },
              "childAttribute": {
                "title": "Child attribute name",
                "type": [
                  "string",
                  "null"
                ]
              },
              "expr": {
                "title": "Expression to evaluate",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "multipleExpr": {
                "title": "Expression to evaluate multiple attributes",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "parentAttribute": {
                "title": "Parent attribute name",
                "type": [
                  "string",
                  "null"
                ]
              },
              "valueAttribute": {
                "title": "Attribute name to get value from",
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Attribute"
      ]
    },
    {
      "name": "BoundsExtractor",
      "type": "processor",
      "description": "Extracteur de limites",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "BoundsExtractor Parameters",
        "type": "object",
        "properties": {
          "xmax": {
            "title": "Maximum X Attribute",
            "description": "Attribute name for storing the maximum X coordinate (defaults to \"xmax\")",
            "anyOf": [
              {
                "$ref": "#/definitions/Attribute"
              },
              {
                "type": "null"
              }
            ]
          },
          "xmin": {
            "title": "Minimum X Attribute",
            "description": "Attribute name for storing the minimum X coordinate (defaults to \"xmin\")",
            "anyOf": [
              {
                "$ref": "#/definitions/Attribute"
              },
              {
                "type": "null"
              }
            ]
          },
          "ymax": {
            "title": "Maximum Y Attribute",
            "description": "Attribute name for storing the maximum Y coordinate (defaults to \"ymax\")",
            "anyOf": [
              {
                "$ref": "#/definitions/Attribute"
              },
              {
                "type": "null"
              }
            ]
          },
          "ymin": {
            "title": "Minimum Y Attribute",
            "description": "Attribute name for storing the minimum Y coordinate (defaults to \"ymin\")",
            "anyOf": [
              {
                "$ref": "#/definitions/Attribute"
              },
              {
                "type": "null"
              }
            ]
          },
          "zmax": {
            "title": "Maximum Z Attribute",
            "description": "Attribute name for storing the maximum Z coordinate (defaults to \"zmax\")",
            "anyOf": [
              {
                "$ref": "#/definitions/Attribute"
              },
              {
                "type": "null"
              }
            ]
          },
          "zmin": {
            "title": "Minimum Z Attribute",
            "description": "Attribute name for storing the minimum Z coordinate (defaults to \"zmin\")",
            "anyOf": [
              {
                "$ref": "#/definitions/Attribute"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default",
        "rejected"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "Bufferer",
      "type": "processor",
      "description": "Crée un tampon autour d'une géométrie",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Bufferer Parameters",
        "description": "Configure how to create buffers around input geometries",
        "type": "object",
        "required": [
          "bufferType",
          "distance",
          "interpolationAngle"
        ],
        "properties": {
          "bufferType": {
            "title": "Buffer Type",
            "description": "The type of buffer to create around the input geometry",
            "allOf": [
              {
                "$ref": "#/definitions/BufferType"
              }
            ]
          },
          "distance": {
            "title": "Distance",
            "description": "The distance to extend the buffer from the original geometry (in coordinate units)",
            "type": "number",
            "format": "double"
          },
          "interpolationAngle": {
            "title": "Interpolation Angle",
            "description": "The angle in degrees used for curve interpolation when creating rounded corners",
            "type": "number",
            "format": "double"
          }
        },
        "definitions": {
          "BufferType": {
            "oneOf": [
              {
                "title": "2D Area Buffer",
                "description": "Creates a 2D polygon buffer around the input geometry",
                "type": "string",
                "enum": [
                  "area2d"
                ]
              }
            ]
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default",
        "rejected"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "BulkAttributeRenamer",
      "type": "processor",
      "description": "Renomme des attributs en ajoutant/supprimant des préfixes ou suffixes, ou en remplaçant du texte",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "BulkAttributeRenamer Parameters",
        "description": "Configure how to rename feature attributes in bulk operations",
        "type": "object",
        "required": [
          "renameAction",
          "renameType",
          "renameValue"
        ],
        "properties": {
          "renameAction": {
            "title": "Rename Operation",
            "description": "The type of renaming operation to perform on the attribute names",
            "allOf": [
              {
                "$ref": "#/definitions/RenameAction"
              }
            ]
          },
          "renameType": {
            "title": "Which Attributes to Rename",
            "description": "Choose whether to rename all attributes or only selected ones",
            "allOf": [
              {
                "$ref": "#/definitions/RenameType"
              }
            ]
          },
          "renameValue": {
            "title": "Text Value",
            "description": "The text to add as prefix/suffix, remove, or use as replacement",
            "type": "string"
          },
          "selectedAttributes": {
            "title": "Selected Attribute Names",
            "description": "List of specific attribute names to rename (required when \"Selected Attributes\" is chosen)",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          },
          "textToFind": {
            "title": "Text Pattern to Find",
            "description": "Regular expression pattern to match when using \"Replace Text\" operation",
            "type": [
              "string",
              "null"
            ]
          }
        },
        "definitions": {
          "RenameAction": {
            "oneOf": [
              {
                "title": "Add Prefix",
                "description": "Add text to the beginning of attribute names",
                "type": "string",
                "enum": [
                  "AddPrefix"
                ]
              },
              {
                "title": "Add Suffix",
                "description": "Add text to the end of attribute names",
                "type": "string",
                "enum": [
                  "AddSuffix"
                ]
              },
              {
                "title": "Remove Prefix",
                "description": "Remove text from the beginning of attribute names",
                "type": "string",
                "enum": [
                  "RemovePrefix"
                ]
              },
              {
                "title": "Remove Suffix",
                "description": "Remove text from the end of attribute names",
                "type": "string",
                "enum": [
                  "RemoveSuffix"
                ]
              },
              {
                "title": "Replace Text",
                "description": "Find and replace text using regular expressions",
                "type": "string",
                "enum": [
                  "StringReplace"
                ]
              }
            ]
          },
          "RenameType": {
            "oneOf": [
              {
                "title": "All Attributes",
                "description": "Rename all attributes in the feature",
                "type": "string",
                "enum": [
                  "All"
                ]
              },
              {
                "title": "Selected Attributes",
                "description": "Rename only specific attributes listed below",
                "type": "string",
                "enum": [
                  "Selected"
                ]
              }
            ]
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Attribute"
      ]
    },
    {
      "name": "CenterPointReplacer",
      "type": "processor",
      "description": "Remplace la géométrie de l'entité par un point situé au centre de sa boîte englobante, à son centre de masse, ou à l'intérieur de son aire.",
      "parameter": null,
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "point",
        "rejected"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "Cesium3DTilesWriter",
      "type": "sink",
      "description": "Écrit les entités dans un fichier",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Cesium3DTilesWriter Parameters",
        "type": "object",
        "required": [
          "maxZoom",
          "minZoom",
          "output"
        ],
        "properties": {
          "attachTexture": {
            "title": "Attach Textures",
            "description": "Whether to include texture information in the generated tiles",
            "type": [
              "boolean",
              "null"
            ]
          },
          "compressOutput": {
            "title": "Compressed Output Path",
            "description": "Optional path for compressed archive output",
            "anyOf": [
              {
                "$ref": "#/definitions/Expr"
              },
              {
                "type": "null"
              }
            ]
          },
          "maxZoom": {
            "title": "Maximum Zoom Level",
            "description": "Maximum zoom level for tile generation (0-24)",
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "minZoom": {
            "title": "Minimum Zoom Level",
            "description": "Minimum zoom level for tile generation (0-24)",
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "output": {
            "title": "Output Path",
            "description": "Directory path where the 3D tiles will be written",
            "allOf": [
              {
                "$ref": "#/definitions/Expr"
              }
            ]
          }
        },
        "definitions": {
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default",
        "schema"
      ],
      "outputPorts": [],
      "categories": [
        "File"
      ]
    },
    {
      "name": "Clipper",
      "type": "processor",
      "description": "Divise les entités candidates à l'aide d'entités de découpage, de sorte que les parties intérieures ou extérieures soient produites séparément",
      "parameter": null,
      "builtin": true,
      "inputPorts": [
        "clipper",
        "candidate"
      ],
      "outputPorts": [
        "inside",
        "outside",
        "rejected"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "ClosedCurveFilter",
      "type": "processor",
      "description": "Vérifie si les courbes forment des boucles fermées",
      "parameter": null,
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "closed",
        "open",
        "rejected"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "ConvexHullAccumulator",
      "type": "processor",
      "description": "Generate Convex Hull Polygons from Grouped Features",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "ConvexHullAccumulator Parameters",
        "type": "object",
        "properties": {
          "groupBy": {
            "title": "Group By Attributes",
            "description": "Attributes used to group features before creating convex hulls - each group gets its own hull",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/Attribute"
            }
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default",
        "rejected"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "CsvReader",
      "type": "source",
      "description": "Read Features from CSV or TSV File",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "CsvReader Parameters",
        "description": "Configure how CSV and TSV files are processed and read",
        "type": "object",
        "required": [
          "format"
        ],
        "properties": {
          "dataset": {
            "title": "File Path",
            "description": "Expression that returns the path to the input file (e.g., \"data.csv\" or variable reference)",
            "anyOf": [
              {
                "$ref": "#/definitions/Expr"
              },
              {
                "type": "null"
              }
            ]
          },
          "format": {
            "title": "File Format",
            "description": "Choose the delimiter format for the input file",
            "allOf": [
              {
                "$ref": "#/definitions/CsvFormat"
              }
            ]
          },
          "inline": {
            "title": "Inline Content",
            "description": "Expression that returns the file content as text instead of reading from a file path",
            "anyOf": [
              {
                "$ref": "#/definitions/Expr"
              },
              {
                "type": "null"
              }
            ]
          },
          "offset": {
            "title": "Header Row Offset",
            "description": "Skip this many rows from the beginning to find the header row (0 = first row is header)",
            "type": [
              "integer",
              "null"
            ],
            "format": "uint",
            "minimum": 0.0
          }
        },
        "definitions": {
          "CsvFormat": {
            "oneOf": [
              {
                "title": "CSV (Comma-Separated Values)",
                "description": "File with comma-separated values",
                "type": "string",
                "enum": [
                  "csv"
                ]
              },
              {
                "title": "TSV (Tab-Separated Values)",
                "description": "File with tab-separated values",
                "type": "string",
                "enum": [
                  "tsv"
                ]
              }
            ]
          },
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "File"
      ]
    },
    {
      "name": "CzmlWriter",
      "type": "sink",
      "description": "Export Features as CZML for Cesium Visualization",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "CzmlWriter Parameters",
        "type": "object",
        "required": [
          "output"
        ],
        "properties": {
          "groupBy": {
            "title": "Group By Attributes",
            "description": "Attributes used to group features into separate CZML files",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/Attribute"
            }
          },
          "output": {
            "title": "Output File Path",
            "description": "Path where the CZML file will be written",
            "allOf": [
              {
                "$ref": "#/definitions/Expr"
              }
            ]
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          },
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [],
      "categories": [
        "File"
      ]
    },
    {
      "name": "DimensionFilter",
      "type": "processor",
      "description": "Filtre les entités en fonction de leur dimension",
      "parameter": null,
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "2d",
        "3d",
        "rejected"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "DirectoryDecompressor",
      "type": "processor",
      "description": "Extracts and decompresses archive files from specified attributes",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "DirectoryDecompressor Parameters",
        "description": "Configures the extraction and decompression of archive files.",
        "type": "object",
        "required": [
          "archiveAttributes"
        ],
        "properties": {
          "archiveAttributes": {
            "description": "Attributes containing archive file paths to be extracted and decompressed",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Attribute"
            }
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "File"
      ]
    },
    {
      "name": "Dissolver",
      "type": "processor",
      "description": "Dissolve Features by Grouping Attributes",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Dissolver Parameters",
        "description": "Configure how to dissolve features by grouping them based on shared attributes # Dissolver Parameters Configure how to dissolve features by grouping them based on shared attributes",
        "type": "object",
        "properties": {
          "groupBy": {
            "title": "Group By Attributes",
            "description": "List of attribute names to group features by before dissolving. Features with the same values for these attributes will be dissolved together",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/Attribute"
            }
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "area",
        "rejected"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "EchoProcessor",
      "type": "processor",
      "description": "Répète les entités",
      "parameter": null,
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Debug"
      ]
    },
    {
      "name": "EchoSink",
      "type": "sink",
      "description": "Répète les entités",
      "parameter": null,
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [],
      "categories": [
        "Debug"
      ]
    },
    {
      "name": "ElevationExtractor",
      "type": "processor",
      "description": "Extrait la première valeur de la coordonnée z d'une entité et la stocke dans un attribut.",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Elevation Extractor Parameters",
        "description": "Configure where to store the extracted elevation value from geometry coordinates",
        "type": "object",
        "required": [
          "outputAttribute"
        ],
        "properties": {
          "outputAttribute": {
            "title": "Output Attribute",
            "description": "Name of the attribute where the extracted elevation value will be stored",
            "allOf": [
              {
                "$ref": "#/definitions/Attribute"
              }
            ]
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "Extruder",
      "type": "processor",
      "description": "Extrue un polygone sur une certaine distance",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Extruder Parameters",
        "description": "Configure how to extrude 2D polygons into 3D solid geometries",
        "type": "object",
        "required": [
          "distance"
        ],
        "properties": {
          "distance": {
            "title": "Distance",
            "description": "The vertical distance (height) to extrude the polygon. Can be a constant value or an expression",
            "allOf": [
              {
                "$ref": "#/definitions/Expr"
              }
            ]
          }
        },
        "definitions": {
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "FeatureCityGmlReader",
      "type": "processor",
      "description": "Reads and processes features from CityGML files with optional flattening",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "FeatureCityGmlReader Parameters",
        "description": "Configuration for reading and processing CityGML files as features.",
        "type": "object",
        "required": [
          "dataset"
        ],
        "properties": {
          "dataset": {
            "title": "Dataset",
            "description": "Path or expression to the CityGML dataset file to be read",
            "allOf": [
              {
                "$ref": "#/definitions/Expr"
              }
            ]
          },
          "flatten": {
            "title": "Flatten",
            "description": "Whether to flatten the hierarchical structure of the CityGML data",
            "type": [
              "boolean",
              "null"
            ]
          }
        },
        "definitions": {
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Feature"
      ]
    },
    {
      "name": "FeatureCounter",
      "type": "processor",
      "description": "Compte les entités",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Feature Counter Parameters",
        "description": "Configure how features are counted and grouped, and where to store the count",
        "type": "object",
        "required": [
          "countStart",
          "outputAttribute"
        ],
        "properties": {
          "countStart": {
            "title": "Start Count",
            "description": "Starting value for the counter",
            "type": "integer",
            "format": "int64"
          },
          "groupBy": {
            "title": "Group By Attributes",
            "description": "List of attribute names to group features by before counting",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/Attribute"
            }
          },
          "outputAttribute": {
            "title": "Output Attribute",
            "description": "Name of the attribute where the count will be stored",
            "type": "string"
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default",
        "rejected"
      ],
      "categories": [
        "Feature"
      ]
    },
    {
      "name": "FeatureCreator",
      "type": "source",
      "description": "Crée des entités à partir d'expressions",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "FeatureCreator Parameters",
        "description": "Configure how to generate custom features using script expressions",
        "type": "object",
        "required": [
          "creator"
        ],
        "properties": {
          "creator": {
            "title": "Script Expression",
            "description": "Write a script expression that returns a map (single feature) or array of maps (multiple features). Each map represents feature attributes as key-value pairs.",
            "allOf": [
              {
                "$ref": "#/definitions/Expr"
              }
            ]
          }
        },
        "definitions": {
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Feature"
      ]
    },
    {
      "name": "FeatureDuplicateFilter",
      "type": "processor",
      "description": "Filter Out Duplicate Features",
      "parameter": null,
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Feature"
      ]
    },
    {
      "name": "FeatureFilePathExtractor",
      "type": "processor",
      "description": "Extract File Paths from Dataset to Features",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Feature File Path Extractor Parameters",
        "description": "Configure how to extract file paths from datasets and optionally extract archives",
        "type": "object",
        "required": [
          "extractArchive",
          "sourceDataset"
        ],
        "properties": {
          "destPrefix": {
            "title": "Destination Prefix",
            "description": "Optional prefix to add to extracted file paths",
            "type": [
              "string",
              "null"
            ]
          },
          "extractArchive": {
            "title": "Extract Archive",
            "description": "Whether to extract archive files found in the dataset",
            "type": "boolean"
          },
          "sourceDataset": {
            "title": "Source Dataset",
            "description": "Expression to get the source dataset path or URL",
            "allOf": [
              {
                "$ref": "#/definitions/Expr"
              }
            ]
          }
        },
        "definitions": {
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default",
        "unfiltered"
      ],
      "categories": [
        "Feature"
      ]
    },
    {
      "name": "FeatureFilter",
      "type": "processor",
      "description": "Filtre les entités selon des conditions",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Feature Filter Parameters",
        "description": "Configure the conditions and output ports for filtering features based on expressions",
        "type": "object",
        "required": [
          "conditions"
        ],
        "properties": {
          "conditions": {
            "title": "Filter Conditions",
            "description": "List of conditions and their corresponding output ports for routing filtered features",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Condition"
            }
          }
        },
        "definitions": {
          "Condition": {
            "type": "object",
            "required": [
              "expr",
              "outputPort"
            ],
            "properties": {
              "expr": {
                "title": "Condition expression",
                "allOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  }
                ]
              },
              "outputPort": {
                "title": "Output port",
                "allOf": [
                  {
                    "$ref": "#/definitions/Port"
                  }
                ]
              }
            }
          },
          "Expr": {
            "type": "string"
          },
          "Port": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "unfiltered"
      ],
      "categories": [
        "Feature"
      ]
    },
    {
      "name": "FeatureLodFilter",
      "type": "processor",
      "description": "Filters features by Level of Detail (LOD), routing them to appropriate output ports",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "FeatureLodFilter Parameters",
        "description": "Configuration for filtering features based on Level of Detail (LOD).",
        "type": "object",
        "required": [
          "filterKey"
        ],
        "properties": {
          "filterKey": {
            "description": "Attribute used to group features for LOD filtering",
            "allOf": [
              {
                "$ref": "#/definitions/Attribute"
              }
            ]
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "up_to_lod1",
        "up_to_lod2",
        "up_to_lod3",
        "up_to_lod4",
        "unfiltered"
      ],
      "categories": [
        "Feature"
      ]
    },
    {
      "name": "FeatureMerger",
      "type": "processor",
      "description": "Fusionne des entités selon leurs attributs",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "FeatureMerger Parameters",
        "description": "Configuration for merging requestor and supplier features based on matching attributes or expressions.",
        "type": "object",
        "properties": {
          "completeGrouped": {
            "description": "Whether to complete grouped features before processing the next group",
            "type": [
              "boolean",
              "null"
            ]
          },
          "requestorAttribute": {
            "description": "Attributes from requestor features to use for matching (alternative to requestor_attribute_value)",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/Attribute"
            }
          },
          "requestorAttributeValue": {
            "description": "Expression to evaluate for requestor feature matching values (alternative to requestor_attribute)",
            "anyOf": [
              {
                "$ref": "#/definitions/Expr"
              },
              {
                "type": "null"
              }
            ]
          },
          "supplierAttribute": {
            "description": "Attributes from supplier features to use for matching (alternative to supplier_attribute_value)",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/Attribute"
            }
          },
          "supplierAttributeValue": {
            "description": "Expression to evaluate for supplier feature matching values (alternative to supplier_attribute)",
            "anyOf": [
              {
                "$ref": "#/definitions/Expr"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          },
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "requestor",
        "supplier"
      ],
      "outputPorts": [
        "merged",
        "unmerged"
      ],
      "categories": [
        "Feature"
      ]
    },
    {
      "name": "FeatureReader",
      "type": "processor",
      "description": "Filtre les entités selon des conditions",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "FeatureReaderParam",
        "oneOf": [
          {
            "title": "Common Reader Parameters",
            "description": "Shared configuration for all feature reader formats.",
            "type": "object",
            "required": [
              "dataset",
              "format"
            ],
            "properties": {
              "dataset": {
                "title": "Dataset",
                "description": "Path or expression to the dataset file to be read",
                "allOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  }
                ]
              },
              "format": {
                "type": "string",
                "enum": [
                  "csv"
                ]
              },
              "offset": {
                "description": "The offset of the first row to read",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint",
                "minimum": 0.0
              }
            }
          },
          {
            "title": "Common Reader Parameters",
            "description": "Shared configuration for all feature reader formats.",
            "type": "object",
            "required": [
              "dataset",
              "format"
            ],
            "properties": {
              "dataset": {
                "title": "Dataset",
                "description": "Path or expression to the dataset file to be read",
                "allOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  }
                ]
              },
              "format": {
                "type": "string",
                "enum": [
                  "tsv"
                ]
              },
              "offset": {
                "description": "The offset of the first row to read",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint",
                "minimum": 0.0
              }
            }
          },
          {
            "title": "Common Reader Parameters",
            "description": "Shared configuration for all feature reader formats.",
            "type": "object",
            "required": [
              "dataset",
              "format"
            ],
            "properties": {
              "dataset": {
                "title": "Dataset",
                "description": "Path or expression to the dataset file to be read",
                "allOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  }
                ]
              },
              "format": {
                "type": "string",
                "enum": [
                  "json"
                ]
              }
            }
          }
        ],
        "definitions": {
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Feature"
      ]
    },
    {
      "name": "FeatureSorter",
      "type": "processor",
      "description": "Trie les entités par attributs",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "FeatureSorter Parameters",
        "description": "Configuration for sorting features based on attribute values.",
        "type": "object",
        "required": [
          "attributes",
          "order"
        ],
        "properties": {
          "attributes": {
            "description": "Attributes to use for sorting features (sort order based on attribute order)",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Attribute"
            }
          },
          "order": {
            "description": "Sorting order (ascending or descending)",
            "allOf": [
              {
                "$ref": "#/definitions/Order"
              }
            ]
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          },
          "Order": {
            "type": "string",
            "enum": [
              "ascending",
              "descending"
            ]
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Feature"
      ]
    },
    {
      "name": "FeatureTransformer",
      "type": "processor",
      "description": "Transforme les entités à l'aide d'expressions",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "FeatureTransformer Parameters",
        "description": "Configuration for applying transformation expressions to features.",
        "type": "object",
        "required": [
          "transformers"
        ],
        "properties": {
          "transformers": {
            "description": "List of transformation expressions to apply to each feature",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Transform"
            }
          }
        },
        "definitions": {
          "Expr": {
            "type": "string"
          },
          "Transform": {
            "type": "object",
            "required": [
              "expr"
            ],
            "properties": {
              "expr": {
                "description": "Expression that modifies the feature (can access and modify attributes, geometry, etc.)",
                "allOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  }
                ]
              }
            }
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Feature"
      ]
    },
    {
      "name": "FeatureTypeFilter",
      "type": "processor",
      "description": "Filtre les entités par type",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "FeatureTypeFilter Parameters",
        "description": "Configuration for filtering features based on their feature type.",
        "type": "object",
        "required": [
          "targetTypes"
        ],
        "properties": {
          "targetTypes": {
            "description": "Target feature types",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default",
        "unfiltered"
      ],
      "categories": [
        "Feature"
      ]
    },
    {
      "name": "FeatureWriter",
      "type": "processor",
      "description": "Writes features from various formats",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "FeatureWriter Parameters",
        "description": "Configuration for writing features to different file formats.",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "format",
              "output"
            ],
            "properties": {
              "format": {
                "type": "string",
                "enum": [
                  "csv"
                ]
              },
              "output": {
                "title": "Output path",
                "allOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  }
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "format",
              "output"
            ],
            "properties": {
              "format": {
                "type": "string",
                "enum": [
                  "tsv"
                ]
              },
              "output": {
                "title": "Output path",
                "allOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  }
                ]
              }
            }
          },
          {
            "title": "JsonWriter Parameters",
            "description": "Configuration for writing features in JSON format with optional custom conversion.",
            "type": "object",
            "required": [
              "format",
              "output"
            ],
            "properties": {
              "converter": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "format": {
                "type": "string",
                "enum": [
                  "json"
                ]
              },
              "output": {
                "title": "Output path",
                "allOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  }
                ]
              }
            }
          }
        ],
        "definitions": {
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Feature"
      ]
    },
    {
      "name": "FilePathExtractor",
      "type": "source",
      "description": "Extrait des fichiers d'un répertoire ou d'une archive",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "FilePathExtractor Parameters",
        "description": "Configuration for extracting file paths from directories or archives.",
        "type": "object",
        "required": [
          "extractArchive",
          "sourceDataset"
        ],
        "properties": {
          "extractArchive": {
            "title": "Extract Archive",
            "description": "Whether to extract files from archives (zip files, etc.) or just list them",
            "type": "boolean"
          },
          "sourceDataset": {
            "title": "Source Dataset",
            "description": "Path or expression pointing to the source directory or archive file",
            "allOf": [
              {
                "$ref": "#/definitions/Expr"
              }
            ]
          }
        },
        "definitions": {
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "File"
      ]
    },
    {
      "name": "FilePropertyExtractor",
      "type": "processor",
      "description": "Extrait les propriétés d'un fichier",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "FilePropertyExtractor Parameters",
        "description": "Configuration for extracting file system properties from files.",
        "type": "object",
        "required": [
          "filePathAttribute"
        ],
        "properties": {
          "filePathAttribute": {
            "description": "Attribute name containing the file path to analyze for properties",
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default",
        "rejected"
      ],
      "categories": [
        "File"
      ]
    },
    {
      "name": "FileReader",
      "type": "source",
      "description": "Lit des entités depuis un fichier",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "FileReader",
        "oneOf": [
          {
            "title": "CSV",
            "type": "object",
            "required": [
              "format"
            ],
            "properties": {
              "dataset": {
                "title": "File Path",
                "description": "Expression that returns the path to the input file (e.g., \"data.csv\" or variable reference)",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "format": {
                "type": "string",
                "enum": [
                  "csv"
                ]
              },
              "inline": {
                "title": "Inline Content",
                "description": "Expression that returns the file content as text instead of reading from a file path",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "offset": {
                "title": "Header Row Offset",
                "description": "Skip this many rows from the beginning to find the header row (0 = first row is header)",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint",
                "minimum": 0.0
              }
            }
          },
          {
            "title": "TSV",
            "type": "object",
            "required": [
              "format"
            ],
            "properties": {
              "dataset": {
                "title": "File Path",
                "description": "Expression that returns the path to the input file (e.g., \"data.csv\" or variable reference)",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "format": {
                "type": "string",
                "enum": [
                  "tsv"
                ]
              },
              "inline": {
                "title": "Inline Content",
                "description": "Expression that returns the file content as text instead of reading from a file path",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "offset": {
                "title": "Header Row Offset",
                "description": "Skip this many rows from the beginning to find the header row (0 = first row is header)",
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint",
                "minimum": 0.0
              }
            }
          },
          {
            "title": "JSON",
            "type": "object",
            "required": [
              "format"
            ],
            "properties": {
              "dataset": {
                "title": "File Path",
                "description": "Expression that returns the path to the input file (e.g., \"data.csv\" or variable reference)",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "format": {
                "type": "string",
                "enum": [
                  "json"
                ]
              },
              "inline": {
                "title": "Inline Content",
                "description": "Expression that returns the file content as text instead of reading from a file path",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            }
          },
          {
            "title": "CityGML",
            "description": "Configuration for reading CityGML files as a data source.",
            "type": "object",
            "required": [
              "format"
            ],
            "properties": {
              "dataset": {
                "title": "File Path",
                "description": "Expression that returns the path to the input file (e.g., \"data.csv\" or variable reference)",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "flatten": {
                "type": [
                  "boolean",
                  "null"
                ]
              },
              "format": {
                "type": "string",
                "enum": [
                  "citygml"
                ]
              },
              "inline": {
                "title": "Inline Content",
                "description": "Expression that returns the file content as text instead of reading from a file path",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            }
          },
          {
            "title": "GeoJSON",
            "type": "object",
            "required": [
              "format"
            ],
            "properties": {
              "dataset": {
                "title": "File Path",
                "description": "Expression that returns the path to the input file (e.g., \"data.csv\" or variable reference)",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "format": {
                "type": "string",
                "enum": [
                  "geojson"
                ]
              },
              "inline": {
                "title": "Inline Content",
                "description": "Expression that returns the file content as text instead of reading from a file path",
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            }
          }
        ],
        "definitions": {
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "File"
      ]
    },
    {
      "name": "FileWriter",
      "type": "sink",
      "description": "Écrit des entités dans un fichier",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "File Writer Parameters",
        "description": "Configure the output file format and destination for writing features",
        "oneOf": [
          {
            "title": "File Writer Common Parameters",
            "description": "Common parameters shared across all file format types",
            "type": "object",
            "required": [
              "format",
              "output"
            ],
            "properties": {
              "format": {
                "type": "string",
                "enum": [
                  "csv"
                ]
              },
              "output": {
                "title": "Output Path",
                "description": "Expression for the output file path where features will be written",
                "allOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  }
                ]
              }
            }
          },
          {
            "title": "File Writer Common Parameters",
            "description": "Common parameters shared across all file format types",
            "type": "object",
            "required": [
              "format",
              "output"
            ],
            "properties": {
              "format": {
                "type": "string",
                "enum": [
                  "tsv"
                ]
              },
              "output": {
                "title": "Output Path",
                "description": "Expression for the output file path where features will be written",
                "allOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  }
                ]
              }
            }
          },
          {
            "title": "File Writer Common Parameters",
            "description": "Common parameters shared across all file format types",
            "type": "object",
            "required": [
              "format",
              "output"
            ],
            "properties": {
              "format": {
                "type": "string",
                "enum": [
                  "xml"
                ]
              },
              "output": {
                "title": "Output Path",
                "description": "Expression for the output file path where features will be written",
                "allOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  }
                ]
              }
            }
          },
          {
            "title": "File Writer Common Parameters",
            "description": "Common parameters shared across all file format types",
            "type": "object",
            "required": [
              "format",
              "output"
            ],
            "properties": {
              "converter": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "format": {
                "type": "string",
                "enum": [
                  "json"
                ]
              },
              "output": {
                "title": "Output Path",
                "description": "Expression for the output file path where features will be written",
                "allOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  }
                ]
              }
            }
          },
          {
            "title": "File Writer Common Parameters",
            "description": "Common parameters shared across all file format types",
            "type": "object",
            "required": [
              "format",
              "output"
            ],
            "properties": {
              "format": {
                "type": "string",
                "enum": [
                  "excel"
                ]
              },
              "output": {
                "title": "Output Path",
                "description": "Expression for the output file path where features will be written",
                "allOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  }
                ]
              },
              "sheetName": {
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          }
        ],
        "definitions": {
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [],
      "categories": [
        "File"
      ]
    },
    {
      "name": "GeoJsonReader",
      "type": "source",
      "description": "Reads geographic features from GeoJSON files, supporting both single features and feature collections",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "GeoJsonReader Parameters",
        "description": "Configuration for reading GeoJSON files as geographic features.",
        "type": "object",
        "properties": {
          "dataset": {
            "title": "File Path",
            "description": "Expression that returns the path to the input file (e.g., \"data.csv\" or variable reference)",
            "anyOf": [
              {
                "$ref": "#/definitions/Expr"
              },
              {
                "type": "null"
              }
            ]
          },
          "inline": {
            "title": "Inline Content",
            "description": "Expression that returns the file content as text instead of reading from a file path",
            "anyOf": [
              {
                "$ref": "#/definitions/Expr"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "definitions": {
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "File"
      ]
    },
    {
      "name": "GeoJsonWriter",
      "type": "sink",
      "description": "Écrit des entités dans un fichier GeoJSON",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "GeoJsonWriter Parameters",
        "description": "Configuration for writing features to GeoJSON files.",
        "type": "object",
        "required": [
          "output"
        ],
        "properties": {
          "groupBy": {
            "description": "Optional attributes to group features by, creating separate files for each group",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/Attribute"
            }
          },
          "output": {
            "description": "Output path or expression for the GeoJSON file to create",
            "allOf": [
              {
                "$ref": "#/definitions/Expr"
              }
            ]
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          },
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [],
      "categories": [
        "File"
      ]
    },
    {
      "name": "GeometryCoercer",
      "type": "processor",
      "description": "Force la géométrie d'une entité à une géométrie spécifique",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "GeometryCoercer Parameters",
        "description": "Configuration for coercing geometries to specific target types.",
        "type": "object",
        "required": [
          "coercerType"
        ],
        "properties": {
          "coercerType": {
            "description": "Target geometry type to coerce features to (e.g., LineString)",
            "allOf": [
              {
                "$ref": "#/definitions/CoercerType"
              }
            ]
          }
        },
        "definitions": {
          "CoercerType": {
            "type": "string",
            "enum": [
              "lineString"
            ]
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "GeometryExtractor",
      "type": "processor",
      "description": "Extrait la géométrie d'une entité et l'ajoute comme attribut.",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Geometry Extractor Parameters",
        "description": "Configure where to store the extracted geometry data as a compressed attribute",
        "type": "object",
        "required": [
          "outputAttribute"
        ],
        "properties": {
          "outputAttribute": {
            "title": "Output Attribute",
            "description": "Name of the attribute where the extracted geometry data will be stored as compressed JSON",
            "allOf": [
              {
                "$ref": "#/definitions/Attribute"
              }
            ]
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "GeometryFilter",
      "type": "processor",
      "description": "Filtre la géométrie par type",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Geometry Filter Parameters",
        "description": "Configure how to filter features based on their geometry type",
        "oneOf": [
          {
            "type": "object",
            "required": [
              "filterType"
            ],
            "properties": {
              "filterType": {
                "type": "string",
                "enum": [
                  "none"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "filterType"
            ],
            "properties": {
              "filterType": {
                "type": "string",
                "enum": [
                  "multiple"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "filterType"
            ],
            "properties": {
              "filterType": {
                "type": "string",
                "enum": [
                  "geometryType"
                ]
              }
            }
          }
        ]
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "unfiltered",
        "none",
        "contains",
        "point",
        "line",
        "lineString",
        "polygon",
        "multiPoint",
        "multiLineString",
        "multiPolygon",
        "rect",
        "triangle",
        "solid",
        "geometryCollection",
        "solid",
        "multiSurface",
        "compositeSurface",
        "surface",
        "triangle",
        "multiCurve",
        "curve",
        "multiPoint",
        "point",
        "tin"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "GeometryReplacer",
      "type": "processor",
      "description": "Remplace la géométrie d'une entité par une nouvelle géométrie.",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Geometry Replacer Parameters",
        "description": "Configure which attribute contains the geometry data to replace the feature's current geometry",
        "type": "object",
        "required": [
          "sourceAttribute"
        ],
        "properties": {
          "sourceAttribute": {
            "title": "Source Attribute",
            "description": "Name of the attribute containing the compressed geometry data to use as the new geometry",
            "allOf": [
              {
                "$ref": "#/definitions/Attribute"
              }
            ]
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "GeometrySplitter",
      "type": "processor",
      "description": "Divise la géométrie par type",
      "parameter": null,
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "GeometryValidator",
      "type": "processor",
      "description": "Valide la géométrie d'une entité",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Geometry Validator Parameters",
        "description": "Configure which validation checks to perform on feature geometries",
        "type": "object",
        "required": [
          "validationTypes"
        ],
        "properties": {
          "validationTypes": {
            "title": "Validation Types",
            "description": "List of validation checks to perform on the geometry (duplicate points, corrupt geometry, self-intersection)",
            "type": "array",
            "items": {
              "$ref": "#/definitions/ValidationType"
            }
          }
        },
        "definitions": {
          "ValidationType": {
            "type": "string",
            "enum": [
              "duplicatePoints",
              "corruptGeometry",
              "selfIntersection"
            ]
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "success",
        "failed",
        "rejected"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "GeometryValueFilter",
      "type": "processor",
      "description": "Filtre la géométrie par valeur",
      "parameter": null,
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "none",
        "geometry2d",
        "geometry3d",
        "cityGml"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "GltfWriter",
      "type": "sink",
      "description": "Écrit des entités dans un fichier Gltf",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "GltfWriter Parameters",
        "description": "Configuration for writing features to GLTF 3D format.",
        "type": "object",
        "required": [
          "output"
        ],
        "properties": {
          "attachTexture": {
            "description": "Whether to attach texture information to the GLTF model",
            "type": [
              "boolean",
              "null"
            ]
          },
          "output": {
            "description": "Output path or expression for the GLTF file to create",
            "allOf": [
              {
                "$ref": "#/definitions/Expr"
              }
            ]
          }
        },
        "definitions": {
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [],
      "categories": [
        "File"
      ]
    },
    {
      "name": "HoleCounter",
      "type": "processor",
      "description": "Compte le nombre de trous dans une géométrie et l'ajoute comme attribut.",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Hole Counter Parameters",
        "description": "Configure where to store the count of holes found in polygon geometries",
        "type": "object",
        "required": [
          "outputAttribute"
        ],
        "properties": {
          "outputAttribute": {
            "title": "Output Attribute",
            "description": "Name of the attribute where the hole count will be stored as a number",
            "allOf": [
              {
                "$ref": "#/definitions/Attribute"
              }
            ]
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "HoleExtractor",
      "type": "processor",
      "description": "Extrait les trous dans une géométrie et les ajoute comme attribut.",
      "parameter": null,
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "outershell",
        "hole",
        "rejected"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "HorizontalReprojector",
      "type": "processor",
      "description": "Reprojette la géométrie d'une entité dans un système de coordonnées spécifié",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Horizontal Reprojector Parameters",
        "description": "Configure the target coordinate system for geometry reprojection",
        "type": "object",
        "required": [
          "epsgCode"
        ],
        "properties": {
          "epsgCode": {
            "title": "EPSG Code",
            "description": "Target coordinate system EPSG code for the reprojection",
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "InputRouter",
      "type": "processor",
      "description": "Action pour le renvoi du premier port dans les sous-flux de travail.",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "InputRouter",
        "type": "object",
        "required": [
          "routingPort"
        ],
        "properties": {
          "routingPort": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "System"
      ]
    },
    {
      "name": "JPStandardGridAccumulator",
      "type": "processor",
      "description": "Divides geometries into Japanese standard mesh grid (1km) and adds mesh codes to features",
      "parameter": null,
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default",
        "rejected"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "LineOnLineOverlayer",
      "type": "processor",
      "description": "Les points d'intersection deviennent des entités ponctuelles pouvant contenir la liste combinée des attributs des lignes d'origine intersectées.",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "LineOnLineOverlayer Parameters",
        "description": "Configuration for finding intersection points between line features.",
        "type": "object",
        "required": [
          "tolerance"
        ],
        "properties": {
          "groupBy": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/Attribute"
            }
          },
          "tolerance": {
            "type": "number",
            "format": "double"
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "point",
        "line",
        "rejected"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "ListExploder",
      "type": "processor",
      "description": "Explose les attributs de type liste en plusieurs éléments",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "ListExploder Parameters",
        "description": "Configuration for exploding array attributes into individual features.",
        "type": "object",
        "required": [
          "sourceAttribute"
        ],
        "properties": {
          "sourceAttribute": {
            "description": "Attribute containing the array to explode (each element becomes a separate feature)",
            "allOf": [
              {
                "$ref": "#/definitions/Attribute"
              }
            ]
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Feature"
      ]
    },
    {
      "name": "MVTWriter",
      "type": "sink",
      "description": "Écrit des entités dans un fichier",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "MVTWriter Parameters",
        "description": "Configuration for writing features to Mapbox Vector Tiles (MVT) format.",
        "type": "object",
        "required": [
          "layerName",
          "maxZoom",
          "minZoom",
          "output"
        ],
        "properties": {
          "compressOutput": {
            "title": "Compress Output",
            "description": "Optional expression to determine whether to compress the output tiles",
            "anyOf": [
              {
                "$ref": "#/definitions/Expr"
              },
              {
                "type": "null"
              }
            ]
          },
          "layerName": {
            "title": "Layer Name",
            "description": "Name of the layer within the MVT tiles",
            "allOf": [
              {
                "$ref": "#/definitions/Expr"
              }
            ]
          },
          "maxZoom": {
            "title": "Maximum Zoom",
            "description": "Maximum zoom level to generate tiles for",
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "minZoom": {
            "title": "Minimum Zoom",
            "description": "Minimum zoom level to generate tiles for",
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "output": {
            "title": "Output",
            "description": "Output directory path or expression for the generated MVT tiles",
            "allOf": [
              {
                "$ref": "#/definitions/Expr"
              }
            ]
          }
        },
        "definitions": {
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [],
      "categories": [
        "File"
      ]
    },
    {
      "name": "NoopProcessor",
      "type": "processor",
      "description": "N'effectue aucune opération sur les entités",
      "parameter": null,
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Noop"
      ]
    },
    {
      "name": "NoopSink",
      "type": "sink",
      "description": "N'effectue aucune opération finale",
      "parameter": null,
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [],
      "categories": [
        "Noop"
      ]
    },
    {
      "name": "Offsetter",
      "type": "processor",
      "description": "Ajoute des décalages aux coordonnées de l'entité.",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Offsetter Parameters",
        "description": "Configure the X, Y, and Z coordinate offsets to apply to all geometry coordinates",
        "type": "object",
        "properties": {
          "offsetX": {
            "title": "X Offset",
            "description": "Offset to add to all X coordinates (longitude)",
            "type": [
              "number",
              "null"
            ],
            "format": "double"
          },
          "offsetY": {
            "title": "Y Offset",
            "description": "Offset to add to all Y coordinates (latitude)",
            "type": [
              "number",
              "null"
            ],
            "format": "double"
          },
          "offsetZ": {
            "title": "Z Offset",
            "description": "Offset to add to all Z coordinates (elevation)",
            "type": [
              "number",
              "null"
            ],
            "format": "double"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "OrientationExtractor",
      "type": "processor",
      "description": "Extrait l'orientation de la géométrie d'une entité et l'ajoute comme attribut.",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Orientation Extractor Parameters",
        "description": "Configure where to store the extracted polygon orientation information",
        "type": "object",
        "required": [
          "outputAttribute"
        ],
        "properties": {
          "outputAttribute": {
            "title": "Output Attribute",
            "description": "Name of the attribute where the orientation (clockwise/counter_clockwise) will be stored",
            "allOf": [
              {
                "$ref": "#/definitions/Attribute"
              }
            ]
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "OutputRouter",
      "type": "processor",
      "description": "Action pour le renvoi du dernier port dans les sous-flux de travail.",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "OutputRouter",
        "type": "object",
        "required": [
          "routingPort"
        ],
        "properties": {
          "routingPort": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [],
      "categories": [
        "System"
      ]
    },
    {
      "name": "PLATEAU3.AttributeFlattener",
      "type": "processor",
      "description": "Aplati les attributs pour créer une entité de bâtiment",
      "parameter": null,
      "builtin": false,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "PLATEAU"
      ]
    },
    {
      "name": "PLATEAU3.BuildingInstallationGeometryTypeExtractor",
      "type": "processor",
      "description": "Extrait le type de géométrie de l'installation d'un bâtiment (BuildingInstallationGeometryType)",
      "parameter": null,
      "builtin": false,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "PLATEAU"
      ]
    },
    {
      "name": "PLATEAU3.BuildingUsageAttributeValidator",
      "type": "processor",
      "description": "Ce processeur valide les attributs d'usage des bâtiments en vérifiant la présence d'attributs requis et la justesse des codes de ville. En cas de problème, il génère des erreurs via les ports lBldgError et codeError.",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "BuildingUsageAttributeValidatorParam",
        "type": "object",
        "properties": {
          "codelistsPath": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "builtin": false,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "lBldgError",
        "codeError",
        "default"
      ],
      "categories": [
        "PLATEAU"
      ]
    },
    {
      "name": "PLATEAU3.DictionariesInitiator",
      "type": "processor",
      "description": "Initialise des dictionnaires pour PLATEAU",
      "parameter": null,
      "builtin": false,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default",
        "rejected"
      ],
      "categories": [
        "PLATEAU"
      ]
    },
    {
      "name": "PLATEAU3.DomainOfDefinitionValidator",
      "type": "processor",
      "description": "Valide le domaine de définition des entités CityGML",
      "parameter": null,
      "builtin": false,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default",
        "rejected"
      ],
      "categories": [
        "PLATEAU"
      ]
    },
    {
      "name": "PLATEAU3.MaxLodExtractor",
      "type": "processor",
      "description": "Extrait maxLod",
      "parameter": null,
      "builtin": false,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "PLATEAU"
      ]
    },
    {
      "name": "PLATEAU3.TranXLinkChecker",
      "type": "processor",
      "description": "Vérifie Xlink pour Tran",
      "parameter": null,
      "builtin": false,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "PLATEAU"
      ]
    },
    {
      "name": "PLATEAU3.UDXFolderExtractor",
      "type": "processor",
      "description": "Extrait les dossiers UDX du chemin cityGML",
      "parameter": null,
      "builtin": false,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default",
        "rejected"
      ],
      "categories": [
        "PLATEAU"
      ]
    },
    {
      "name": "PLATEAU3.UnmatchedXlinkDetector",
      "type": "processor",
      "description": "Détecte les xlinks non correspondants pour PLATEAU",
      "parameter": null,
      "builtin": false,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "summary",
        "unMatchedXlinkFrom",
        "unMatchedXlinkTo"
      ],
      "categories": [
        "PLATEAU"
      ]
    },
    {
      "name": "PLATEAU3.XMLAttributeExtractor",
      "type": "processor",
      "description": "Extrait les attributs de fragments XML en fonction d'une définition de schéma",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "XmlAttributeExtractorParam",
        "type": "object",
        "properties": {
          "addNsprefixToFeatureTypes": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "cityCode": {
            "type": [
              "string",
              "null"
            ]
          },
          "exceptFeatureTypes": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          },
          "extractDmGeometryAsXmlFragment": {
            "type": [
              "boolean",
              "null"
            ]
          },
          "schemaJson": {
            "type": [
              "string",
              "null"
            ]
          },
          "targetPackages": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "string"
            }
          }
        }
      },
      "builtin": false,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "attributeFeature",
        "summary",
        "filePath"
      ],
      "categories": [
        "PLATEAU"
      ]
    },
    {
      "name": "PLATEAU4.AttributeFlattener",
      "type": "processor",
      "description": "Flatten attributes for building feature",
      "parameter": null,
      "builtin": false,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default",
        "schema"
      ],
      "categories": [
        "PLATEAU"
      ]
    },
    {
      "name": "PLATEAU4.CityCodeExtractor",
      "type": "processor",
      "description": "Extracts city code information from PLATEAU4 codelists for local public authorities",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "CityCodeExtractor Parameters",
        "description": "Configuration for extracting PLATEAU4 city code information from codelists.",
        "type": "object",
        "required": [
          "cityCodeAttribute",
          "codelistsPathAttribute"
        ],
        "properties": {
          "cityCodeAttribute": {
            "description": "Attribute containing the city code to look up in codelists",
            "allOf": [
              {
                "$ref": "#/definitions/Attribute"
              }
            ]
          },
          "codelistsPathAttribute": {
            "description": "Attribute containing the path to the PLATEAU codelists directory",
            "allOf": [
              {
                "$ref": "#/definitions/Attribute"
              }
            ]
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          }
        }
      },
      "builtin": false,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "PLATEAU"
      ]
    },
    {
      "name": "PLATEAU4.DomainOfDefinitionValidator",
      "type": "processor",
      "description": "Validates domain of definition of CityGML features",
      "parameter": null,
      "builtin": false,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default",
        "rejected",
        "duplicateGmlIdStats"
      ],
      "categories": [
        "PLATEAU"
      ]
    },
    {
      "name": "PLATEAU4.MaxLodExtractor",
      "type": "processor",
      "description": "Extracts maxLod",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "MaxLodExtractor Parameters",
        "description": "Configuration for extracting maximum LOD (Level of Detail) information from PLATEAU4 CityGML files.",
        "type": "object",
        "required": [
          "cityGmlPathAttribute",
          "maxLodAttribute"
        ],
        "properties": {
          "cityGmlPathAttribute": {
            "$ref": "#/definitions/Attribute"
          },
          "maxLodAttribute": {
            "$ref": "#/definitions/Attribute"
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          }
        }
      },
      "builtin": false,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "PLATEAU"
      ]
    },
    {
      "name": "PLATEAU4.MissingAttributeDetector",
      "type": "processor",
      "description": "Detect missing attributes",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "MissingAttributeDetector Parameters",
        "description": "Configuration for detecting missing attributes in PLATEAU4 features.",
        "type": "object",
        "required": [
          "packageAttribute"
        ],
        "properties": {
          "packageAttribute": {
            "$ref": "#/definitions/Attribute"
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          }
        }
      },
      "builtin": false,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "summary",
        "required",
        "target",
        "dataQualityC07",
        "dataQualityC08"
      ],
      "categories": [
        "PLATEAU"
      ]
    },
    {
      "name": "PLATEAU4.ObjectListExtractor",
      "type": "processor",
      "description": "Extract object list",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "ObjectListExtractor Parameters",
        "description": "Configuration for extracting object lists from PLATEAU4 data.",
        "type": "object",
        "required": [
          "objectListPathAttribute"
        ],
        "properties": {
          "objectListPathAttribute": {
            "$ref": "#/definitions/Attribute"
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          }
        }
      },
      "builtin": false,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "PLATEAU"
      ]
    },
    {
      "name": "PLATEAU4.UDXFolderExtractor",
      "type": "processor",
      "description": "Extracts UDX folders from cityGML path",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "UDXFolderExtractor Parameters",
        "description": "Configuration for extracting UDX folder structure information from PLATEAU4 CityGML paths.",
        "type": "object",
        "required": [
          "cityGmlPath"
        ],
        "properties": {
          "cityGmlPath": {
            "$ref": "#/definitions/Expr"
          },
          "codelistsPath": {
            "anyOf": [
              {
                "$ref": "#/definitions/Attribute"
              },
              {
                "type": "null"
              }
            ]
          },
          "schemasPath": {
            "anyOf": [
              {
                "$ref": "#/definitions/Attribute"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          },
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": false,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default",
        "rejected"
      ],
      "categories": [
        "PLATEAU"
      ]
    },
    {
      "name": "PlanarityFilter",
      "type": "processor",
      "description": "Filtre la géométrie par type",
      "parameter": null,
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "planarity",
        "notplanarity"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "Refiner",
      "type": "processor",
      "description": "Affine la géométrie",
      "parameter": null,
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default",
        "remain"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "RhaiCaller",
      "type": "processor",
      "description": "Appelle un script Rhai",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "RhaiCaller Parameters",
        "description": "Configuration for executing Rhai scripts on features with conditional processing.",
        "type": "object",
        "required": [
          "isTarget",
          "process"
        ],
        "properties": {
          "isTarget": {
            "description": "Rhai script expression to determine if the feature should be processed (returns boolean)",
            "allOf": [
              {
                "$ref": "#/definitions/Expr"
              }
            ]
          },
          "process": {
            "description": "Rhai script expression to process and transform the feature when target condition is met",
            "allOf": [
              {
                "$ref": "#/definitions/Expr"
              }
            ]
          }
        },
        "definitions": {
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Feature"
      ]
    },
    {
      "name": "ShapefileWriter",
      "type": "sink",
      "description": "Writes geographic features to ESRI Shapefile format with optional grouping",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "ShapefileWriter Parameters",
        "description": "Configuration for writing features to ESRI Shapefile format.",
        "type": "object",
        "required": [
          "output"
        ],
        "properties": {
          "groupBy": {
            "description": "Optional attributes to group features by, creating separate files for each group",
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/definitions/Attribute"
            }
          },
          "output": {
            "description": "Output path or expression for the Shapefile to create",
            "allOf": [
              {
                "$ref": "#/definitions/Expr"
              }
            ]
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          },
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [],
      "categories": [
        "File"
      ]
    },
    {
      "name": "SqlReader",
      "type": "source",
      "description": "Read Features from SQL Database",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "SQL Reader Parameters",
        "description": "Configure the SQL query and database connection for reading features from a database",
        "type": "object",
        "required": [
          "databaseUrl",
          "sql"
        ],
        "properties": {
          "databaseUrl": {
            "title": "Database URL",
            "description": "Database connection URL (e.g. `sqlite:///tests/sqlite/sqlite.db`, `mysql://user:password@localhost:3306/db`, `postgresql://user:password@localhost:5432/db`)",
            "allOf": [
              {
                "$ref": "#/definitions/Expr"
              }
            ]
          },
          "sql": {
            "title": "SQL Query",
            "description": "SQL query expression to execute for retrieving data",
            "allOf": [
              {
                "$ref": "#/definitions/Expr"
              }
            ]
          }
        },
        "definitions": {
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Feature"
      ]
    },
    {
      "name": "StatisticsCalculator",
      "type": "processor",
      "description": "Calcule des statistiques sur les entités",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "StatisticsCalculator Parameters",
        "description": "Configuration for calculating statistical aggregations on feature attributes.",
        "type": "object",
        "required": [
          "calculations"
        ],
        "properties": {
          "aggregateAttribute": {
            "description": "Attribute to group features by for aggregation",
            "anyOf": [
              {
                "$ref": "#/definitions/Attribute"
              },
              {
                "type": "null"
              }
            ]
          },
          "aggregateName": {
            "description": "Name of the attribute containing the aggregate group name",
            "anyOf": [
              {
                "$ref": "#/definitions/Attribute"
              },
              {
                "type": "null"
              }
            ]
          },
          "calculations": {
            "description": "List of statistical calculations to perform on grouped features",
            "type": "array",
            "items": {
              "$ref": "#/definitions/Calculation"
            }
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          },
          "Calculation": {
            "type": "object",
            "required": [
              "expr",
              "newAttribute"
            ],
            "properties": {
              "expr": {
                "title": "Calculation to perform",
                "allOf": [
                  {
                    "$ref": "#/definitions/Expr"
                  }
                ]
              },
              "newAttribute": {
                "title": "New attribute name",
                "allOf": [
                  {
                    "$ref": "#/definitions/Attribute"
                  }
                ]
              }
            }
          },
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default",
        "complete"
      ],
      "categories": [
        "Attribute"
      ]
    },
    {
      "name": "SurfaceFootprintReplacer",
      "type": "processor",
      "description": "Replace the geometry with its footprint",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "SurfaceFootprintReplacer Parameters",
        "description": "Configuration for replacing geometry with its footprint projection.",
        "type": "object",
        "properties": {
          "elevation": {
            "type": [
              "number",
              "null"
            ],
            "format": "double"
          },
          "lightDirection": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "type": "number",
              "format": "double"
            },
            "maxItems": 3,
            "minItems": 3
          },
          "shadowMode": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "footprint",
        "rejected"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "ThreeDimensionBoxReplacer",
      "type": "processor",
      "description": "Remplace un boîtier tridimensionnel par un polygone.",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "3D Box Replacer Parameters",
        "description": "Configure which attributes contain the minimum and maximum coordinates for creating a 3D box",
        "type": "object",
        "required": [
          "maxX",
          "maxY",
          "maxZ",
          "minX",
          "minY",
          "minZ"
        ],
        "properties": {
          "maxX": {
            "title": "Maximum X Attribute",
            "description": "Name of attribute containing the maximum X coordinate",
            "allOf": [
              {
                "$ref": "#/definitions/Attribute"
              }
            ]
          },
          "maxY": {
            "title": "Maximum Y Attribute",
            "description": "Name of attribute containing the maximum Y coordinate",
            "allOf": [
              {
                "$ref": "#/definitions/Attribute"
              }
            ]
          },
          "maxZ": {
            "title": "Maximum Z Attribute",
            "description": "Name of attribute containing the maximum Z coordinate",
            "allOf": [
              {
                "$ref": "#/definitions/Attribute"
              }
            ]
          },
          "minX": {
            "title": "Minimum X Attribute",
            "description": "Name of attribute containing the minimum X coordinate",
            "allOf": [
              {
                "$ref": "#/definitions/Attribute"
              }
            ]
          },
          "minY": {
            "title": "Minimum Y Attribute",
            "description": "Name of attribute containing the minimum Y coordinate",
            "allOf": [
              {
                "$ref": "#/definitions/Attribute"
              }
            ]
          },
          "minZ": {
            "title": "Minimum Z Attribute",
            "description": "Name of attribute containing the minimum Z coordinate",
            "allOf": [
              {
                "$ref": "#/definitions/Attribute"
              }
            ]
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "ThreeDimensionPlanarityRotator",
      "type": "processor",
      "description": "Rotates a single or a set of 2D geometries in 3D space to align them horizontally.",
      "parameter": null,
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default",
        "rejected"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "ThreeDimensionRotator",
      "type": "processor",
      "description": "Remplace un boîtier tridimensionnel par un polygone.",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "3D Rotator Parameters",
        "description": "Configure the 3D rotation parameters including axis, origin point, and angle",
        "type": "object",
        "required": [
          "angleDegree",
          "directionX",
          "directionY",
          "directionZ",
          "originX",
          "originY",
          "originZ"
        ],
        "properties": {
          "angleDegree": {
            "title": "Angle in Degrees",
            "description": "Rotation angle in degrees around the specified axis",
            "allOf": [
              {
                "$ref": "#/definitions/Expr"
              }
            ]
          },
          "directionX": {
            "title": "Direction X",
            "description": "X component of the rotation axis direction vector",
            "allOf": [
              {
                "$ref": "#/definitions/Expr"
              }
            ]
          },
          "directionY": {
            "title": "Direction Y",
            "description": "Y component of the rotation axis direction vector",
            "allOf": [
              {
                "$ref": "#/definitions/Expr"
              }
            ]
          },
          "directionZ": {
            "title": "Direction Z",
            "description": "Z component of the rotation axis direction vector",
            "allOf": [
              {
                "$ref": "#/definitions/Expr"
              }
            ]
          },
          "originX": {
            "title": "Origin X",
            "description": "X coordinate of the rotation origin point",
            "allOf": [
              {
                "$ref": "#/definitions/Expr"
              }
            ]
          },
          "originY": {
            "title": "Origin Y",
            "description": "Y coordinate of the rotation origin point",
            "allOf": [
              {
                "$ref": "#/definitions/Expr"
              }
            ]
          },
          "originZ": {
            "title": "Origin Z",
            "description": "Z coordinate of the rotation origin point",
            "allOf": [
              {
                "$ref": "#/definitions/Expr"
              }
            ]
          }
        },
        "definitions": {
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "TwoDimensionForcer",
      "type": "processor",
      "description": "Force une géométrie à être bidimensionnelle.",
      "parameter": null,
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "VertexRemover",
      "type": "processor",
      "description": "Supprime des sommets spécifiques de la géométrie d'une entité",
      "parameter": null,
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default",
        "rejected"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "VerticalReprojector",
      "type": "processor",
      "description": "Reprojette la géométrie d'une entité dans un système de coordonnées spécifié",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Vertical Reprojector Parameters",
        "description": "Configure the type of vertical datum conversion to apply",
        "type": "object",
        "required": [
          "reprojectorType"
        ],
        "properties": {
          "reprojectorType": {
            "title": "Reprojector Type",
            "description": "The type of vertical coordinate transformation to apply",
            "allOf": [
              {
                "$ref": "#/definitions/VerticalReprojectorType"
              }
            ]
          }
        },
        "definitions": {
          "VerticalReprojectorType": {
            "type": "string",
            "enum": [
              "jgd2011ToWgs84"
            ]
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Geometry"
      ]
    },
    {
      "name": "WasmRuntimeExecutor",
      "type": "processor",
      "description": "Compile des scripts en .wasm et les exécute dans un environnement d'exécution wasm",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "WasmRuntimeExecutor Parameters",
        "description": "Configuration for compiling and executing scripts in WebAssembly runtime.",
        "type": "object",
        "required": [
          "processorType",
          "programmingLanguage",
          "source"
        ],
        "properties": {
          "processorType": {
            "title": "Processor Type",
            "description": "Type of processor to create (Source, Processor, or Sink)",
            "allOf": [
              {
                "$ref": "#/definitions/ProcessorType"
              }
            ]
          },
          "programmingLanguage": {
            "title": "Programming Language",
            "description": "Programming language of the source script (currently supports Python)",
            "allOf": [
              {
                "$ref": "#/definitions/ProgrammingLanguage"
              }
            ]
          },
          "source": {
            "title": "Source Code",
            "description": "Script source code or path to compile to WebAssembly",
            "allOf": [
              {
                "$ref": "#/definitions/Expr"
              }
            ]
          }
        },
        "definitions": {
          "Expr": {
            "type": "string"
          },
          "ProcessorType": {
            "type": "string",
            "enum": [
              "Attribute"
            ]
          },
          "ProgrammingLanguage": {
            "type": "string",
            "enum": [
              "Python"
            ]
          }
        }
      },
      "builtin": false,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "Wasm"
      ]
    },
    {
      "name": "XMLFragmenter",
      "type": "processor",
      "description": "Fragmente du XML",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "XMLFragmenter Parameters",
        "description": "Configuration for fragmenting XML documents into smaller pieces.",
        "oneOf": [
          {
            "description": "URL-based source configuration for XML fragmenting",
            "type": "object",
            "required": [
              "attribute",
              "elementsToExclude",
              "elementsToMatch",
              "source"
            ],
            "properties": {
              "attribute": {
                "$ref": "#/definitions/Attribute"
              },
              "elementsToExclude": {
                "$ref": "#/definitions/Expr"
              },
              "elementsToMatch": {
                "$ref": "#/definitions/Expr"
              },
              "source": {
                "type": "string",
                "enum": [
                  "url"
                ]
              }
            }
          }
        ],
        "definitions": {
          "Attribute": {
            "type": "string"
          },
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "default"
      ],
      "categories": [
        "XML"
      ]
    },
    {
      "name": "XMLValidator",
      "type": "processor",
      "description": "Valide le contenu XML",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "XmlValidatorParam",
        "type": "object",
        "required": [
          "attribute",
          "inputType",
          "validationType"
        ],
        "properties": {
          "attribute": {
            "$ref": "#/definitions/Attribute"
          },
          "inputType": {
            "$ref": "#/definitions/XmlInputType"
          },
          "validationType": {
            "$ref": "#/definitions/ValidationType"
          }
        },
        "definitions": {
          "Attribute": {
            "type": "string"
          },
          "ValidationType": {
            "type": "string",
            "enum": [
              "syntax",
              "syntaxAndNamespace",
              "syntaxAndSchema"
            ]
          },
          "XmlInputType": {
            "type": "string",
            "enum": [
              "file",
              "text"
            ]
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [
        "success",
        "failed"
      ],
      "categories": [
        "PLATEAU"
      ]
    },
    {
      "name": "ZipFileWriter",
      "type": "sink",
      "description": "Writes features to a zip file",
      "parameter": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "ZipFileWriter Parameters",
        "description": "Configuration for creating ZIP archive files from features.",
        "type": "object",
        "required": [
          "output"
        ],
        "properties": {
          "output": {
            "description": "Output path",
            "allOf": [
              {
                "$ref": "#/definitions/Expr"
              }
            ]
          }
        },
        "definitions": {
          "Expr": {
            "type": "string"
          }
        }
      },
      "builtin": true,
      "inputPorts": [
        "default"
      ],
      "outputPorts": [],
      "categories": [
        "File"
      ]
    }
  ]
}
