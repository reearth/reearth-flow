type Project implements Node {
  id: ID!
  isArchived: Boolean!
  isBasicAuthActive: Boolean!
  basicAuthUsername: String!
  basicAuthPassword: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  description: String!
  workspaceId: ID!
  workspace: Workspace
}

# InputType

input CreateProjectInput {
  workspaceId: ID!
  name: String
  description: String
  archived: Boolean
}

input UpdateProjectInput {
  projectId: ID!
  name: String
  description: String
  archived: Boolean
  isBasicAuthActive: Boolean
  basicAuthUsername: String
  basicAuthPassword: String
}

input DeleteProjectInput {
  projectId: ID!
}

# Payload

type ProjectPayload {
  project: Project!
}

type DeleteProjectPayload {
  projectId: ID!
}

# Connection

type ProjectConnection {
  edges: [ProjectEdge!]!
  nodes: [Project]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ProjectEdge {
  cursor: Cursor!
  node: Project
}

extend type Query{
  projects(workspaceId: ID!, includeArchived: Boolean, first: Int, last: Int, after: Cursor, before: Cursor): ProjectConnection!
}

extend type Mutation {
  createProject(input: CreateProjectInput!): ProjectPayload
  updateProject(input: UpdateProjectInput!): ProjectPayload
  deleteProject(input: DeleteProjectInput!): DeleteProjectPayload
}