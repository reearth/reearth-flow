# Types

type Deployment implements Node {
  createdAt: DateTime!
  description: String!
  id: ID!
  project: Project
  projectId: ID!
  updatedAt: DateTime!
  version: String!
  workflowUrl: String!
  workspace: Workspace
  workspaceId: ID!
}

type Job implements Node {
  completedAt: DateTime
  deployment: Deployment
  deploymentId: ID!
  id: ID!
  startedAt: DateTime!
  status: JobStatus!
  workspace: Workspace
  workspaceId: ID!
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}

# Input Types

input CreateDeploymentInput {
  workspaceId: ID!
  projectId: ID!
  file: Upload!
  description: String
}

input UpdateDeploymentInput {
  deploymentId: ID!
  file: Upload
  description: String
}

input DeleteDeploymentInput {
  deploymentId: ID!
}

input ExecuteDeploymentInput {
  deploymentId: ID!
}

# Payload Types

type DeploymentPayload {
  deployment: Deployment!
}

type DeleteDeploymentPayload {
  deploymentId: ID!
}

type JobPayload {
  job: Job!
}

# Connection Types

type DeploymentConnection {
  edges: [DeploymentEdge!]!
  nodes: [Deployment]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type DeploymentEdge {
  cursor: Cursor!
  node: Deployment
}

type JobConnection {
  edges: [JobEdge!]!
  nodes: [Job]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type JobEdge {
  cursor: Cursor!
  node: Job
}

# Query and Mutation Extensions

extend type Query {
  deployments(workspaceId: ID!, pagination: Pagination): DeploymentConnection!
  jobs(workspaceId: ID!, pagination: Pagination): JobConnection!
  job(id: ID!): Job
}

extend type Mutation {
  createDeployment(input: CreateDeploymentInput!): DeploymentPayload
  updateDeployment(input: UpdateDeploymentInput!): DeploymentPayload
  deleteDeployment(input: DeleteDeploymentInput!): DeleteDeploymentPayload
  executeDeployment(input: ExecuteDeploymentInput!): JobPayload
}
