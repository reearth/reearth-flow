name: build-ui
description: Builds the UI Editor and Its Docker Image
inputs:
  sha_short:
    description: 'sha_short'
    required: true
  new_tag:
    description: 'new_tag'
    required: true
  new_tag_short:
    description: 'new_tag_short'
    required: true
  name:
    description: 'name'
    required: true
  sha:
    description: "sha"
    required: true

jobs:
  build-ui:
    name: Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ui
    if: github.event.inputs.name
    env:
      NODE_OPTIONS: "--max-old-space-size=8192"
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: lts/*
      - uses: actions/checkout@v3
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: |
          CACHE_DIR=$(yarn cache dir)
          echo "dir=$CACHE_DIR" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Install
        run: yarn install
      - name: Build
        run: yarn build
      - name: Pack
        run: mv dist flow-ui && tar -zcvf flow-ui.tar.gz flow-ui
      - uses: actions/upload-artifact@v2
        with:
          name: flow-ui
          path: ui/flow-ui.tar.gz

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build-ui]
    if: ${{ github.event.inputs.name != 'blank' || github.event.inputs.new_tag != 'blank' }}
    env:
      ARTIFACT: flow-ui_${{ github.event.inputs.name && github.event.inputs.name != 'blank' && github.event.inputs.name || github.event.inputs.new_tag }}.tar.gz
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: flow-ui
      - name: Rename artifact
        run: mv flow-ui.tar.gz $ARTIFACT
      - name: Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: ${{ env.ARTIFACT }}
          artifactContentType: application/gzip
          commit: ${{ github.event.inputs.sha }}
          name: ${{ github.event.inputs.name && github.event.inputs.name != 'blank' && github.event.inputs.name || github.event.inputs.new_tag }}
          tag: ${{ github.event.inputs.name && github.event.inputs.name != 'blank' && github.event.inputs.name || github.event.inputs.new_tag }}
          body: ${{ github.event.inputs.sha }}
          prerelease: ${{ github.event.inputs.name && github.event.inputs.name != 'blank' }}
      - name: Download latest changelog
        if: ${{ github.event.inputs.new_tag != 'blank' }}
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: release.yml
          name: changelog-${{ github.event.inputs.new_tag }}
      - name: Update GitHub release
        if: ${{ github.event.inputs.new_tag != 'blank' }}
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: ${{ env.ARTIFACT }}
          artifactContentType: application/gzip
          commit: ${{ github.event.inputs.sha }}
          name: ${{ github.event.inputs.new_tag }}
          tag: ${{ github.event.inputs.new_tag }}
          bodyFile: CHANGELOG_latest.md

  build-docker-image:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs: [release]
    if: ${{ github.event.inputs.name != 'blank' || github.event.inputs.new_tag != 'blank' }}
    env:
      IMAGE_NAME: reearth/reearth-flow-ui
    defaults:
      run:
        working-directory: server
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Get options
        id: options
        env:
          TAG: ${{ github.event.inputs.new_tag_short && github.event.inputs.new_tag_short != 'blank' && github.event.inputs.new_tag_short || '' }}
          NAME: ${{ github.event.inputs.name }}
          SHA: ${{ github.event.inputs.sha_short }}
        run: |
          if [[ -n $TAG ]]; then
            PLATFORMS=linux/amd64,linux/arm64
            VERSION=$TAG
            TAGS=$IMAGE_NAME:$TAG
            if [[ ! $TAG =~ '-' ]]; then
              TAGS+=,${IMAGE_NAME}:${TAG%.*}
              TAGS+=,${IMAGE_NAME}:${TAG%%.*}
              TAGS+=,${IMAGE_NAME}:latest
            fi
          else
            PLATFORMS=linux/amd64
            VERSION=$SHA
            TAGS=$IMAGE_NAME:$NAME
          fi
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tags=$TAGS" >> $GITHUB_OUTPUT
      - name: Fetch flow-ui release
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          repo: reearth/reearth-flow
          version: tags/${{ github.event.inputs.name && github.event.inputs.name != 'blank' && github.event.inputs.name || github.event.inputs.new_tag }}
          file: flow-ui_${{ github.event.inputs.name && github.event.inputs.name != 'blank' && github.event.inputs.name || github.event.inputs.new_tag }}.tar.gz
          token: ${{ secrets.GITHUB_TOKEN }}
          target: server/flow-ui.tar.gz
      - name: Extract reearth-flow/ui
        run: tar -xvf flow-ui.tar.gz; mv flow-ui ui; ls
      - name: Build and push docker image
        uses: docker/build-push-action@v2
        with:
          context: ui
          platforms: ${{ steps.options.outputs.platforms }}
          push: true
          build-args: VERSION=${{ steps.options.outputs.version }}
          tags: ${{ steps.options.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Deploy to nightly
        if: ${{ github.event.inputs.name == 'nightly' }}
        env:
          IMAGE: reearth/reearth-flow-ui:nightly
          IMAGE_GCP: us.gcr.io/reearth-oss/reearth-flow-ui:nightly
          GCP_REGION: us-central1
          CLOUD_RUN_SERVICE: reearth-flow-ui
        steps:
          - uses: google-github-actions/auth@v0
            with:
              credentials_json: ${{ secrets.GCP_SA_KEY }}
          - name: Set up Cloud SDK
            uses: google-github-actions/setup-gcloud@v0
          - name: Configure docker
            run: gcloud auth configure-docker --quiet
          - name: docker push
            run: |
              docker pull $IMAGE
              docker tag $IMAGE $IMAGE_GCP
              docker push $IMAGE_GCP
          - name: Deploy to Cloud Run
            run: |
              gcloud run deploy $CLOUD_RUN_SERVICE \
                --image $IMAGE_GCP \
                --region $GCP_REGION \
                --platform managed \
                --quiet