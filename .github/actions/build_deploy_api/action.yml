name: build-deploy-api
description: Build and deploy the API
inputs:
  sha_short:
    required: true
    type: string
  new_tag:
    required: true
    type: string
  new_tag_short:
    required: true
    type: string
  name:
    required: true
    type: string
  sha:
    required: true
    type: string

runs:
  using: composite
  steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
      - name: Run GoReleaser
        shell: bash
        run: |
          if [[ "${{ inputs.name }}" != "blank" || "${{ inputs.new_tag }}" != "blank" ]]; then
            args="release --rm-dist"
            if [[ "${{ inputs.new_tag }}" == "blank" ]]; then
              args="$args --snapshot"
            fi
            GORELEASER_CURRENT_TAG="${{ inputs.new_tag == 'blank' && '0.0.0' || inputs.new_tag }}"
            cd api
            goreleaser $args
          fi
      - name: Rename artifacts
        if: ${{ inputs.name != 'blank' }}
        run: for f in $ARTIFACTS; do mv $f $(echo $f | sed -E 's/_0\.0\.0-SNAPSHOT-[^_]*/_${{ inputs.name }}/'); done
      - name: List artifacts
        run: ls -l api/dist
      - name: Release nightly/rc
        if: ${{ inputs.name != 'blank' }}
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: ${{ env.ARTIFACTS }}
          commit: ${{ inputs.sha }}
          name: ${{ inputs.name }}
          tag: ${{ inputs.name }}
          body: ${{ inputs.sha_short }}
          prerelease: true
      - name: Create GitHub release
        if: ${{ inputs.new_tag != 'blank' }}
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: ${{ env.ARTIFACTS }}
          commit: ${{ inputs.sha }}
          name: ${{ inputs.new_tag }}
          tag: ${{ inputs.new_tag}}
          bodyFile: CHANGELOG_latest.md

  build-docker-image:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    if: ${{ inputs.name != 'blank' || inputs.new_tag != 'blank' }}
    env:
      IMAGE_NAME: reearth/reearth-flow-api
    defaults:
      run:
        working-directory: api
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.GH_APP_ID }}
          private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Get options
        id: options
        env:
          TAG: ${{ inputs.new_tag_short && inputs.new_tag_short != 'blank' && inputs.new_tag_short || '' }}
          NAME: ${{ inputs.name }}
          SHA: ${{ inputs.sha_short }}
        run: |
          if [[ -n $TAG ]]; then
            PLATFORMS=linux/amd64,linux/arm64
            VERSION=$TAG
            TAGS=$IMAGE_NAME:$TAG
            if [[ ! $TAG =~ '-' ]]; then
              TAGS+=,${IMAGE_NAME}:${TAG%.*}
              TAGS+=,${IMAGE_NAME}:${TAG%%.*}
              TAGS+=,${IMAGE_NAME}:latest
            fi
          else
            PLATFORMS=linux/amd64
            VERSION=$SHA
            TAGS=$IMAGE_NAME:$NAME
          fi
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tags=$TAGS" >> $GITHUB_OUTPUT
      - name: Build and push docker image
        uses: docker/build-push-action@v2
        with:
          context: api
          platforms: ${{ steps.options.outputs.platforms }}
          push: true
          build-args: VERSION=${{ steps.options.outputs.version }}
          tags: ${{ steps.options.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Deploy to nightly
        if: ${{ inputs.name == 'nightly' }}
        env:
          IMAGE: reearth/reearth-flow-api:nightly
          IMAGE_GCP: us-central1-docker.pkg.dev/reearth-oss/reearth/reearth-flow-api:nightly
          GCP_REGION: us-central1
          CLOUD_RUN_SERVICE: reearth-flow-api
        steps:
          - uses: google-github-actions/auth@v0
            with:
              credentials_json: ${{ secrets.GCP_SA_KEY }}
          - name: Set up Cloud SDK
            uses: google-github-actions/setup-gcloud@v0
          - name: Configure docker
            run: gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
          - name: docker push
            run: |
              docker pull $IMAGE
              docker tag $IMAGE $IMAGE_GCP
              docker push $IMAGE_GCP
          - name: Deploy to Cloud Run
            run: |
              gcloud run deploy $CLOUD_RUN_SERVICE \
                --image $IMAGE_GCP \
                --region $GCP_REGION \
                --platform managed \
                --quiet