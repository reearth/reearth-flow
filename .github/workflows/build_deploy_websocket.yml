name: Build and Deploy Websocket

on:
  workflow_call:
    inputs:
      sha_short:
        required: true
        type: string
      new_tag:
        required: true
        type: string
      new_tag_short:
        required: true
        type: string
      name:
        required: true
        type: string
      sha:
        required: true
        type: string

jobs:
  build-websocket:
    name: Build Websocket
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build Websocket
        run: |
          cd server/websocket
          cargo build --release

      - name: Create distribution directory
        run: |
          mkdir -p server/websocket/dist
          cp server/target/release/websocket server/websocket/dist/reearth-flow-websocket

      - name: Rename Artifacts
        if: ${{ inputs.name != 'blank' }}
        run: |
          cd server/websocket/dist
          mv reearth-flow-websocket reearth-flow-websocket_${{ inputs.name }}

      - name: List Artifacts
        run: ls -l server/websocket/dist

      - name: Upload Websocket Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: websocket-artifacts
          path: server/websocket/dist/*

  build-docker-image:
    name: Build and Push Docker Image
    needs: build-websocket
    runs-on: ubuntu-latest
    if: ${{ inputs.name != 'blank' || inputs.new_tag != 'blank' }}
    permissions:
      contents: read
      id-token: write
    env:
      IMAGE_NAME: reearth/reearth-flow-websocket
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Download Websocket Artifacts
        uses: actions/download-artifact@v4
        with:
          name: websocket-artifacts
          path: server/websocket/dist

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          service_account: ${{ secrets.GC_SA_EMAIL }}
          workload_identity_provider: ${{ secrets.GC_WORKLOAD_IDENTITY_PROVIDER }}

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Determine Build Options
        id: options
        run: |
          TAG="${{ inputs.new_tag_short != 'blank' && inputs.new_tag_short || '' }}"
          NAME="${{ inputs.name }}"
          SHA="${{ inputs.sha_short }}"

          if [[ -n "$TAG" ]]; then
            PLATFORMS="linux/amd64"
            VERSION="$TAG"
            TAGS="$IMAGE_NAME:$TAG"

            if [[ ! "$TAG" =~ '-' ]]; then
              TAGS+=",${IMAGE_NAME}:${TAG%.*}"
              TAGS+=",${IMAGE_NAME}:${TAG%%.*}"
              TAGS+=",${IMAGE_NAME}:latest"
            fi
          else
            PLATFORMS="linux/amd64"
            VERSION="$SHA"
            TAGS="$IMAGE_NAME:$NAME"
          fi

          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tags=$TAGS" >> $GITHUB_OUTPUT

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: server/websocket
          file: server/websocket/Dockerfile.websocket
          platforms: ${{ steps.options.outputs.platforms }}
          push: true
          build-args: VERSION=${{ steps.options.outputs.version }}
          tags: ${{ steps.options.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Configure Docker for GCP
        run: gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: Push Docker Image to GCP Artifact Registry
        if: ${{ inputs.name == 'nightly' }}
        run: |
          docker pull $IMAGE_NAME:${{ inputs.name }}
          docker tag $IMAGE_NAME:${{ inputs.name }} ${{ secrets.WEBSOCKET_IMAGE_GC }}:${{ inputs.name }}
          docker push ${{ secrets.WEBSOCKET_IMAGE_GC }}:${{ inputs.name }}

  deploy-to-cloud-run:
    name: Deploy to Cloud Run (Nightly)
    needs: build-docker-image
    runs-on: ubuntu-latest
    if: ${{ inputs.name == 'nightly' }}
    permissions:
      contents: read
      id-token: write
    env:
      CLOUD_RUN_SERVICE: reearth-flow-websocket
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          service_account: ${{ secrets.GC_SA_EMAIL }}
          workload_identity_provider: ${{ secrets.GC_WORKLOAD_IDENTITY_PROVIDER }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.CLOUD_RUN_SERVICE }} \
            --image ${{ secrets.WEBSOCKET_IMAGE_GC }}:nightly \
            --region ${{ secrets.GC_REGION }} \
            --platform managed \
            --quiet
