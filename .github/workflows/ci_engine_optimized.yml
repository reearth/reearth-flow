name: ci-engine-optimized

on:
  workflow_call:

env:
  # Keep incremental off for CI (better caching)
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  RUST_BACKTRACE: short
  FLOW_RUNTIME_ACTION_LOG_DISABLE: true
  # Add sparse protocol for faster registry access
  CARGO_REGISTRIES_CRATES_IO_PROTOCOL: sparse
  # sccache is optional - will fallback if unavailable
  SCCACHE_GHA_ENABLED: "true"

defaults:
  run:
    working-directory: engine

jobs:
  ci:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # KEEP THIS - Required for large Rust builds
      - name: Maximize build space
        uses: AdityaGarg8/remove-unwanted-software@v4.1
        with:
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
          remove-swapfile: 'true'
          remove-cached-tools: 'true'
      
      - uses: dtolnay/rust-toolchain@1.88
        with:
          components: clippy, rustfmt
      
      # Setup sccache for faster compilation (optional)
      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.3
        continue-on-error: true
        id: sccache
      
      # Set RUSTC_WRAPPER only if sccache setup succeeded
      - name: Configure Rust wrapper
        run: |
          if [ "${{ steps.sccache.outcome }}" = "success" ]; then
            echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
            echo "Using sccache for compilation"
          else
            echo "Sccache setup failed, using direct rustc"
          fi
      
      # Improved cargo caching
      - name: Cache cargo registry
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: engine
          # Use Cargo.lock hash for better cache hits
          shared-key: "engine-ci-${{ hashFiles('engine/Cargo.lock') }}"
          cache-on-failure: true
      
      # Cache generated schemas to skip regeneration when unchanged
      - name: Cache generated schemas
        id: cache-schemas
        uses: actions/cache@v3
        with:
          path: |
            engine/schema/actions*.json
            engine/docs/mdbook/src/action.md
          key: schema-${{ hashFiles('engine/runtime/action-*/**/*.rs', 'engine/runtime/action-*/**/*.toml') }}
      
      - name: Install required tools
        uses: taiki-e/install-action@v2
        with:
          tool: taplo-cli,cargo-make,cargo-edit
      
      - name: Compare version with previous commit
        if: ${{ !(github.ref == 'refs/heads/main') }}
        run: |
          # Try to get previous version, handle new files
          PREV_VERSION=$(git show "HEAD~1:engine/Cargo.toml" 2>/dev/null | grep '^version' | cut -d '"' -f2) || PREV_VERSION=""
          if [ -z "$PREV_VERSION" ]; then
            echo "No previous version found (new file?) - skipping version check"
            exit 0
          fi

          CURR_VERSION=$(grep '^version' Cargo.toml | cut -d '"' -f2)
          if [ -z "$CURR_VERSION" ]; then
            echo "Error: Could not find version in current Cargo.toml"
            exit 1
          fi

          echo "Previous version: $PREV_VERSION"
          echo "Current version:  $CURR_VERSION"

          if [ "$PREV_VERSION" = "$CURR_VERSION" ]; then
            echo "Error: The version of Cargo.toml has not been changed."
            echo "       To increase the patch version, run 'cargo set-version --bump patch'."
            echo "       To bump the version, run one of:"
            echo "       - 'cargo set-version --bump major'  # For breaking changes"
            echo "       - 'cargo set-version --bump minor'  # For new features"
            echo "       - 'cargo set-version --bump patch'  # For bug fixes"
            exit 1
          fi
      
      - name: Install Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
      
      - name: Install py2wasm
        run: |
          python -m pip install --upgrade pip
          pip install py2wasm
      
      # Build once, use cache for other commands
      - name: check
        run: cargo make check
      
      - name: rustfmt
        run: cargo fmt --all -- --check
      
      # Clippy with cached build artifacts
      - name: clippy
        run: cargo make clippy
      
      - name: taplo
        run: taplo fmt --check
      
      # Only generate schemas if cache miss or files changed
      - name: run generate schema
        if: steps.cache-schemas.outputs.cache-hit != 'true'
        run: cargo make doc-action
      
      - name: check generated schema
        run: |
          git add -N .
          git diff
          line=$(git diff | wc -l)
          if [ "$line" -gt 0 ]; then
            echo "Please run 'cargo make doc-action' and commit the changes."
            git diff
            exit 1
          fi
      
      # Run tests
      - name: run tests
        run: cargo make test
      
      # Optional: Show sccache stats for debugging
      - name: Show sccache stats
        if: always() && steps.sccache.outcome == 'success'
        run: sccache --show-stats
